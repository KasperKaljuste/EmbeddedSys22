
Projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000120b0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d0c  08012260  08012260  00022260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013f6c  08013f6c  000300dc  2**0
                  CONTENTS
  4 .ARM          00000008  08013f6c  08013f6c  00023f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013f74  08013f74  000300dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013f74  08013f74  00023f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013f78  08013f78  00023f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  08013f7c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300dc  2**0
                  CONTENTS
 10 .bss          00008f74  200000dc  200000dc  000300dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20009050  20009050  000300dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000324e3  00000000  00000000  0003010c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000075fb  00000000  00000000  000625ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002660  00000000  00000000  00069bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002348  00000000  00000000  0006c250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f3c9  00000000  00000000  0006e598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00030bd2  00000000  00000000  0009d961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9906  00000000  00000000  000ce533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001c7e39  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a9f0  00000000  00000000  001c7e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000dc 	.word	0x200000dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08012248 	.word	0x08012248

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000e0 	.word	0x200000e0
 80001ec:	08012248 	.word	0x08012248

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <ball_init>:
#include "ball_game.h"
#include "stdio.h"

ball ball_init(){
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	ball ball;
	ball.x = BSP_LCD_GetXSize()/2;
 800059c:	f002 f872 	bl	8002684 <BSP_LCD_GetXSize>
 80005a0:	4603      	mov	r3, r0
 80005a2:	0fda      	lsrs	r2, r3, #31
 80005a4:	4413      	add	r3, r2
 80005a6:	105b      	asrs	r3, r3, #1
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	813b      	strh	r3, [r7, #8]
	ball.y = 10;
 80005ac:	230a      	movs	r3, #10
 80005ae:	817b      	strh	r3, [r7, #10]
	ball.radius = 10;
 80005b0:	230a      	movs	r3, #10
 80005b2:	81bb      	strh	r3, [r7, #12]
	ball.speed = 2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	81fb      	strh	r3, [r7, #14]
	return ball;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	461a      	mov	r2, r3
 80005bc:	f107 0308 	add.w	r3, r7, #8
 80005c0:	cb03      	ldmia	r3!, {r0, r1}
 80005c2:	6010      	str	r0, [r2, #0]
 80005c4:	6051      	str	r1, [r2, #4]
}
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	3710      	adds	r7, #16
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}

080005ce <move_ball>:

ball move_ball(ball ball, Joystick_ud_lr joystick, int16_t move_speed){
 80005ce:	b480      	push	{r7}
 80005d0:	b085      	sub	sp, #20
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	60f8      	str	r0, [r7, #12]
 80005d6:	1d38      	adds	r0, r7, #4
 80005d8:	e880 0006 	stmia.w	r0, {r1, r2}
 80005dc:	603b      	str	r3, [r7, #0]
	// Palli liigutamine
	if (ball.y >= 310){ball.y = 310;}
 80005de:	88fb      	ldrh	r3, [r7, #6]
 80005e0:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 80005e4:	d303      	bcc.n	80005ee <move_ball+0x20>
 80005e6:	f44f 739b 	mov.w	r3, #310	; 0x136
 80005ea:	80fb      	strh	r3, [r7, #6]
 80005ec:	e00a      	b.n	8000604 <move_ball+0x36>
	else if (joystick.ud < 1900) {ball.y+=move_speed;}
 80005ee:	f9b7 3000 	ldrsh.w	r3, [r7]
 80005f2:	f240 726b 	movw	r2, #1899	; 0x76b
 80005f6:	4293      	cmp	r3, r2
 80005f8:	dc04      	bgt.n	8000604 <move_ball+0x36>
 80005fa:	88fa      	ldrh	r2, [r7, #6]
 80005fc:	8b3b      	ldrh	r3, [r7, #24]
 80005fe:	4413      	add	r3, r2
 8000600:	b29b      	uxth	r3, r3
 8000602:	80fb      	strh	r3, [r7, #6]

	if (ball.y <= 20) {ball.y = 20;}
 8000604:	88fb      	ldrh	r3, [r7, #6]
 8000606:	2b14      	cmp	r3, #20
 8000608:	d802      	bhi.n	8000610 <move_ball+0x42>
 800060a:	2314      	movs	r3, #20
 800060c:	80fb      	strh	r3, [r7, #6]
 800060e:	e009      	b.n	8000624 <move_ball+0x56>
	else if (joystick.ud > 2400) {ball.y-=move_speed;}
 8000610:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000614:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8000618:	dd04      	ble.n	8000624 <move_ball+0x56>
 800061a:	88fa      	ldrh	r2, [r7, #6]
 800061c:	8b3b      	ldrh	r3, [r7, #24]
 800061e:	1ad3      	subs	r3, r2, r3
 8000620:	b29b      	uxth	r3, r3
 8000622:	80fb      	strh	r3, [r7, #6]

	if (ball.x >= 229) {ball.x = 229;}
 8000624:	88bb      	ldrh	r3, [r7, #4]
 8000626:	2be4      	cmp	r3, #228	; 0xe4
 8000628:	d902      	bls.n	8000630 <move_ball+0x62>
 800062a:	23e5      	movs	r3, #229	; 0xe5
 800062c:	80bb      	strh	r3, [r7, #4]
 800062e:	e00a      	b.n	8000646 <move_ball+0x78>
	else if (joystick.lr < 1900) {ball.x += move_speed;}
 8000630:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000634:	f240 726b 	movw	r2, #1899	; 0x76b
 8000638:	4293      	cmp	r3, r2
 800063a:	dc04      	bgt.n	8000646 <move_ball+0x78>
 800063c:	88ba      	ldrh	r2, [r7, #4]
 800063e:	8b3b      	ldrh	r3, [r7, #24]
 8000640:	4413      	add	r3, r2
 8000642:	b29b      	uxth	r3, r3
 8000644:	80bb      	strh	r3, [r7, #4]

	if (ball.x <= ball.radius) {ball.x = ball.radius;}
 8000646:	88ba      	ldrh	r2, [r7, #4]
 8000648:	893b      	ldrh	r3, [r7, #8]
 800064a:	429a      	cmp	r2, r3
 800064c:	d802      	bhi.n	8000654 <move_ball+0x86>
 800064e:	893b      	ldrh	r3, [r7, #8]
 8000650:	80bb      	strh	r3, [r7, #4]
 8000652:	e009      	b.n	8000668 <move_ball+0x9a>
	else if (joystick.lr > 2400) {ball.x -= move_speed;}
 8000654:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000658:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 800065c:	dd04      	ble.n	8000668 <move_ball+0x9a>
 800065e:	88ba      	ldrh	r2, [r7, #4]
 8000660:	8b3b      	ldrh	r3, [r7, #24]
 8000662:	1ad3      	subs	r3, r2, r3
 8000664:	b29b      	uxth	r3, r3
 8000666:	80bb      	strh	r3, [r7, #4]

	return ball;
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	461a      	mov	r2, r3
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	cb03      	ldmia	r3!, {r0, r1}
 8000670:	6010      	str	r0, [r2, #0]
 8000672:	6051      	str	r1, [r2, #4]
}
 8000674:	68f8      	ldr	r0, [r7, #12]
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <create_line>:

line create_line(line line){
 8000680:	b084      	sub	sp, #16
 8000682:	b590      	push	{r4, r7, lr}
 8000684:	b083      	sub	sp, #12
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
 800068a:	f107 001c 	add.w	r0, r7, #28
 800068e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	line.y = 320;
 8000692:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000696:	84fb      	strh	r3, [r7, #38]	; 0x26
	line.speed = 1;
 8000698:	2301      	movs	r3, #1
 800069a:	853b      	strh	r3, [r7, #40]	; 0x28
	line.x1 = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	83bb      	strh	r3, [r7, #28]
	line.gap = srand(HAL_GetTick()) % 40 + 40;
 80006a0:	f003 f802 	bl	80036a8 <HAL_GetTick>
 80006a4:	4603      	mov	r3, r0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f010 fcac 	bl	8011004 <srand>
 80006ac:	4602      	mov	r2, r0
 80006ae:	4b20      	ldr	r3, [pc, #128]	; (8000730 <create_line+0xb0>)
 80006b0:	fb83 1302 	smull	r1, r3, r3, r2
 80006b4:	1119      	asrs	r1, r3, #4
 80006b6:	17d3      	asrs	r3, r2, #31
 80006b8:	1ac9      	subs	r1, r1, r3
 80006ba:	460b      	mov	r3, r1
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	440b      	add	r3, r1
 80006c0:	00db      	lsls	r3, r3, #3
 80006c2:	1ad1      	subs	r1, r2, r3
 80006c4:	b28b      	uxth	r3, r1
 80006c6:	3328      	adds	r3, #40	; 0x28
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	84bb      	strh	r3, [r7, #36]	; 0x24
	line.x1_len = srand(HAL_GetTick()) % 160;
 80006cc:	f002 ffec 	bl	80036a8 <HAL_GetTick>
 80006d0:	4603      	mov	r3, r0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f010 fc96 	bl	8011004 <srand>
 80006d8:	4602      	mov	r2, r0
 80006da:	4b15      	ldr	r3, [pc, #84]	; (8000730 <create_line+0xb0>)
 80006dc:	fb83 1302 	smull	r1, r3, r3, r2
 80006e0:	1199      	asrs	r1, r3, #6
 80006e2:	17d3      	asrs	r3, r2, #31
 80006e4:	1ac9      	subs	r1, r1, r3
 80006e6:	460b      	mov	r3, r1
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	440b      	add	r3, r1
 80006ec:	015b      	lsls	r3, r3, #5
 80006ee:	1ad1      	subs	r1, r2, r3
 80006f0:	b28b      	uxth	r3, r1
 80006f2:	843b      	strh	r3, [r7, #32]
	line.x2 = line.x1_len + line.gap;
 80006f4:	8c3a      	ldrh	r2, [r7, #32]
 80006f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80006f8:	4413      	add	r3, r2
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	83fb      	strh	r3, [r7, #30]
	line.x2_len = 240 - line.x1_len - line.gap;
 80006fe:	8c3a      	ldrh	r2, [r7, #32]
 8000700:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000702:	4413      	add	r3, r2
 8000704:	b29b      	uxth	r3, r3
 8000706:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800070a:	b29b      	uxth	r3, r3
 800070c:	847b      	strh	r3, [r7, #34]	; 0x22
	return line;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	461c      	mov	r4, r3
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000718:	6020      	str	r0, [r4, #0]
 800071a:	6061      	str	r1, [r4, #4]
 800071c:	60a2      	str	r2, [r4, #8]
 800071e:	881b      	ldrh	r3, [r3, #0]
 8000720:	81a3      	strh	r3, [r4, #12]
}
 8000722:	6878      	ldr	r0, [r7, #4]
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800072c:	b004      	add	sp, #16
 800072e:	4770      	bx	lr
 8000730:	66666667 	.word	0x66666667

08000734 <move_line>:

line move_line(line line){
 8000734:	b084      	sub	sp, #16
 8000736:	b590      	push	{r4, r7, lr}
 8000738:	b085      	sub	sp, #20
 800073a:	af02      	add	r7, sp, #8
 800073c:	6078      	str	r0, [r7, #4]
 800073e:	f107 001c 	add.w	r0, r7, #28
 8000742:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (!((line.y <= 320) && (line.y >= 0))) {
 8000746:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000748:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800074c:	d90a      	bls.n	8000764 <move_line+0x30>
		line = create_line(line);
 800074e:	f107 001c 	add.w	r0, r7, #28
 8000752:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000754:	f8ad 3000 	strh.w	r3, [sp]
 8000758:	f107 031c 	add.w	r3, r7, #28
 800075c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800075e:	f7ff ff8f 	bl	8000680 <create_line>
 8000762:	e004      	b.n	800076e <move_line+0x3a>
	}
	else {
		line.y = line.y - line.speed;
 8000764:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000766:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000768:	1ad3      	subs	r3, r2, r3
 800076a:	b29b      	uxth	r3, r3
 800076c:	84fb      	strh	r3, [r7, #38]	; 0x26
	}
	return line;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	461c      	mov	r4, r3
 8000772:	f107 031c 	add.w	r3, r7, #28
 8000776:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000778:	6020      	str	r0, [r4, #0]
 800077a:	6061      	str	r1, [r4, #4]
 800077c:	60a2      	str	r2, [r4, #8]
 800077e:	881b      	ldrh	r3, [r3, #0]
 8000780:	81a3      	strh	r3, [r4, #12]
}
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800078c:	b004      	add	sp, #16
 800078e:	4770      	bx	lr

08000790 <check_collision>:

bool check_collision(ball ball, line line){
 8000790:	b082      	sub	sp, #8
 8000792:	b490      	push	{r4, r7}
 8000794:	b082      	sub	sp, #8
 8000796:	af00      	add	r7, sp, #0
 8000798:	463c      	mov	r4, r7
 800079a:	e884 0003 	stmia.w	r4, {r0, r1}
 800079e:	f107 0110 	add.w	r1, r7, #16
 80007a2:	e881 000c 	stmia.w	r1, {r2, r3}
	if ((line.y < ball.y + ball.radius) && (line.y > ball.y - ball.radius)) {
 80007a6:	8b7b      	ldrh	r3, [r7, #26]
 80007a8:	461a      	mov	r2, r3
 80007aa:	887b      	ldrh	r3, [r7, #2]
 80007ac:	4619      	mov	r1, r3
 80007ae:	88bb      	ldrh	r3, [r7, #4]
 80007b0:	440b      	add	r3, r1
 80007b2:	429a      	cmp	r2, r3
 80007b4:	da19      	bge.n	80007ea <check_collision+0x5a>
 80007b6:	8b7b      	ldrh	r3, [r7, #26]
 80007b8:	461a      	mov	r2, r3
 80007ba:	887b      	ldrh	r3, [r7, #2]
 80007bc:	4619      	mov	r1, r3
 80007be:	88bb      	ldrh	r3, [r7, #4]
 80007c0:	1acb      	subs	r3, r1, r3
 80007c2:	429a      	cmp	r2, r3
 80007c4:	dd11      	ble.n	80007ea <check_collision+0x5a>
		if((line.x1_len > ball.x - ball.radius) || (line.x2 < ball.x + ball.radius)){
 80007c6:	8abb      	ldrh	r3, [r7, #20]
 80007c8:	461a      	mov	r2, r3
 80007ca:	883b      	ldrh	r3, [r7, #0]
 80007cc:	4619      	mov	r1, r3
 80007ce:	88bb      	ldrh	r3, [r7, #4]
 80007d0:	1acb      	subs	r3, r1, r3
 80007d2:	429a      	cmp	r2, r3
 80007d4:	dc07      	bgt.n	80007e6 <check_collision+0x56>
 80007d6:	8a7b      	ldrh	r3, [r7, #18]
 80007d8:	461a      	mov	r2, r3
 80007da:	883b      	ldrh	r3, [r7, #0]
 80007dc:	4619      	mov	r1, r3
 80007de:	88bb      	ldrh	r3, [r7, #4]
 80007e0:	440b      	add	r3, r1
 80007e2:	429a      	cmp	r2, r3
 80007e4:	da01      	bge.n	80007ea <check_collision+0x5a>
			return true;
 80007e6:	2301      	movs	r3, #1
 80007e8:	e000      	b.n	80007ec <check_collision+0x5c>
		}
	}
		return false;
 80007ea:	2300      	movs	r3, #0
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc90      	pop	{r4, r7}
 80007f4:	b002      	add	sp, #8
 80007f6:	4770      	bx	lr

080007f8 <create_powerup>:

powerup create_powerup(powerup powerup){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	e883 0006 	stmia.w	r3, {r1, r2}
	powerup.type = srand(HAL_GetTick()) % 3;
 8000806:	f002 ff4f 	bl	80036a8 <HAL_GetTick>
 800080a:	4603      	mov	r3, r0
 800080c:	4618      	mov	r0, r3
 800080e:	f010 fbf9 	bl	8011004 <srand>
 8000812:	4602      	mov	r2, r0
 8000814:	4b20      	ldr	r3, [pc, #128]	; (8000898 <create_powerup+0xa0>)
 8000816:	fb83 3102 	smull	r3, r1, r3, r2
 800081a:	17d3      	asrs	r3, r2, #31
 800081c:	1ac9      	subs	r1, r1, r3
 800081e:	460b      	mov	r3, r1
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	440b      	add	r3, r1
 8000824:	1ad1      	subs	r1, r2, r3
 8000826:	b2cb      	uxtb	r3, r1
 8000828:	723b      	strb	r3, [r7, #8]
	powerup.x = srand(HAL_GetTick()) % 200 + 20;
 800082a:	f002 ff3d 	bl	80036a8 <HAL_GetTick>
 800082e:	4603      	mov	r3, r0
 8000830:	4618      	mov	r0, r3
 8000832:	f010 fbe7 	bl	8011004 <srand>
 8000836:	4603      	mov	r3, r0
 8000838:	4a18      	ldr	r2, [pc, #96]	; (800089c <create_powerup+0xa4>)
 800083a:	fb82 1203 	smull	r1, r2, r2, r3
 800083e:	1191      	asrs	r1, r2, #6
 8000840:	17da      	asrs	r2, r3, #31
 8000842:	1a8a      	subs	r2, r1, r2
 8000844:	21c8      	movs	r1, #200	; 0xc8
 8000846:	fb01 f202 	mul.w	r2, r1, r2
 800084a:	1a9a      	subs	r2, r3, r2
 800084c:	b293      	uxth	r3, r2
 800084e:	3314      	adds	r3, #20
 8000850:	b29b      	uxth	r3, r3
 8000852:	80bb      	strh	r3, [r7, #4]
	powerup.y = srand(HAL_GetTick()) % 280 + 20;
 8000854:	f002 ff28 	bl	80036a8 <HAL_GetTick>
 8000858:	4603      	mov	r3, r0
 800085a:	4618      	mov	r0, r3
 800085c:	f010 fbd2 	bl	8011004 <srand>
 8000860:	4603      	mov	r3, r0
 8000862:	4a0f      	ldr	r2, [pc, #60]	; (80008a0 <create_powerup+0xa8>)
 8000864:	fb82 1203 	smull	r1, r2, r2, r3
 8000868:	441a      	add	r2, r3
 800086a:	1211      	asrs	r1, r2, #8
 800086c:	17da      	asrs	r2, r3, #31
 800086e:	1a8a      	subs	r2, r1, r2
 8000870:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000874:	fb01 f202 	mul.w	r2, r1, r2
 8000878:	1a9a      	subs	r2, r3, r2
 800087a:	b293      	uxth	r3, r2
 800087c:	3314      	adds	r3, #20
 800087e:	b29b      	uxth	r3, r3
 8000880:	80fb      	strh	r3, [r7, #6]
	return powerup;
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	461a      	mov	r2, r3
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	6818      	ldr	r0, [r3, #0]
 800088a:	6010      	str	r0, [r2, #0]
 800088c:	889b      	ldrh	r3, [r3, #4]
 800088e:	8093      	strh	r3, [r2, #4]
}
 8000890:	68f8      	ldr	r0, [r7, #12]
 8000892:	3710      	adds	r7, #16
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	55555556 	.word	0x55555556
 800089c:	51eb851f 	.word	0x51eb851f
 80008a0:	ea0ea0eb 	.word	0xea0ea0eb

080008a4 <check_powerup_collision>:

bool check_powerup_collision(ball ball, powerup powerup){
 80008a4:	b490      	push	{r4, r7}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	f107 0408 	add.w	r4, r7, #8
 80008ae:	e884 0003 	stmia.w	r4, {r0, r1}
 80008b2:	4639      	mov	r1, r7
 80008b4:	e881 000c 	stmia.w	r1, {r2, r3}
	if ((powerup.y < ball.y + ball.radius) && (powerup.y > ball.y - ball.radius)) {
 80008b8:	887b      	ldrh	r3, [r7, #2]
 80008ba:	461a      	mov	r2, r3
 80008bc:	897b      	ldrh	r3, [r7, #10]
 80008be:	4619      	mov	r1, r3
 80008c0:	89bb      	ldrh	r3, [r7, #12]
 80008c2:	440b      	add	r3, r1
 80008c4:	429a      	cmp	r2, r3
 80008c6:	da19      	bge.n	80008fc <check_powerup_collision+0x58>
 80008c8:	887b      	ldrh	r3, [r7, #2]
 80008ca:	461a      	mov	r2, r3
 80008cc:	897b      	ldrh	r3, [r7, #10]
 80008ce:	4619      	mov	r1, r3
 80008d0:	89bb      	ldrh	r3, [r7, #12]
 80008d2:	1acb      	subs	r3, r1, r3
 80008d4:	429a      	cmp	r2, r3
 80008d6:	dd11      	ble.n	80008fc <check_powerup_collision+0x58>
		if ((powerup.x < ball.x + ball.radius) && (powerup.x > ball.x - ball.radius)) {
 80008d8:	883b      	ldrh	r3, [r7, #0]
 80008da:	461a      	mov	r2, r3
 80008dc:	893b      	ldrh	r3, [r7, #8]
 80008de:	4619      	mov	r1, r3
 80008e0:	89bb      	ldrh	r3, [r7, #12]
 80008e2:	440b      	add	r3, r1
 80008e4:	429a      	cmp	r2, r3
 80008e6:	da09      	bge.n	80008fc <check_powerup_collision+0x58>
 80008e8:	883b      	ldrh	r3, [r7, #0]
 80008ea:	461a      	mov	r2, r3
 80008ec:	893b      	ldrh	r3, [r7, #8]
 80008ee:	4619      	mov	r1, r3
 80008f0:	89bb      	ldrh	r3, [r7, #12]
 80008f2:	1acb      	subs	r3, r1, r3
 80008f4:	429a      	cmp	r2, r3
 80008f6:	dd01      	ble.n	80008fc <check_powerup_collision+0x58>
			return true;
 80008f8:	2301      	movs	r3, #1
 80008fa:	e000      	b.n	80008fe <check_powerup_collision+0x5a>
		}
	}
	return false;
 80008fc:	2300      	movs	r3, #0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bc90      	pop	{r4, r7}
 8000906:	4770      	bx	lr

08000908 <CS_START>:


#include "joystick.h"
#include "gpio.h"

void CS_START(){
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000912:	4802      	ldr	r0, [pc, #8]	; (800091c <CS_START+0x14>)
 8000914:	f004 f896 	bl	8004a44 <HAL_GPIO_WritePin>
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40020800 	.word	0x40020800

08000920 <CS_END>:

void CS_END(){
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000924:	2201      	movs	r2, #1
 8000926:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800092a:	4802      	ldr	r0, [pc, #8]	; (8000934 <CS_END+0x14>)
 800092c:	f004 f88a 	bl	8004a44 <HAL_GPIO_WritePin>
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40020800 	.word	0x40020800

08000938 <Joystick_Read>:

void Joystick_Read(Joystick_ud_lr *ud_lr){
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af02      	add	r7, sp, #8
 800093e:	6078      	str	r0, [r7, #4]
    //Up down
	uint8_t pTxData[2] = {0b00011000, 0};
 8000940:	2318      	movs	r3, #24
 8000942:	81bb      	strh	r3, [r7, #12]
    uint8_t pRxData[2] = {0, 0};
 8000944:	2300      	movs	r3, #0
 8000946:	813b      	strh	r3, [r7, #8]

    CS_START();
 8000948:	f7ff ffde 	bl	8000908 <CS_START>
    HAL_SPI_TransmitReceive(&hspi4, pTxData, pRxData, 2, HAL_MAX_DELAY);
 800094c:	f107 0208 	add.w	r2, r7, #8
 8000950:	f107 010c 	add.w	r1, r7, #12
 8000954:	f04f 33ff 	mov.w	r3, #4294967295
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	2302      	movs	r3, #2
 800095c:	4815      	ldr	r0, [pc, #84]	; (80009b4 <Joystick_Read+0x7c>)
 800095e:	f007 fa40 	bl	8007de2 <HAL_SPI_TransmitReceive>
    CS_END();
 8000962:	f7ff ffdd 	bl	8000920 <CS_END>

    ud_lr->lr = (pRxData[0] << 8) | (pRxData[1]);
 8000966:	7a3b      	ldrb	r3, [r7, #8]
 8000968:	021b      	lsls	r3, r3, #8
 800096a:	b21a      	sxth	r2, r3
 800096c:	7a7b      	ldrb	r3, [r7, #9]
 800096e:	b21b      	sxth	r3, r3
 8000970:	4313      	orrs	r3, r2
 8000972:	b21a      	sxth	r2, r3
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	805a      	strh	r2, [r3, #2]

    pTxData[0] = 0b00100000;
 8000978:	2320      	movs	r3, #32
 800097a:	733b      	strb	r3, [r7, #12]
    CS_START();
 800097c:	f7ff ffc4 	bl	8000908 <CS_START>
    HAL_SPI_TransmitReceive(&hspi4, pTxData, pRxData, 2, HAL_MAX_DELAY);
 8000980:	f107 0208 	add.w	r2, r7, #8
 8000984:	f107 010c 	add.w	r1, r7, #12
 8000988:	f04f 33ff 	mov.w	r3, #4294967295
 800098c:	9300      	str	r3, [sp, #0]
 800098e:	2302      	movs	r3, #2
 8000990:	4808      	ldr	r0, [pc, #32]	; (80009b4 <Joystick_Read+0x7c>)
 8000992:	f007 fa26 	bl	8007de2 <HAL_SPI_TransmitReceive>
    CS_END();
 8000996:	f7ff ffc3 	bl	8000920 <CS_END>


    ud_lr->ud = (pRxData[0] << 8) | (pRxData[1]);
 800099a:	7a3b      	ldrb	r3, [r7, #8]
 800099c:	021b      	lsls	r3, r3, #8
 800099e:	b21a      	sxth	r2, r3
 80009a0:	7a7b      	ldrb	r3, [r7, #9]
 80009a2:	b21b      	sxth	r3, r3
 80009a4:	4313      	orrs	r3, r2
 80009a6:	b21a      	sxth	r2, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	801a      	strh	r2, [r3, #0]



}
 80009ac:	bf00      	nop
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000448 	.word	0x20000448

080009b8 <HAL_DMA2D_MspInit>:
  /* USER CODE END DMA2D_Init 2 */

}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a0e      	ldr	r2, [pc, #56]	; (8000a00 <HAL_DMA2D_MspInit+0x48>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d115      	bne.n	80009f6 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <HAL_DMA2D_MspInit+0x4c>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a0c      	ldr	r2, [pc, #48]	; (8000a04 <HAL_DMA2D_MspInit+0x4c>)
 80009d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <HAL_DMA2D_MspInit+0x4c>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2105      	movs	r1, #5
 80009ea:	205a      	movs	r0, #90	; 0x5a
 80009ec:	f002 ff44 	bl	8003878 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80009f0:	205a      	movs	r0, #90	; 0x5a
 80009f2:	f002 ff5d 	bl	80038b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80009f6:	bf00      	nop
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	4002b000 	.word	0x4002b000
 8000a04:	40023800 	.word	0x40023800

08000a08 <HAL_FMC_MspInit>:
  /* USER CODE END FMC_Init 2 */
}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000a1c:	4b3b      	ldr	r3, [pc, #236]	; (8000b0c <HAL_FMC_MspInit+0x104>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d16f      	bne.n	8000b04 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000a24:	4b39      	ldr	r3, [pc, #228]	; (8000b0c <HAL_FMC_MspInit+0x104>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	4b38      	ldr	r3, [pc, #224]	; (8000b10 <HAL_FMC_MspInit+0x108>)
 8000a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a32:	4a37      	ldr	r2, [pc, #220]	; (8000b10 <HAL_FMC_MspInit+0x108>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6393      	str	r3, [r2, #56]	; 0x38
 8000a3a:	4b35      	ldr	r3, [pc, #212]	; (8000b10 <HAL_FMC_MspInit+0x108>)
 8000a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000a46:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000a4a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a54:	2303      	movs	r3, #3
 8000a56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a58:	230c      	movs	r3, #12
 8000a5a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	4619      	mov	r1, r3
 8000a60:	482c      	ldr	r0, [pc, #176]	; (8000b14 <HAL_FMC_MspInit+0x10c>)
 8000a62:	f003 fd1f 	bl	80044a4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000a66:	2301      	movs	r3, #1
 8000a68:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a72:	2303      	movs	r3, #3
 8000a74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a76:	230c      	movs	r3, #12
 8000a78:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4826      	ldr	r0, [pc, #152]	; (8000b18 <HAL_FMC_MspInit+0x110>)
 8000a80:	f003 fd10 	bl	80044a4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000a84:	f248 1333 	movw	r3, #33075	; 0x8133
 8000a88:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a92:	2303      	movs	r3, #3
 8000a94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a96:	230c      	movs	r3, #12
 8000a98:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	481f      	ldr	r0, [pc, #124]	; (8000b1c <HAL_FMC_MspInit+0x114>)
 8000aa0:	f003 fd00 	bl	80044a4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000aa4:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000aa8:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ab6:	230c      	movs	r3, #12
 8000ab8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	4619      	mov	r1, r3
 8000abe:	4818      	ldr	r0, [pc, #96]	; (8000b20 <HAL_FMC_MspInit+0x118>)
 8000ac0:	f003 fcf0 	bl	80044a4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000ac4:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000ac8:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ad6:	230c      	movs	r3, #12
 8000ad8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	4619      	mov	r1, r3
 8000ade:	4811      	ldr	r0, [pc, #68]	; (8000b24 <HAL_FMC_MspInit+0x11c>)
 8000ae0:	f003 fce0 	bl	80044a4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000ae4:	2360      	movs	r3, #96	; 0x60
 8000ae6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af0:	2303      	movs	r3, #3
 8000af2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000af4:	230c      	movs	r3, #12
 8000af6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	4619      	mov	r1, r3
 8000afc:	480a      	ldr	r0, [pc, #40]	; (8000b28 <HAL_FMC_MspInit+0x120>)
 8000afe:	f003 fcd1 	bl	80044a4 <HAL_GPIO_Init>
 8000b02:	e000      	b.n	8000b06 <HAL_FMC_MspInit+0xfe>
    return;
 8000b04:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000b06:	3718      	adds	r7, #24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000138 	.word	0x20000138
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40021400 	.word	0x40021400
 8000b18:	40020800 	.word	0x40020800
 8000b1c:	40021800 	.word	0x40021800
 8000b20:	40021000 	.word	0x40021000
 8000b24:	40020c00 	.word	0x40020c00
 8000b28:	40020400 	.word	0x40020400

08000b2c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000b34:	f7ff ff68 	bl	8000a08 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	b083      	sub	sp, #12
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
	...

08000b74 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	4a07      	ldr	r2, [pc, #28]	; (8000ba0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b84:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	4a06      	ldr	r2, [pc, #24]	; (8000ba4 <vApplicationGetIdleTaskMemory+0x30>)
 8000b8a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2280      	movs	r2, #128	; 0x80
 8000b90:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b92:	bf00      	nop
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	20000144 	.word	0x20000144
 8000ba4:	2000019c 	.word	0x2000019c

08000ba8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ba8:	b5b0      	push	{r4, r5, r7, lr}
 8000baa:	b08a      	sub	sp, #40	; 0x28
 8000bac:	af02      	add	r7, sp, #8
  /* USER CODE END Init */
  /* Create the mutex(es) */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  JoyMutex = xSemaphoreCreateMutex();
 8000bae:	2001      	movs	r0, #1
 8000bb0:	f00c fe87 	bl	800d8c2 <xQueueCreateMutex>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	4a17      	ldr	r2, [pc, #92]	; (8000c14 <MX_FREERTOS_Init+0x6c>)
 8000bb8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000bba:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <MX_FREERTOS_Init+0x70>)
 8000bbc:	1d3c      	adds	r4, r7, #4
 8000bbe:	461d      	mov	r5, r3
 8000bc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bc8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f00c fb32 	bl	800d23a <osThreadCreate>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	4a10      	ldr	r2, [pc, #64]	; (8000c1c <MX_FREERTOS_Init+0x74>)
 8000bda:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  UartTaskInit();
 8000bdc:	f001 f8ee 	bl	8001dbc <UartTaskInit>
  xTaskCreate(vLCDtask, "LCDtask", 1000, NULL, osPriorityNormal, NULL);
 8000be0:	2300      	movs	r3, #0
 8000be2:	9301      	str	r3, [sp, #4]
 8000be4:	2300      	movs	r3, #0
 8000be6:	9300      	str	r3, [sp, #0]
 8000be8:	2300      	movs	r3, #0
 8000bea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bee:	490c      	ldr	r1, [pc, #48]	; (8000c20 <MX_FREERTOS_Init+0x78>)
 8000bf0:	480c      	ldr	r0, [pc, #48]	; (8000c24 <MX_FREERTOS_Init+0x7c>)
 8000bf2:	f00d ff90 	bl	800eb16 <xTaskCreate>
  xTaskCreate(vJOYtask, "JOYtask", 1000, NULL, osPriorityNormal, NULL);
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	9301      	str	r3, [sp, #4]
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c04:	4908      	ldr	r1, [pc, #32]	; (8000c28 <MX_FREERTOS_Init+0x80>)
 8000c06:	4809      	ldr	r0, [pc, #36]	; (8000c2c <MX_FREERTOS_Init+0x84>)
 8000c08:	f00d ff85 	bl	800eb16 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

}
 8000c0c:	bf00      	nop
 8000c0e:	3720      	adds	r7, #32
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bdb0      	pop	{r4, r5, r7, pc}
 8000c14:	2000013c 	.word	0x2000013c
 8000c18:	0801227c 	.word	0x0801227c
 8000c1c:	20000140 	.word	0x20000140
 8000c20:	0801226c 	.word	0x0801226c
 8000c24:	08000c45 	.word	0x08000c45
 8000c28:	08012274 	.word	0x08012274
 8000c2c:	08000fe1 	.word	0x08000fe1

08000c30 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000c38:	f00f fdac 	bl	8010794 <MX_USB_HOST_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	f00c fb48 	bl	800d2d2 <osDelay>
 8000c42:	e7fb      	b.n	8000c3c <StartDefaultTask+0xc>

08000c44 <vLCDtask>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
volatile Joystick_ud_lr ud_lr;

void vLCDtask(void const * argument){
 8000c44:	b590      	push	{r4, r7, lr}
 8000c46:	b0ad      	sub	sp, #180	; 0xb4
 8000c48:	af02      	add	r7, sp, #8
 8000c4a:	61f8      	str	r0, [r7, #28]
	score score;
	score.score = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
	score.high_score = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
	score.level = 1;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
	powerup powerup;
	powerup.type = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
	uint8_t state = splash;
 8000c64:	2300      	movs	r3, #0
 8000c66:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	char buffer[50];
	char instruction[] = "score +1000";
 8000c6a:	4ad0      	ldr	r2, [pc, #832]	; (8000fac <vLCDtask+0x368>)
 8000c6c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c70:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char instruction2[] = "or speed reset";
 8000c76:	4bce      	ldr	r3, [pc, #824]	; (8000fb0 <vLCDtask+0x36c>)
 8000c78:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8000c7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c7e:	c407      	stmia	r4!, {r0, r1, r2}
 8000c80:	8023      	strh	r3, [r4, #0]
 8000c82:	3402      	adds	r4, #2
 8000c84:	0c1b      	lsrs	r3, r3, #16
 8000c86:	7023      	strb	r3, [r4, #0]

	ball ball = ball_init();
 8000c88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fc81 	bl	8000594 <ball_init>
	line line1 = create_line(line1);
 8000c92:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000c96:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000c98:	f8ad 3000 	strh.w	r3, [sp]
 8000c9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ca0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ca2:	f7ff fced 	bl	8000680 <create_line>
	line line2 = create_line(line2);
 8000ca6:	f107 0020 	add.w	r0, r7, #32
 8000caa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000cac:	f8ad 3000 	strh.w	r3, [sp]
 8000cb0:	f107 0320 	add.w	r3, r7, #32
 8000cb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cb6:	f7ff fce3 	bl	8000680 <create_line>
	// Second line offset
	line2.y = BSP_LCD_GetYSize()/2;
 8000cba:	f001 fcef 	bl	800269c <BSP_LCD_GetYSize>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	085b      	lsrs	r3, r3, #1
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	857b      	strh	r3, [r7, #42]	; 0x2a

	for(;;){
		if (state == splash) {
 8000cc6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	f040 8082 	bne.w	8000dd4 <vLCDtask+0x190>
			// Update high score
			if (score.score > score.high_score) {
 8000cd0:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8000cd4:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d903      	bls.n	8000ce4 <vLCDtask+0xa0>
				score.high_score = score.score;
 8000cdc:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8000ce0:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
			}
			// Display score and high score
			snprintf(buffer, 50, "SCORE: %d", score.score);
 8000ce4:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8000ce8:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8000cec:	4ab1      	ldr	r2, [pc, #708]	; (8000fb4 <vLCDtask+0x370>)
 8000cee:	2132      	movs	r1, #50	; 0x32
 8000cf0:	f010 f9c6 	bl	8011080 <sniprintf>
			BSP_LCD_DisplayStringAt(0, 10, buffer, CENTER_MODE);
 8000cf4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	210a      	movs	r1, #10
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	f001 fe05 	bl	800290c <BSP_LCD_DisplayStringAt>
			snprintf(buffer, 50, "BEST: %d", score.high_score);
 8000d02:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8000d06:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8000d0a:	4aab      	ldr	r2, [pc, #684]	; (8000fb8 <vLCDtask+0x374>)
 8000d0c:	2132      	movs	r1, #50	; 0x32
 8000d0e:	f010 f9b7 	bl	8011080 <sniprintf>
			BSP_LCD_DisplayStringAt(0, 50, buffer, CENTER_MODE);
 8000d12:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000d16:	2301      	movs	r3, #1
 8000d18:	2132      	movs	r1, #50	; 0x32
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f001 fdf6 	bl	800290c <BSP_LCD_DisplayStringAt>

			// Display instructions
			BSP_LCD_FillRect(110, 80, 20, 20);
 8000d20:	2314      	movs	r3, #20
 8000d22:	2214      	movs	r2, #20
 8000d24:	2150      	movs	r1, #80	; 0x50
 8000d26:	206e      	movs	r0, #110	; 0x6e
 8000d28:	f001 ffd6 	bl	8002cd8 <BSP_LCD_FillRect>
			BSP_LCD_DisplayStringAt(0, 100, instruction, CENTER_MODE);
 8000d2c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000d30:	2301      	movs	r3, #1
 8000d32:	2164      	movs	r1, #100	; 0x64
 8000d34:	2000      	movs	r0, #0
 8000d36:	f001 fde9 	bl	800290c <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(0, 120, instruction2, CENTER_MODE);
 8000d3a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000d3e:	2301      	movs	r3, #1
 8000d40:	2178      	movs	r1, #120	; 0x78
 8000d42:	2000      	movs	r0, #0
 8000d44:	f001 fde2 	bl	800290c <BSP_LCD_DisplayStringAt>

			// Start game if button pressed
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET) {
 8000d48:	2101      	movs	r1, #1
 8000d4a:	489c      	ldr	r0, [pc, #624]	; (8000fbc <vLCDtask+0x378>)
 8000d4c:	f003 fe62 	bl	8004a14 <HAL_GPIO_ReadPin>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d13e      	bne.n	8000dd4 <vLCDtask+0x190>
				score.score = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
				score.level = 1;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
				ball = ball_init();
 8000d62:	f107 0310 	add.w	r3, r7, #16
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fc14 	bl	8000594 <ball_init>
 8000d6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d70:	f107 0210 	add.w	r2, r7, #16
 8000d74:	6810      	ldr	r0, [r2, #0]
 8000d76:	6851      	ldr	r1, [r2, #4]
 8000d78:	c303      	stmia	r3!, {r0, r1}
				line1 = create_line(line1);
 8000d7a:	4638      	mov	r0, r7
 8000d7c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000d7e:	f8ad 3000 	strh.w	r3, [sp]
 8000d82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d88:	f7ff fc7a 	bl	8000680 <create_line>
 8000d8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d90:	463c      	mov	r4, r7
 8000d92:	6820      	ldr	r0, [r4, #0]
 8000d94:	6861      	ldr	r1, [r4, #4]
 8000d96:	68a2      	ldr	r2, [r4, #8]
 8000d98:	c307      	stmia	r3!, {r0, r1, r2}
 8000d9a:	89a2      	ldrh	r2, [r4, #12]
 8000d9c:	801a      	strh	r2, [r3, #0]
				line2 = create_line(line2);
 8000d9e:	4638      	mov	r0, r7
 8000da0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000da2:	f8ad 3000 	strh.w	r3, [sp]
 8000da6:	f107 0320 	add.w	r3, r7, #32
 8000daa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dac:	f7ff fc68 	bl	8000680 <create_line>
 8000db0:	f107 0320 	add.w	r3, r7, #32
 8000db4:	463c      	mov	r4, r7
 8000db6:	6820      	ldr	r0, [r4, #0]
 8000db8:	6861      	ldr	r1, [r4, #4]
 8000dba:	68a2      	ldr	r2, [r4, #8]
 8000dbc:	c307      	stmia	r3!, {r0, r1, r2}
 8000dbe:	89a2      	ldrh	r2, [r4, #12]
 8000dc0:	801a      	strh	r2, [r3, #0]
				line2.y = BSP_LCD_GetYSize()/2;
 8000dc2:	f001 fc6b 	bl	800269c <BSP_LCD_GetYSize>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	085b      	lsrs	r3, r3, #1
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	857b      	strh	r3, [r7, #42]	; 0x2a
				state = game;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			}
		}
		if (state == game) {
 8000dd4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	f47f af74 	bne.w	8000cc6 <vLCDtask+0x82>
			score.score += 1;
 8000dde:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8000de2:	3301      	adds	r3, #1
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
			// Increase level and possibly create powerup every 200 points
			if(!(score.score % 200)){
 8000dea:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8000dee:	4a74      	ldr	r2, [pc, #464]	; (8000fc0 <vLCDtask+0x37c>)
 8000df0:	fba2 1203 	umull	r1, r2, r2, r3
 8000df4:	0992      	lsrs	r2, r2, #6
 8000df6:	21c8      	movs	r1, #200	; 0xc8
 8000df8:	fb01 f202 	mul.w	r2, r1, r2
 8000dfc:	1a9b      	subs	r3, r3, r2
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d10d      	bne.n	8000e20 <vLCDtask+0x1dc>
				score.level += 1;
 8000e04:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8000e08:	3301      	adds	r3, #1
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
				powerup = create_powerup(powerup);
 8000e10:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8000e14:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000e18:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000e1c:	f7ff fcec 	bl	80007f8 <create_powerup>

			}

			// Move ball and lines
			ball = move_ball(ball, ud_lr, ball.speed);
 8000e20:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8000e24:	b21b      	sxth	r3, r3
 8000e26:	4638      	mov	r0, r7
 8000e28:	4a66      	ldr	r2, [pc, #408]	; (8000fc4 <vLCDtask+0x380>)
 8000e2a:	9300      	str	r3, [sp, #0]
 8000e2c:	6813      	ldr	r3, [r2, #0]
 8000e2e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000e32:	ca06      	ldmia	r2, {r1, r2}
 8000e34:	f7ff fbcb 	bl	80005ce <move_ball>
 8000e38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e3c:	463a      	mov	r2, r7
 8000e3e:	6810      	ldr	r0, [r2, #0]
 8000e40:	6851      	ldr	r1, [r2, #4]
 8000e42:	c303      	stmia	r3!, {r0, r1}
			ball.speed = score.level + 1;
 8000e44:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8000e48:	3301      	adds	r3, #1
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
			line1.speed = score.level;
 8000e50:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8000e54:	87bb      	strh	r3, [r7, #60]	; 0x3c
			line1 = move_line(line1);
 8000e56:	4638      	mov	r0, r7
 8000e58:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000e5a:	f8ad 3000 	strh.w	r3, [sp]
 8000e5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e64:	f7ff fc66 	bl	8000734 <move_line>
 8000e68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e6c:	463c      	mov	r4, r7
 8000e6e:	6820      	ldr	r0, [r4, #0]
 8000e70:	6861      	ldr	r1, [r4, #4]
 8000e72:	68a2      	ldr	r2, [r4, #8]
 8000e74:	c307      	stmia	r3!, {r0, r1, r2}
 8000e76:	89a2      	ldrh	r2, [r4, #12]
 8000e78:	801a      	strh	r2, [r3, #0]
			line2.speed = score.level;
 8000e7a:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8000e7e:	85bb      	strh	r3, [r7, #44]	; 0x2c
			line2 = move_line(line2);
 8000e80:	4638      	mov	r0, r7
 8000e82:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000e84:	f8ad 3000 	strh.w	r3, [sp]
 8000e88:	f107 0320 	add.w	r3, r7, #32
 8000e8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e8e:	f7ff fc51 	bl	8000734 <move_line>
 8000e92:	f107 0320 	add.w	r3, r7, #32
 8000e96:	463c      	mov	r4, r7
 8000e98:	6820      	ldr	r0, [r4, #0]
 8000e9a:	6861      	ldr	r1, [r4, #4]
 8000e9c:	68a2      	ldr	r2, [r4, #8]
 8000e9e:	c307      	stmia	r3!, {r0, r1, r2}
 8000ea0:	89a2      	ldrh	r2, [r4, #12]
 8000ea2:	801a      	strh	r2, [r3, #0]
			// Check for collision
			if (check_collision(ball, line1) || check_collision(ball, line2)) {
 8000ea4:	466b      	mov	r3, sp
 8000ea6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000eaa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000eae:	6018      	str	r0, [r3, #0]
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	8019      	strh	r1, [r3, #0]
 8000eb4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000eb8:	cb0c      	ldmia	r3, {r2, r3}
 8000eba:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000ebe:	c903      	ldmia	r1, {r0, r1}
 8000ec0:	f7ff fc66 	bl	8000790 <check_collision>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d112      	bne.n	8000ef0 <vLCDtask+0x2ac>
 8000eca:	466b      	mov	r3, sp
 8000ecc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000ed0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ed4:	6018      	str	r0, [r3, #0]
 8000ed6:	3304      	adds	r3, #4
 8000ed8:	8019      	strh	r1, [r3, #0]
 8000eda:	f107 0320 	add.w	r3, r7, #32
 8000ede:	cb0c      	ldmia	r3, {r2, r3}
 8000ee0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000ee4:	c903      	ldmia	r1, {r0, r1}
 8000ee6:	f7ff fc53 	bl	8000790 <check_collision>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d002      	beq.n	8000ef6 <vLCDtask+0x2b2>
				state = splash;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			}

			BSP_LCD_Clear(LCD_COLOR_GRAY);
 8000ef6:	4834      	ldr	r0, [pc, #208]	; (8000fc8 <vLCDtask+0x384>)
 8000ef8:	f001 fc9c 	bl	8002834 <BSP_LCD_Clear>

			// Show score
			snprintf(buffer, 50, "SCORE: %d", score.score);
 8000efc:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8000f00:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8000f04:	4a2b      	ldr	r2, [pc, #172]	; (8000fb4 <vLCDtask+0x370>)
 8000f06:	2132      	movs	r1, #50	; 0x32
 8000f08:	f010 f8ba 	bl	8011080 <sniprintf>
			BSP_LCD_DisplayStringAt(0, 10, buffer, CENTER_MODE);
 8000f0c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000f10:	2301      	movs	r3, #1
 8000f12:	210a      	movs	r1, #10
 8000f14:	2000      	movs	r0, #0
 8000f16:	f001 fcf9 	bl	800290c <BSP_LCD_DisplayStringAt>
			// Show ball and lines
			BSP_LCD_FillCircle(ball.x, ball.y, ball.radius);
 8000f1a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000f1e:	f8b7 1042 	ldrh.w	r1, [r7, #66]	; 0x42
 8000f22:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8000f26:	4618      	mov	r0, r3
 8000f28:	f001 ff30 	bl	8002d8c <BSP_LCD_FillCircle>
			BSP_LCD_DrawHLine(line1.x1, line1.y, line1.x1_len);
 8000f2c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000f2e:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 8000f30:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8000f32:	4618      	mov	r0, r3
 8000f34:	f001 fda8 	bl	8002a88 <BSP_LCD_DrawHLine>
			BSP_LCD_DrawHLine(line1.x2, line1.y, line1.x2_len);
 8000f38:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000f3a:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 8000f3c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f001 fda2 	bl	8002a88 <BSP_LCD_DrawHLine>
			BSP_LCD_DrawHLine(line2.x1, line2.y, line2.x1_len);
 8000f44:	8c3b      	ldrh	r3, [r7, #32]
 8000f46:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8000f48:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f001 fd9c 	bl	8002a88 <BSP_LCD_DrawHLine>
			BSP_LCD_DrawHLine(line2.x2, line2.y, line2.x2_len);
 8000f50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000f52:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8000f54:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f56:	4618      	mov	r0, r3
 8000f58:	f001 fd96 	bl	8002a88 <BSP_LCD_DrawHLine>

			// Check for powerup
			if (powerup.type != 0) {
 8000f5c:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d039      	beq.n	8000fd8 <vLCDtask+0x394>
				BSP_LCD_FillRect(powerup.x-10, powerup.y-10, 20, 20);
 8000f64:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8000f68:	3b0a      	subs	r3, #10
 8000f6a:	b298      	uxth	r0, r3
 8000f6c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8000f70:	3b0a      	subs	r3, #10
 8000f72:	b299      	uxth	r1, r3
 8000f74:	2314      	movs	r3, #20
 8000f76:	2214      	movs	r2, #20
 8000f78:	f001 feae 	bl	8002cd8 <BSP_LCD_FillRect>
				if (check_powerup_collision(ball, powerup)) {
 8000f7c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000f80:	cb0c      	ldmia	r3, {r2, r3}
 8000f82:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000f86:	c903      	ldmia	r1, {r0, r1}
 8000f88:	f7ff fc8c 	bl	80008a4 <check_powerup_collision>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d022      	beq.n	8000fd8 <vLCDtask+0x394>
					if(powerup.type == 1){
 8000f92:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d118      	bne.n	8000fcc <vLCDtask+0x388>
						score.score += 1000;
 8000f9a:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8000f9e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 8000fa8:	e013      	b.n	8000fd2 <vLCDtask+0x38e>
 8000faa:	bf00      	nop
 8000fac:	080122b0 	.word	0x080122b0
 8000fb0:	080122bc 	.word	0x080122bc
 8000fb4:	08012298 	.word	0x08012298
 8000fb8:	080122a4 	.word	0x080122a4
 8000fbc:	40020000 	.word	0x40020000
 8000fc0:	51eb851f 	.word	0x51eb851f
 8000fc4:	2000039c 	.word	0x2000039c
 8000fc8:	ff808080 	.word	0xff808080
					}
					else {
						score.level = 1;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
					}
					powerup.type = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
				}
			}

			HAL_Delay(20);
 8000fd8:	2014      	movs	r0, #20
 8000fda:	f002 fb71 	bl	80036c0 <HAL_Delay>
		if (state == splash) {
 8000fde:	e672      	b.n	8000cc6 <vLCDtask+0x82>

08000fe0 <vJOYtask>:
		}
	}
}

void vJOYtask(void const * argument){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b092      	sub	sp, #72	; 0x48
 8000fe4:	af02      	add	r7, sp, #8
 8000fe6:	6078      	str	r0, [r7, #4]
	char buffer[50];
	uint16_t len;
	for(;;){
		xSemaphoreTake(JoyMutex, portMAX_DELAY);
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <vJOYtask+0x5c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f00c fef9 	bl	800dde8 <xQueueSemaphoreTake>
		Joystick_Read(&ud_lr);
 8000ff6:	4812      	ldr	r0, [pc, #72]	; (8001040 <vJOYtask+0x60>)
 8000ff8:	f7ff fc9e 	bl	8000938 <Joystick_Read>
		xSemaphoreGive(JoyMutex);
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <vJOYtask+0x5c>)
 8000ffe:	6818      	ldr	r0, [r3, #0]
 8001000:	2300      	movs	r3, #0
 8001002:	2200      	movs	r2, #0
 8001004:	2100      	movs	r1, #0
 8001006:	f00c fc75 	bl	800d8f4 <xQueueGenericSend>
		len = snprintf(buffer, sizeof(buffer), "Joy LR=%d, UD=%d\n", ud_lr.lr, ud_lr.ud);
 800100a:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <vJOYtask+0x60>)
 800100c:	885b      	ldrh	r3, [r3, #2]
 800100e:	b21b      	sxth	r3, r3
 8001010:	461a      	mov	r2, r3
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <vJOYtask+0x60>)
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	b21b      	sxth	r3, r3
 8001018:	f107 000c 	add.w	r0, r7, #12
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	4613      	mov	r3, r2
 8001020:	4a08      	ldr	r2, [pc, #32]	; (8001044 <vJOYtask+0x64>)
 8001022:	2132      	movs	r1, #50	; 0x32
 8001024:	f010 f82c 	bl	8011080 <sniprintf>
 8001028:	4603      	mov	r3, r0
 800102a:	87fb      	strh	r3, [r7, #62]	; 0x3e
		UartTask_sendData(buffer, len);
 800102c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800102e:	f107 030c 	add.w	r3, r7, #12
 8001032:	4611      	mov	r1, r2
 8001034:	4618      	mov	r0, r3
 8001036:	f000 fef1 	bl	8001e1c <UartTask_sendData>
	for(;;){
 800103a:	e7d5      	b.n	8000fe8 <vJOYtask+0x8>
 800103c:	2000013c 	.word	0x2000013c
 8001040:	2000039c 	.word	0x2000039c
 8001044:	080122cc 	.word	0x080122cc

08001048 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08e      	sub	sp, #56	; 0x38
 800104c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	623b      	str	r3, [r7, #32]
 8001062:	4b7c      	ldr	r3, [pc, #496]	; (8001254 <MX_GPIO_Init+0x20c>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a7b      	ldr	r2, [pc, #492]	; (8001254 <MX_GPIO_Init+0x20c>)
 8001068:	f043 0310 	orr.w	r3, r3, #16
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b79      	ldr	r3, [pc, #484]	; (8001254 <MX_GPIO_Init+0x20c>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0310 	and.w	r3, r3, #16
 8001076:	623b      	str	r3, [r7, #32]
 8001078:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
 800107e:	4b75      	ldr	r3, [pc, #468]	; (8001254 <MX_GPIO_Init+0x20c>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a74      	ldr	r2, [pc, #464]	; (8001254 <MX_GPIO_Init+0x20c>)
 8001084:	f043 0304 	orr.w	r3, r3, #4
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b72      	ldr	r3, [pc, #456]	; (8001254 <MX_GPIO_Init+0x20c>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0304 	and.w	r3, r3, #4
 8001092:	61fb      	str	r3, [r7, #28]
 8001094:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	61bb      	str	r3, [r7, #24]
 800109a:	4b6e      	ldr	r3, [pc, #440]	; (8001254 <MX_GPIO_Init+0x20c>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a6d      	ldr	r2, [pc, #436]	; (8001254 <MX_GPIO_Init+0x20c>)
 80010a0:	f043 0320 	orr.w	r3, r3, #32
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b6b      	ldr	r3, [pc, #428]	; (8001254 <MX_GPIO_Init+0x20c>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0320 	and.w	r3, r3, #32
 80010ae:	61bb      	str	r3, [r7, #24]
 80010b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
 80010b6:	4b67      	ldr	r3, [pc, #412]	; (8001254 <MX_GPIO_Init+0x20c>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a66      	ldr	r2, [pc, #408]	; (8001254 <MX_GPIO_Init+0x20c>)
 80010bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b64      	ldr	r3, [pc, #400]	; (8001254 <MX_GPIO_Init+0x20c>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ca:	617b      	str	r3, [r7, #20]
 80010cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	4b60      	ldr	r3, [pc, #384]	; (8001254 <MX_GPIO_Init+0x20c>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a5f      	ldr	r2, [pc, #380]	; (8001254 <MX_GPIO_Init+0x20c>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b5d      	ldr	r3, [pc, #372]	; (8001254 <MX_GPIO_Init+0x20c>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	4b59      	ldr	r3, [pc, #356]	; (8001254 <MX_GPIO_Init+0x20c>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a58      	ldr	r2, [pc, #352]	; (8001254 <MX_GPIO_Init+0x20c>)
 80010f4:	f043 0302 	orr.w	r3, r3, #2
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b56      	ldr	r3, [pc, #344]	; (8001254 <MX_GPIO_Init+0x20c>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	4b52      	ldr	r3, [pc, #328]	; (8001254 <MX_GPIO_Init+0x20c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a51      	ldr	r2, [pc, #324]	; (8001254 <MX_GPIO_Init+0x20c>)
 8001110:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b4f      	ldr	r3, [pc, #316]	; (8001254 <MX_GPIO_Init+0x20c>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	4b4b      	ldr	r3, [pc, #300]	; (8001254 <MX_GPIO_Init+0x20c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a4a      	ldr	r2, [pc, #296]	; (8001254 <MX_GPIO_Init+0x20c>)
 800112c:	f043 0308 	orr.w	r3, r3, #8
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b48      	ldr	r3, [pc, #288]	; (8001254 <MX_GPIO_Init+0x20c>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0308 	and.w	r3, r3, #8
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	f242 0116 	movw	r1, #8214	; 0x2016
 8001144:	4844      	ldr	r0, [pc, #272]	; (8001258 <MX_GPIO_Init+0x210>)
 8001146:	f003 fc7d 	bl	8004a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800114a:	2200      	movs	r2, #0
 800114c:	2180      	movs	r1, #128	; 0x80
 800114e:	4843      	ldr	r0, [pc, #268]	; (800125c <MX_GPIO_Init+0x214>)
 8001150:	f003 fc78 	bl	8004a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001154:	2200      	movs	r2, #0
 8001156:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800115a:	4841      	ldr	r0, [pc, #260]	; (8001260 <MX_GPIO_Init+0x218>)
 800115c:	f003 fc72 	bl	8004a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001166:	483f      	ldr	r0, [pc, #252]	; (8001264 <MX_GPIO_Init+0x21c>)
 8001168:	f003 fc6c 	bl	8004a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800116c:	f242 0316 	movw	r3, #8214	; 0x2016
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001172:	2301      	movs	r3, #1
 8001174:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001182:	4619      	mov	r1, r3
 8001184:	4834      	ldr	r0, [pc, #208]	; (8001258 <MX_GPIO_Init+0x210>)
 8001186:	f003 f98d 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800118a:	f248 0307 	movw	r3, #32775	; 0x8007
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001190:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001194:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119e:	4619      	mov	r1, r3
 80011a0:	482e      	ldr	r0, [pc, #184]	; (800125c <MX_GPIO_Init+0x214>)
 80011a2:	f003 f97f 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80011a6:	2380      	movs	r3, #128	; 0x80
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011aa:	2301      	movs	r3, #1
 80011ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b2:	2300      	movs	r3, #0
 80011b4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80011b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ba:	4619      	mov	r1, r3
 80011bc:	4827      	ldr	r0, [pc, #156]	; (800125c <MX_GPIO_Init+0x214>)
 80011be:	f003 f971 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80011c2:	2320      	movs	r3, #32
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80011c6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80011ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80011d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d4:	4619      	mov	r1, r3
 80011d6:	4820      	ldr	r0, [pc, #128]	; (8001258 <MX_GPIO_Init+0x210>)
 80011d8:	f003 f964 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80011dc:	2304      	movs	r3, #4
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e0:	2300      	movs	r3, #0
 80011e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80011e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ec:	4619      	mov	r1, r3
 80011ee:	481e      	ldr	r0, [pc, #120]	; (8001268 <MX_GPIO_Init+0x220>)
 80011f0:	f003 f958 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 80011f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011fa:	2300      	movs	r3, #0
 80011fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001206:	4619      	mov	r1, r3
 8001208:	4815      	ldr	r0, [pc, #84]	; (8001260 <MX_GPIO_Init+0x218>)
 800120a:	f003 f94b 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800120e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001214:	2301      	movs	r3, #1
 8001216:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	2300      	movs	r3, #0
 800121e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001224:	4619      	mov	r1, r3
 8001226:	480e      	ldr	r0, [pc, #56]	; (8001260 <MX_GPIO_Init+0x218>)
 8001228:	f003 f93c 	bl	80044a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800122c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001232:	2301      	movs	r3, #1
 8001234:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123a:	2300      	movs	r3, #0
 800123c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800123e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001242:	4619      	mov	r1, r3
 8001244:	4807      	ldr	r0, [pc, #28]	; (8001264 <MX_GPIO_Init+0x21c>)
 8001246:	f003 f92d 	bl	80044a4 <HAL_GPIO_Init>

}
 800124a:	bf00      	nop
 800124c:	3738      	adds	r7, #56	; 0x38
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40023800 	.word	0x40023800
 8001258:	40020800 	.word	0x40020800
 800125c:	40020000 	.word	0x40020000
 8001260:	40020c00 	.word	0x40020c00
 8001264:	40021800 	.word	0x40021800
 8001268:	40020400 	.word	0x40020400

0800126c <HAL_LTDC_MspInit>:
  /* USER CODE END LTDC_Init 2 */

}

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b09a      	sub	sp, #104	; 0x68
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001288:	2230      	movs	r2, #48	; 0x30
 800128a:	2100      	movs	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f00f fdd1 	bl	8010e34 <memset>
  if(ltdcHandle->Instance==LTDC)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a85      	ldr	r2, [pc, #532]	; (80014ac <HAL_LTDC_MspInit+0x240>)
 8001298:	4293      	cmp	r3, r2
 800129a:	f040 8103 	bne.w	80014a4 <HAL_LTDC_MspInit+0x238>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800129e:	2308      	movs	r3, #8
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 80012a2:	2360      	movs	r3, #96	; 0x60
 80012a4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 3;
 80012a6:	2303      	movs	r3, #3
 80012a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80012aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012ae:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b4:	4618      	mov	r0, r3
 80012b6:	f006 f845 	bl	8007344 <HAL_RCCEx_PeriphCLKConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 80012c0:	f000 f9aa 	bl	8001618 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80012c4:	2300      	movs	r3, #0
 80012c6:	623b      	str	r3, [r7, #32]
 80012c8:	4b79      	ldr	r3, [pc, #484]	; (80014b0 <HAL_LTDC_MspInit+0x244>)
 80012ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012cc:	4a78      	ldr	r2, [pc, #480]	; (80014b0 <HAL_LTDC_MspInit+0x244>)
 80012ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012d2:	6453      	str	r3, [r2, #68]	; 0x44
 80012d4:	4b76      	ldr	r3, [pc, #472]	; (80014b0 <HAL_LTDC_MspInit+0x244>)
 80012d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012dc:	623b      	str	r3, [r7, #32]
 80012de:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
 80012e4:	4b72      	ldr	r3, [pc, #456]	; (80014b0 <HAL_LTDC_MspInit+0x244>)
 80012e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e8:	4a71      	ldr	r2, [pc, #452]	; (80014b0 <HAL_LTDC_MspInit+0x244>)
 80012ea:	f043 0320 	orr.w	r3, r3, #32
 80012ee:	6313      	str	r3, [r2, #48]	; 0x30
 80012f0:	4b6f      	ldr	r3, [pc, #444]	; (80014b0 <HAL_LTDC_MspInit+0x244>)
 80012f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f4:	f003 0320 	and.w	r3, r3, #32
 80012f8:	61fb      	str	r3, [r7, #28]
 80012fa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fc:	2300      	movs	r3, #0
 80012fe:	61bb      	str	r3, [r7, #24]
 8001300:	4b6b      	ldr	r3, [pc, #428]	; (80014b0 <HAL_LTDC_MspInit+0x244>)
 8001302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001304:	4a6a      	ldr	r2, [pc, #424]	; (80014b0 <HAL_LTDC_MspInit+0x244>)
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	6313      	str	r3, [r2, #48]	; 0x30
 800130c:	4b68      	ldr	r3, [pc, #416]	; (80014b0 <HAL_LTDC_MspInit+0x244>)
 800130e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	61bb      	str	r3, [r7, #24]
 8001316:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	4b64      	ldr	r3, [pc, #400]	; (80014b0 <HAL_LTDC_MspInit+0x244>)
 800131e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001320:	4a63      	ldr	r2, [pc, #396]	; (80014b0 <HAL_LTDC_MspInit+0x244>)
 8001322:	f043 0302 	orr.w	r3, r3, #2
 8001326:	6313      	str	r3, [r2, #48]	; 0x30
 8001328:	4b61      	ldr	r3, [pc, #388]	; (80014b0 <HAL_LTDC_MspInit+0x244>)
 800132a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001334:	2300      	movs	r3, #0
 8001336:	613b      	str	r3, [r7, #16]
 8001338:	4b5d      	ldr	r3, [pc, #372]	; (80014b0 <HAL_LTDC_MspInit+0x244>)
 800133a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133c:	4a5c      	ldr	r2, [pc, #368]	; (80014b0 <HAL_LTDC_MspInit+0x244>)
 800133e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001342:	6313      	str	r3, [r2, #48]	; 0x30
 8001344:	4b5a      	ldr	r3, [pc, #360]	; (80014b0 <HAL_LTDC_MspInit+0x244>)
 8001346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001350:	2300      	movs	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	4b56      	ldr	r3, [pc, #344]	; (80014b0 <HAL_LTDC_MspInit+0x244>)
 8001356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001358:	4a55      	ldr	r2, [pc, #340]	; (80014b0 <HAL_LTDC_MspInit+0x244>)
 800135a:	f043 0304 	orr.w	r3, r3, #4
 800135e:	6313      	str	r3, [r2, #48]	; 0x30
 8001360:	4b53      	ldr	r3, [pc, #332]	; (80014b0 <HAL_LTDC_MspInit+0x244>)
 8001362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800136c:	2300      	movs	r3, #0
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	4b4f      	ldr	r3, [pc, #316]	; (80014b0 <HAL_LTDC_MspInit+0x244>)
 8001372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001374:	4a4e      	ldr	r2, [pc, #312]	; (80014b0 <HAL_LTDC_MspInit+0x244>)
 8001376:	f043 0308 	orr.w	r3, r3, #8
 800137a:	6313      	str	r3, [r2, #48]	; 0x30
 800137c:	4b4c      	ldr	r3, [pc, #304]	; (80014b0 <HAL_LTDC_MspInit+0x244>)
 800137e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001380:	f003 0308 	and.w	r3, r3, #8
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800138c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138e:	2302      	movs	r3, #2
 8001390:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800139a:	230e      	movs	r3, #14
 800139c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800139e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013a2:	4619      	mov	r1, r3
 80013a4:	4843      	ldr	r0, [pc, #268]	; (80014b4 <HAL_LTDC_MspInit+0x248>)
 80013a6:	f003 f87d 	bl	80044a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80013aa:	f641 0358 	movw	r3, #6232	; 0x1858
 80013ae:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b0:	2302      	movs	r3, #2
 80013b2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2300      	movs	r3, #0
 80013ba:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013bc:	230e      	movs	r3, #14
 80013be:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013c4:	4619      	mov	r1, r3
 80013c6:	483c      	ldr	r0, [pc, #240]	; (80014b8 <HAL_LTDC_MspInit+0x24c>)
 80013c8:	f003 f86c 	bl	80044a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80013cc:	2303      	movs	r3, #3
 80013ce:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d8:	2300      	movs	r3, #0
 80013da:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80013dc:	2309      	movs	r3, #9
 80013de:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013e4:	4619      	mov	r1, r3
 80013e6:	4835      	ldr	r0, [pc, #212]	; (80014bc <HAL_LTDC_MspInit+0x250>)
 80013e8:	f003 f85c 	bl	80044a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80013ec:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80013f0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013fe:	230e      	movs	r3, #14
 8001400:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001402:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001406:	4619      	mov	r1, r3
 8001408:	482c      	ldr	r0, [pc, #176]	; (80014bc <HAL_LTDC_MspInit+0x250>)
 800140a:	f003 f84b 	bl	80044a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800140e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001412:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	2302      	movs	r3, #2
 8001416:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001420:	230e      	movs	r3, #14
 8001422:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001424:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001428:	4619      	mov	r1, r3
 800142a:	4825      	ldr	r0, [pc, #148]	; (80014c0 <HAL_LTDC_MspInit+0x254>)
 800142c:	f003 f83a 	bl	80044a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001430:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001434:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001436:	2302      	movs	r3, #2
 8001438:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001442:	230e      	movs	r3, #14
 8001444:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001446:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800144a:	4619      	mov	r1, r3
 800144c:	481d      	ldr	r0, [pc, #116]	; (80014c4 <HAL_LTDC_MspInit+0x258>)
 800144e:	f003 f829 	bl	80044a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001452:	2348      	movs	r3, #72	; 0x48
 8001454:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001456:	2302      	movs	r3, #2
 8001458:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145e:	2300      	movs	r3, #0
 8001460:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001462:	230e      	movs	r3, #14
 8001464:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001466:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800146a:	4619      	mov	r1, r3
 800146c:	4816      	ldr	r0, [pc, #88]	; (80014c8 <HAL_LTDC_MspInit+0x25c>)
 800146e:	f003 f819 	bl	80044a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001472:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001476:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001478:	2302      	movs	r3, #2
 800147a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001480:	2300      	movs	r3, #0
 8001482:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001484:	2309      	movs	r3, #9
 8001486:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001488:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800148c:	4619      	mov	r1, r3
 800148e:	480c      	ldr	r0, [pc, #48]	; (80014c0 <HAL_LTDC_MspInit+0x254>)
 8001490:	f003 f808 	bl	80044a4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001494:	2200      	movs	r2, #0
 8001496:	2105      	movs	r1, #5
 8001498:	2058      	movs	r0, #88	; 0x58
 800149a:	f002 f9ed 	bl	8003878 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800149e:	2058      	movs	r0, #88	; 0x58
 80014a0:	f002 fa06 	bl	80038b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80014a4:	bf00      	nop
 80014a6:	3768      	adds	r7, #104	; 0x68
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40016800 	.word	0x40016800
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40021400 	.word	0x40021400
 80014b8:	40020000 	.word	0x40020000
 80014bc:	40020400 	.word	0x40020400
 80014c0:	40021800 	.word	0x40021800
 80014c4:	40020800 	.word	0x40020800
 80014c8:	40020c00 	.word	0x40020c00

080014cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014d0:	f002 f8b4 	bl	800363c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014d4:	f000 f824 	bl	8001520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014d8:	f7ff fdb6 	bl	8001048 <MX_GPIO_Init>
  MX_TIM1_Init();
 80014dc:	f000 fb50 	bl	8001b80 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80014e0:	f000 fbc0 	bl	8001c64 <MX_USART1_UART_Init>
  MX_SPI4_Init();
 80014e4:	f000 f89e 	bl	8001624 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 80014e8:	f001 f862 	bl	80025b0 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER);
 80014ec:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80014f0:	2001      	movs	r0, #1
 80014f2:	f001 f8df 	bl	80026b4 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);
 80014f6:	2001      	movs	r0, #1
 80014f8:	f001 f940 	bl	800277c <BSP_LCD_SelectLayer>
  BSP_LCD_SetBackColor(LCD_COLOR_GRAY); // Vali meelepärane värv
 80014fc:	4806      	ldr	r0, [pc, #24]	; (8001518 <main+0x4c>)
 80014fe:	f001 f965 	bl	80027cc <BSP_LCD_SetBackColor>
  BSP_LCD_Clear(LCD_COLOR_GRAY);
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <main+0x4c>)
 8001504:	f001 f996 	bl	8002834 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_DARKRED); // Vali meelepärane värv
 8001508:	4804      	ldr	r0, [pc, #16]	; (800151c <main+0x50>)
 800150a:	f001 f947 	bl	800279c <BSP_LCD_SetTextColor>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800150e:	f7ff fb4b 	bl	8000ba8 <MX_FREERTOS_Init>


  /* Start scheduler */
  osKernelStart();
 8001512:	f00b fe8b 	bl	800d22c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001516:	e7fe      	b.n	8001516 <main+0x4a>
 8001518:	ff808080 	.word	0xff808080
 800151c:	ff800000 	.word	0xff800000

08001520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b094      	sub	sp, #80	; 0x50
 8001524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001526:	f107 0320 	add.w	r3, r7, #32
 800152a:	2230      	movs	r2, #48	; 0x30
 800152c:	2100      	movs	r1, #0
 800152e:	4618      	mov	r0, r3
 8001530:	f00f fc80 	bl	8010e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001534:	f107 030c 	add.w	r3, r7, #12
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001544:	2300      	movs	r3, #0
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	4b28      	ldr	r3, [pc, #160]	; (80015ec <SystemClock_Config+0xcc>)
 800154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154c:	4a27      	ldr	r2, [pc, #156]	; (80015ec <SystemClock_Config+0xcc>)
 800154e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001552:	6413      	str	r3, [r2, #64]	; 0x40
 8001554:	4b25      	ldr	r3, [pc, #148]	; (80015ec <SystemClock_Config+0xcc>)
 8001556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001560:	2300      	movs	r3, #0
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	4b22      	ldr	r3, [pc, #136]	; (80015f0 <SystemClock_Config+0xd0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a21      	ldr	r2, [pc, #132]	; (80015f0 <SystemClock_Config+0xd0>)
 800156a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	4b1f      	ldr	r3, [pc, #124]	; (80015f0 <SystemClock_Config+0xd0>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001578:	607b      	str	r3, [r7, #4]
 800157a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800157c:	2301      	movs	r3, #1
 800157e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001580:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001586:	2302      	movs	r3, #2
 8001588:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800158a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800158e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001590:	2304      	movs	r3, #4
 8001592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001594:	23a8      	movs	r3, #168	; 0xa8
 8001596:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001598:	2302      	movs	r3, #2
 800159a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800159c:	2307      	movs	r3, #7
 800159e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a0:	f107 0320 	add.w	r3, r7, #32
 80015a4:	4618      	mov	r0, r3
 80015a6:	f005 fa03 	bl	80069b0 <HAL_RCC_OscConfig>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015b0:	f000 f832 	bl	8001618 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015b4:	230f      	movs	r3, #15
 80015b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015b8:	2302      	movs	r3, #2
 80015ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015cc:	f107 030c 	add.w	r3, r7, #12
 80015d0:	2105      	movs	r1, #5
 80015d2:	4618      	mov	r0, r3
 80015d4:	f005 fc64 	bl	8006ea0 <HAL_RCC_ClockConfig>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80015de:	f000 f81b 	bl	8001618 <Error_Handler>
  }
}
 80015e2:	bf00      	nop
 80015e4:	3750      	adds	r7, #80	; 0x50
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40007000 	.word	0x40007000

080015f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a04      	ldr	r2, [pc, #16]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d101      	bne.n	800160a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001606:	f002 f83b 	bl	8003680 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40001000 	.word	0x40001000

08001618 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800161c:	b672      	cpsid	i
}
 800161e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001620:	e7fe      	b.n	8001620 <Error_Handler+0x8>
	...

08001624 <MX_SPI4_Init>:
SPI_HandleTypeDef hspi4;
SPI_HandleTypeDef hspi5;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001628:	4b17      	ldr	r3, [pc, #92]	; (8001688 <MX_SPI4_Init+0x64>)
 800162a:	4a18      	ldr	r2, [pc, #96]	; (800168c <MX_SPI4_Init+0x68>)
 800162c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800162e:	4b16      	ldr	r3, [pc, #88]	; (8001688 <MX_SPI4_Init+0x64>)
 8001630:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001634:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001636:	4b14      	ldr	r3, [pc, #80]	; (8001688 <MX_SPI4_Init+0x64>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800163c:	4b12      	ldr	r3, [pc, #72]	; (8001688 <MX_SPI4_Init+0x64>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001642:	4b11      	ldr	r3, [pc, #68]	; (8001688 <MX_SPI4_Init+0x64>)
 8001644:	2202      	movs	r2, #2
 8001646:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001648:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <MX_SPI4_Init+0x64>)
 800164a:	2201      	movs	r2, #1
 800164c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <MX_SPI4_Init+0x64>)
 8001650:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001654:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001656:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <MX_SPI4_Init+0x64>)
 8001658:	2220      	movs	r2, #32
 800165a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800165c:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <MX_SPI4_Init+0x64>)
 800165e:	2200      	movs	r2, #0
 8001660:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <MX_SPI4_Init+0x64>)
 8001664:	2200      	movs	r2, #0
 8001666:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001668:	4b07      	ldr	r3, [pc, #28]	; (8001688 <MX_SPI4_Init+0x64>)
 800166a:	2200      	movs	r2, #0
 800166c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <MX_SPI4_Init+0x64>)
 8001670:	220a      	movs	r2, #10
 8001672:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001674:	4804      	ldr	r0, [pc, #16]	; (8001688 <MX_SPI4_Init+0x64>)
 8001676:	f006 f8b6 	bl	80077e6 <HAL_SPI_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8001680:	f7ff ffca 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001684:	bf00      	nop
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000448 	.word	0x20000448
 800168c:	40013400 	.word	0x40013400

08001690 <HAL_SPI_MspInit>:
  /* USER CODE END SPI5_Init 2 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08c      	sub	sp, #48	; 0x30
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 031c 	add.w	r3, r7, #28
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a32      	ldr	r2, [pc, #200]	; (8001778 <HAL_SPI_MspInit+0xe8>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d12c      	bne.n	800170c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	61bb      	str	r3, [r7, #24]
 80016b6:	4b31      	ldr	r3, [pc, #196]	; (800177c <HAL_SPI_MspInit+0xec>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	4a30      	ldr	r2, [pc, #192]	; (800177c <HAL_SPI_MspInit+0xec>)
 80016bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016c0:	6453      	str	r3, [r2, #68]	; 0x44
 80016c2:	4b2e      	ldr	r3, [pc, #184]	; (800177c <HAL_SPI_MspInit+0xec>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016ca:	61bb      	str	r3, [r7, #24]
 80016cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	4b2a      	ldr	r3, [pc, #168]	; (800177c <HAL_SPI_MspInit+0xec>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a29      	ldr	r2, [pc, #164]	; (800177c <HAL_SPI_MspInit+0xec>)
 80016d8:	f043 0310 	orr.w	r3, r3, #16
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b27      	ldr	r3, [pc, #156]	; (800177c <HAL_SPI_MspInit+0xec>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0310 	and.w	r3, r3, #16
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	697b      	ldr	r3, [r7, #20]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80016ea:	2364      	movs	r3, #100	; 0x64
 80016ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ee:	2302      	movs	r3, #2
 80016f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f6:	2303      	movs	r3, #3
 80016f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80016fa:	2305      	movs	r3, #5
 80016fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016fe:	f107 031c 	add.w	r3, r7, #28
 8001702:	4619      	mov	r1, r3
 8001704:	481e      	ldr	r0, [pc, #120]	; (8001780 <HAL_SPI_MspInit+0xf0>)
 8001706:	f002 fecd 	bl	80044a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800170a:	e031      	b.n	8001770 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI5)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a1c      	ldr	r2, [pc, #112]	; (8001784 <HAL_SPI_MspInit+0xf4>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d12c      	bne.n	8001770 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	4b18      	ldr	r3, [pc, #96]	; (800177c <HAL_SPI_MspInit+0xec>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	4a17      	ldr	r2, [pc, #92]	; (800177c <HAL_SPI_MspInit+0xec>)
 8001720:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001724:	6453      	str	r3, [r2, #68]	; 0x44
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <HAL_SPI_MspInit+0xec>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <HAL_SPI_MspInit+0xec>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a10      	ldr	r2, [pc, #64]	; (800177c <HAL_SPI_MspInit+0xec>)
 800173c:	f043 0320 	orr.w	r3, r3, #32
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b0e      	ldr	r3, [pc, #56]	; (800177c <HAL_SPI_MspInit+0xec>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0320 	and.w	r3, r3, #32
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800174e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001754:	2302      	movs	r3, #2
 8001756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175c:	2300      	movs	r3, #0
 800175e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001760:	2305      	movs	r3, #5
 8001762:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001764:	f107 031c 	add.w	r3, r7, #28
 8001768:	4619      	mov	r1, r3
 800176a:	4807      	ldr	r0, [pc, #28]	; (8001788 <HAL_SPI_MspInit+0xf8>)
 800176c:	f002 fe9a 	bl	80044a4 <HAL_GPIO_Init>
}
 8001770:	bf00      	nop
 8001772:	3730      	adds	r7, #48	; 0x30
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40013400 	.word	0x40013400
 800177c:	40023800 	.word	0x40023800
 8001780:	40021000 	.word	0x40021000
 8001784:	40015000 	.word	0x40015000
 8001788:	40021400 	.word	0x40021400

0800178c <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI4)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a10      	ldr	r2, [pc, #64]	; (80017dc <HAL_SPI_MspDeInit+0x50>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d10a      	bne.n	80017b4 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI4_MspDeInit 0 */

  /* USER CODE END SPI4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI4_CLK_DISABLE();
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <HAL_SPI_MspDeInit+0x54>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	4a0f      	ldr	r2, [pc, #60]	; (80017e0 <HAL_SPI_MspDeInit+0x54>)
 80017a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80017a8:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6);
 80017aa:	2164      	movs	r1, #100	; 0x64
 80017ac:	480d      	ldr	r0, [pc, #52]	; (80017e4 <HAL_SPI_MspDeInit+0x58>)
 80017ae:	f003 f825 	bl	80047fc <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 80017b2:	e00f      	b.n	80017d4 <HAL_SPI_MspDeInit+0x48>
  else if(spiHandle->Instance==SPI5)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a0b      	ldr	r2, [pc, #44]	; (80017e8 <HAL_SPI_MspDeInit+0x5c>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d10a      	bne.n	80017d4 <HAL_SPI_MspDeInit+0x48>
    __HAL_RCC_SPI5_CLK_DISABLE();
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <HAL_SPI_MspDeInit+0x54>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c2:	4a07      	ldr	r2, [pc, #28]	; (80017e0 <HAL_SPI_MspDeInit+0x54>)
 80017c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80017c8:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80017ca:	f44f 7160 	mov.w	r1, #896	; 0x380
 80017ce:	4807      	ldr	r0, [pc, #28]	; (80017ec <HAL_SPI_MspDeInit+0x60>)
 80017d0:	f003 f814 	bl	80047fc <HAL_GPIO_DeInit>
}
 80017d4:	bf00      	nop
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40013400 	.word	0x40013400
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40021000 	.word	0x40021000
 80017e8:	40015000 	.word	0x40015000
 80017ec:	40021400 	.word	0x40021400

080017f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	607b      	str	r3, [r7, #4]
 80017fa:	4b12      	ldr	r3, [pc, #72]	; (8001844 <HAL_MspInit+0x54>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	4a11      	ldr	r2, [pc, #68]	; (8001844 <HAL_MspInit+0x54>)
 8001800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001804:	6453      	str	r3, [r2, #68]	; 0x44
 8001806:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <HAL_MspInit+0x54>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	603b      	str	r3, [r7, #0]
 8001816:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <HAL_MspInit+0x54>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <HAL_MspInit+0x54>)
 800181c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001820:	6413      	str	r3, [r2, #64]	; 0x40
 8001822:	4b08      	ldr	r3, [pc, #32]	; (8001844 <HAL_MspInit+0x54>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	210f      	movs	r1, #15
 8001832:	f06f 0001 	mvn.w	r0, #1
 8001836:	f002 f81f 	bl	8003878 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800

08001848 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08e      	sub	sp, #56	; 0x38
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001850:	2300      	movs	r3, #0
 8001852:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001854:	2300      	movs	r3, #0
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	4b33      	ldr	r3, [pc, #204]	; (800192c <HAL_InitTick+0xe4>)
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	4a32      	ldr	r2, [pc, #200]	; (800192c <HAL_InitTick+0xe4>)
 8001862:	f043 0310 	orr.w	r3, r3, #16
 8001866:	6413      	str	r3, [r2, #64]	; 0x40
 8001868:	4b30      	ldr	r3, [pc, #192]	; (800192c <HAL_InitTick+0xe4>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	f003 0310 	and.w	r3, r3, #16
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001874:	f107 0210 	add.w	r2, r7, #16
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	4611      	mov	r1, r2
 800187e:	4618      	mov	r0, r3
 8001880:	f005 fd2e 	bl	80072e0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001884:	6a3b      	ldr	r3, [r7, #32]
 8001886:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800188a:	2b00      	cmp	r3, #0
 800188c:	d103      	bne.n	8001896 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800188e:	f005 fcff 	bl	8007290 <HAL_RCC_GetPCLK1Freq>
 8001892:	6378      	str	r0, [r7, #52]	; 0x34
 8001894:	e004      	b.n	80018a0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001896:	f005 fcfb 	bl	8007290 <HAL_RCC_GetPCLK1Freq>
 800189a:	4603      	mov	r3, r0
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018a2:	4a23      	ldr	r2, [pc, #140]	; (8001930 <HAL_InitTick+0xe8>)
 80018a4:	fba2 2303 	umull	r2, r3, r2, r3
 80018a8:	0c9b      	lsrs	r3, r3, #18
 80018aa:	3b01      	subs	r3, #1
 80018ac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80018ae:	4b21      	ldr	r3, [pc, #132]	; (8001934 <HAL_InitTick+0xec>)
 80018b0:	4a21      	ldr	r2, [pc, #132]	; (8001938 <HAL_InitTick+0xf0>)
 80018b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80018b4:	4b1f      	ldr	r3, [pc, #124]	; (8001934 <HAL_InitTick+0xec>)
 80018b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018ba:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80018bc:	4a1d      	ldr	r2, [pc, #116]	; (8001934 <HAL_InitTick+0xec>)
 80018be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018c0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80018c2:	4b1c      	ldr	r3, [pc, #112]	; (8001934 <HAL_InitTick+0xec>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c8:	4b1a      	ldr	r3, [pc, #104]	; (8001934 <HAL_InitTick+0xec>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ce:	4b19      	ldr	r3, [pc, #100]	; (8001934 <HAL_InitTick+0xec>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80018d4:	4817      	ldr	r0, [pc, #92]	; (8001934 <HAL_InitTick+0xec>)
 80018d6:	f006 fd65 	bl	80083a4 <HAL_TIM_Base_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80018e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d11b      	bne.n	8001920 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80018e8:	4812      	ldr	r0, [pc, #72]	; (8001934 <HAL_InitTick+0xec>)
 80018ea:	f006 fdab 	bl	8008444 <HAL_TIM_Base_Start_IT>
 80018ee:	4603      	mov	r3, r0
 80018f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80018f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d111      	bne.n	8001920 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018fc:	2036      	movs	r0, #54	; 0x36
 80018fe:	f001 ffd7 	bl	80038b0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b0f      	cmp	r3, #15
 8001906:	d808      	bhi.n	800191a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001908:	2200      	movs	r2, #0
 800190a:	6879      	ldr	r1, [r7, #4]
 800190c:	2036      	movs	r0, #54	; 0x36
 800190e:	f001 ffb3 	bl	8003878 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001912:	4a0a      	ldr	r2, [pc, #40]	; (800193c <HAL_InitTick+0xf4>)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6013      	str	r3, [r2, #0]
 8001918:	e002      	b.n	8001920 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001920:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001924:	4618      	mov	r0, r3
 8001926:	3738      	adds	r7, #56	; 0x38
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40023800 	.word	0x40023800
 8001930:	431bde83 	.word	0x431bde83
 8001934:	200004a0 	.word	0x200004a0
 8001938:	40001000 	.word	0x40001000
 800193c:	2000004c 	.word	0x2000004c

08001940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <NMI_Handler+0x4>

08001946 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800194a:	e7fe      	b.n	800194a <HardFault_Handler+0x4>

0800194c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <MemManage_Handler+0x4>

08001952 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001956:	e7fe      	b.n	8001956 <BusFault_Handler+0x4>

08001958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800195c:	e7fe      	b.n	800195c <UsageFault_Handler+0x4>

0800195e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800195e:	b480      	push	{r7}
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001970:	4802      	ldr	r0, [pc, #8]	; (800197c <USART1_IRQHandler+0x10>)
 8001972:	f007 fa2b 	bl	8008dcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000534 	.word	0x20000534

08001980 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001984:	4802      	ldr	r0, [pc, #8]	; (8001990 <TIM6_DAC_IRQHandler+0x10>)
 8001986:	f006 fdcd 	bl	8008524 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	200004a0 	.word	0x200004a0

08001994 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001998:	4802      	ldr	r0, [pc, #8]	; (80019a4 <OTG_HS_IRQHandler+0x10>)
 800199a:	f003 fad7 	bl	8004f4c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20008d3c 	.word	0x20008d3c

080019a8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80019ac:	4802      	ldr	r0, [pc, #8]	; (80019b8 <LTDC_IRQHandler+0x10>)
 80019ae:	f004 fd3d 	bl	800642c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	200003a0 	.word	0x200003a0

080019bc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80019c0:	4802      	ldr	r0, [pc, #8]	; (80019cc <DMA2D_IRQHandler+0x10>)
 80019c2:	f002 fb30 	bl	8004026 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	200000f8 	.word	0x200000f8

080019d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
	return 1;
 80019d4:	2301      	movs	r3, #1
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <_kill>:

int _kill(int pid, int sig)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019ea:	f00f f9db 	bl	8010da4 <__errno>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2216      	movs	r2, #22
 80019f2:	601a      	str	r2, [r3, #0]
	return -1;
 80019f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <_exit>:

void _exit (int status)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a08:	f04f 31ff 	mov.w	r1, #4294967295
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff ffe7 	bl	80019e0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a12:	e7fe      	b.n	8001a12 <_exit+0x12>

08001a14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	e00a      	b.n	8001a3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a26:	f3af 8000 	nop.w
 8001a2a:	4601      	mov	r1, r0
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	1c5a      	adds	r2, r3, #1
 8001a30:	60ba      	str	r2, [r7, #8]
 8001a32:	b2ca      	uxtb	r2, r1
 8001a34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	dbf0      	blt.n	8001a26 <_read+0x12>
	}

return len;
 8001a44:	687b      	ldr	r3, [r7, #4]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b086      	sub	sp, #24
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	60f8      	str	r0, [r7, #12]
 8001a56:	60b9      	str	r1, [r7, #8]
 8001a58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	e009      	b.n	8001a74 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	1c5a      	adds	r2, r3, #1
 8001a64:	60ba      	str	r2, [r7, #8]
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	3301      	adds	r3, #1
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	dbf1      	blt.n	8001a60 <_write+0x12>
	}
	return len;
 8001a7c:	687b      	ldr	r3, [r7, #4]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <_close>:

int _close(int file)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
	return -1;
 8001a8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aae:	605a      	str	r2, [r3, #4]
	return 0;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <_isatty>:

int _isatty(int file)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
	return 1;
 8001ac6:	2301      	movs	r3, #1
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
	return 0;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
	...

08001af0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af8:	4a14      	ldr	r2, [pc, #80]	; (8001b4c <_sbrk+0x5c>)
 8001afa:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <_sbrk+0x60>)
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b04:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <_sbrk+0x64>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d102      	bne.n	8001b12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <_sbrk+0x64>)
 8001b0e:	4a12      	ldr	r2, [pc, #72]	; (8001b58 <_sbrk+0x68>)
 8001b10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <_sbrk+0x64>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4413      	add	r3, r2
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d207      	bcs.n	8001b30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b20:	f00f f940 	bl	8010da4 <__errno>
 8001b24:	4603      	mov	r3, r0
 8001b26:	220c      	movs	r2, #12
 8001b28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2e:	e009      	b.n	8001b44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b30:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <_sbrk+0x64>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b36:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <_sbrk+0x64>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	4a05      	ldr	r2, [pc, #20]	; (8001b54 <_sbrk+0x64>)
 8001b40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b42:	68fb      	ldr	r3, [r7, #12]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20030000 	.word	0x20030000
 8001b50:	00000400 	.word	0x00000400
 8001b54:	200004e8 	.word	0x200004e8
 8001b58:	20009050 	.word	0x20009050

08001b5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <SystemInit+0x20>)
 8001b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b66:	4a05      	ldr	r2, [pc, #20]	; (8001b7c <SystemInit+0x20>)
 8001b68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b86:	f107 0308 	add.w	r3, r7, #8
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	609a      	str	r2, [r3, #8]
 8001b92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b94:	463b      	mov	r3, r7
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b9c:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <MX_TIM1_Init+0x98>)
 8001b9e:	4a1f      	ldr	r2, [pc, #124]	; (8001c1c <MX_TIM1_Init+0x9c>)
 8001ba0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ba2:	4b1d      	ldr	r3, [pc, #116]	; (8001c18 <MX_TIM1_Init+0x98>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba8:	4b1b      	ldr	r3, [pc, #108]	; (8001c18 <MX_TIM1_Init+0x98>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001bae:	4b1a      	ldr	r3, [pc, #104]	; (8001c18 <MX_TIM1_Init+0x98>)
 8001bb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bb4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb6:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <MX_TIM1_Init+0x98>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bbc:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <MX_TIM1_Init+0x98>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc2:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <MX_TIM1_Init+0x98>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bc8:	4813      	ldr	r0, [pc, #76]	; (8001c18 <MX_TIM1_Init+0x98>)
 8001bca:	f006 fbeb 	bl	80083a4 <HAL_TIM_Base_Init>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001bd4:	f7ff fd20 	bl	8001618 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bdc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bde:	f107 0308 	add.w	r3, r7, #8
 8001be2:	4619      	mov	r1, r3
 8001be4:	480c      	ldr	r0, [pc, #48]	; (8001c18 <MX_TIM1_Init+0x98>)
 8001be6:	f006 fda5 	bl	8008734 <HAL_TIM_ConfigClockSource>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001bf0:	f7ff fd12 	bl	8001618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bfc:	463b      	mov	r3, r7
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4805      	ldr	r0, [pc, #20]	; (8001c18 <MX_TIM1_Init+0x98>)
 8001c02:	f006 ffc1 	bl	8008b88 <HAL_TIMEx_MasterConfigSynchronization>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001c0c:	f7ff fd04 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c10:	bf00      	nop
 8001c12:	3718      	adds	r7, #24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	200004ec 	.word	0x200004ec
 8001c1c:	40010000 	.word	0x40010000

08001c20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0b      	ldr	r2, [pc, #44]	; (8001c5c <HAL_TIM_Base_MspInit+0x3c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d10d      	bne.n	8001c4e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <HAL_TIM_Base_MspInit+0x40>)
 8001c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3a:	4a09      	ldr	r2, [pc, #36]	; (8001c60 <HAL_TIM_Base_MspInit+0x40>)
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	6453      	str	r3, [r2, #68]	; 0x44
 8001c42:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <HAL_TIM_Base_MspInit+0x40>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001c4e:	bf00      	nop
 8001c50:	3714      	adds	r7, #20
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40010000 	.word	0x40010000
 8001c60:	40023800 	.word	0x40023800

08001c64 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c68:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <MX_USART1_UART_Init+0x4c>)
 8001c6a:	4a12      	ldr	r2, [pc, #72]	; (8001cb4 <MX_USART1_UART_Init+0x50>)
 8001c6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <MX_USART1_UART_Init+0x4c>)
 8001c70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c76:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <MX_USART1_UART_Init+0x4c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <MX_USART1_UART_Init+0x4c>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c82:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <MX_USART1_UART_Init+0x4c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c88:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <MX_USART1_UART_Init+0x4c>)
 8001c8a:	220c      	movs	r2, #12
 8001c8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c8e:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <MX_USART1_UART_Init+0x4c>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <MX_USART1_UART_Init+0x4c>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c9a:	4805      	ldr	r0, [pc, #20]	; (8001cb0 <MX_USART1_UART_Init+0x4c>)
 8001c9c:	f007 f804 	bl	8008ca8 <HAL_UART_Init>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ca6:	f7ff fcb7 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000534 	.word	0x20000534
 8001cb4:	40011000 	.word	0x40011000

08001cb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	; 0x28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc0:	f107 0314 	add.w	r3, r7, #20
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a1d      	ldr	r2, [pc, #116]	; (8001d4c <HAL_UART_MspInit+0x94>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d134      	bne.n	8001d44 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	4b1c      	ldr	r3, [pc, #112]	; (8001d50 <HAL_UART_MspInit+0x98>)
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce2:	4a1b      	ldr	r2, [pc, #108]	; (8001d50 <HAL_UART_MspInit+0x98>)
 8001ce4:	f043 0310 	orr.w	r3, r3, #16
 8001ce8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cea:	4b19      	ldr	r3, [pc, #100]	; (8001d50 <HAL_UART_MspInit+0x98>)
 8001cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cee:	f003 0310 	and.w	r3, r3, #16
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <HAL_UART_MspInit+0x98>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	4a14      	ldr	r2, [pc, #80]	; (8001d50 <HAL_UART_MspInit+0x98>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	6313      	str	r3, [r2, #48]	; 0x30
 8001d06:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <HAL_UART_MspInit+0x98>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001d12:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d20:	2303      	movs	r3, #3
 8001d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d24:	2307      	movs	r3, #7
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d28:	f107 0314 	add.w	r3, r7, #20
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4809      	ldr	r0, [pc, #36]	; (8001d54 <HAL_UART_MspInit+0x9c>)
 8001d30:	f002 fbb8 	bl	80044a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001d34:	2200      	movs	r2, #0
 8001d36:	2105      	movs	r1, #5
 8001d38:	2025      	movs	r0, #37	; 0x25
 8001d3a:	f001 fd9d 	bl	8003878 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d3e:	2025      	movs	r0, #37	; 0x25
 8001d40:	f001 fdb6 	bl	80038b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001d44:	bf00      	nop
 8001d46:	3728      	adds	r7, #40	; 0x28
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40011000 	.word	0x40011000
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40020000 	.word	0x40020000

08001d58 <UartTaskFn>:
uint8_t UartTxBuffer[32]; // copy data from streamBuffer for sending into here
volatile uint8_t UART_busy = 0;

SemaphoreHandle_t uartMutex;

static void UartTaskFn(void *argument) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
   for (;;) {
      if (UART_busy == 1) {
 8001d60:	4b12      	ldr	r3, [pc, #72]	; (8001dac <UartTaskFn+0x54>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d103      	bne.n	8001d72 <UartTaskFn+0x1a>
         // Uart is busy transmitting, check back later
         // NOTE that UART_busy == 1 should rarely happen,
         // because the task waits for notification, if transmission is done,
         // and it should stay so until interrupt sets UART_busy to 0
         vTaskDelay(1);
 8001d6a:	2001      	movs	r0, #1
 8001d6c:	f00d f814 	bl	800ed98 <vTaskDelay>
         continue;
 8001d70:	e01a      	b.n	8001da8 <UartTaskFn+0x50>
      }
      uint16_t bytesToSend = xStreamBufferReceive(UartTxStreamBuffer,
 8001d72:	4b0f      	ldr	r3, [pc, #60]	; (8001db0 <UartTaskFn+0x58>)
 8001d74:	6818      	ldr	r0, [r3, #0]
 8001d76:	f04f 33ff 	mov.w	r3, #4294967295
 8001d7a:	2220      	movs	r2, #32
 8001d7c:	490d      	ldr	r1, [pc, #52]	; (8001db4 <UartTaskFn+0x5c>)
 8001d7e:	f00c fc67 	bl	800e650 <xStreamBufferReceive>
 8001d82:	4603      	mov	r3, r0
 8001d84:	81fb      	strh	r3, [r7, #14]
               (void *)UartTxBuffer, sizeof(UartTxBuffer), portMAX_DELAY);
      if (bytesToSend > 0) {
 8001d86:	89fb      	ldrh	r3, [r7, #14]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0e9      	beq.n	8001d60 <UartTaskFn+0x8>
         UART_busy = 1;
 8001d8c:	4b07      	ldr	r3, [pc, #28]	; (8001dac <UartTaskFn+0x54>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	701a      	strb	r2, [r3, #0]
         HAL_UART_Transmit_IT(&huart1, UartTxBuffer, bytesToSend);
 8001d92:	89fb      	ldrh	r3, [r7, #14]
 8001d94:	461a      	mov	r2, r3
 8001d96:	4907      	ldr	r1, [pc, #28]	; (8001db4 <UartTaskFn+0x5c>)
 8001d98:	4807      	ldr	r0, [pc, #28]	; (8001db8 <UartTaskFn+0x60>)
 8001d9a:	f006 ffd2 	bl	8008d42 <HAL_UART_Transmit_IT>
         // block task until the existing data has been sent
     ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001d9e:	f04f 31ff 	mov.w	r1, #4294967295
 8001da2:	2001      	movs	r0, #1
 8001da4:	f00d fe42 	bl	800fa2c <ulTaskNotifyTake>
   for (;;) {
 8001da8:	e7da      	b.n	8001d60 <UartTaskFn+0x8>
 8001daa:	bf00      	nop
 8001dac:	200005a0 	.word	0x200005a0
 8001db0:	2000057c 	.word	0x2000057c
 8001db4:	20000580 	.word	0x20000580
 8001db8:	20000534 	.word	0x20000534

08001dbc <UartTaskInit>:
      }
   }
}

void UartTaskInit() {
 8001dbc:	b5b0      	push	{r4, r5, r7, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	af00      	add	r7, sp, #0
   UartTxStreamBuffer = xStreamBufferCreate(512, 1);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001dca:	f00c fac1 	bl	800e350 <xStreamBufferGenericCreate>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	4a0e      	ldr	r2, [pc, #56]	; (8001e0c <UartTaskInit+0x50>)
 8001dd2:	6013      	str	r3, [r2, #0]
   uartMutex = xSemaphoreCreateMutex();
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	f00b fd74 	bl	800d8c2 <xQueueCreateMutex>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	4a0c      	ldr	r2, [pc, #48]	; (8001e10 <UartTaskInit+0x54>)
 8001dde:	6013      	str	r3, [r2, #0]
   osThreadDef(uartTxTask, UartTaskFn, osPriorityNormal, 0, 128);
 8001de0:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <UartTaskInit+0x58>)
 8001de2:	1d3c      	adds	r4, r7, #4
 8001de4:	461d      	mov	r5, r3
 8001de6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001de8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001dee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   uartTxTaskHandle = osThreadCreate(osThread(uartTxTask), NULL);
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	2100      	movs	r1, #0
 8001df6:	4618      	mov	r0, r3
 8001df8:	f00b fa1f 	bl	800d23a <osThreadCreate>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	4a06      	ldr	r2, [pc, #24]	; (8001e18 <UartTaskInit+0x5c>)
 8001e00:	6013      	str	r3, [r2, #0]
}
 8001e02:	bf00      	nop
 8001e04:	3720      	adds	r7, #32
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bdb0      	pop	{r4, r5, r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	2000057c 	.word	0x2000057c
 8001e10:	200005a4 	.word	0x200005a4
 8001e14:	080122ec 	.word	0x080122ec
 8001e18:	20000578 	.word	0x20000578

08001e1c <UartTask_sendData>:

void UartTask_sendData(uint8_t *data, uint16_t dataLength) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	807b      	strh	r3, [r7, #2]
	//osMutexWait(myMutex01Handle, portMAX_DELAY);
	xSemaphoreTake(uartMutex, portMAX_DELAY);
 8001e28:	4b10      	ldr	r3, [pc, #64]	; (8001e6c <UartTask_sendData+0x50>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e30:	4618      	mov	r0, r3
 8001e32:	f00b ffd9 	bl	800dde8 <xQueueSemaphoreTake>

	if (xStreamBufferSpacesAvailable(UartTxStreamBuffer) >= dataLength) {
 8001e36:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <UartTask_sendData+0x54>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f00c fae3 	bl	800e406 <xStreamBufferSpacesAvailable>
 8001e40:	4602      	mov	r2, r0
 8001e42:	887b      	ldrh	r3, [r7, #2]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d306      	bcc.n	8001e56 <UartTask_sendData+0x3a>
		xStreamBufferSend(UartTxStreamBuffer, data, dataLength, 0);
 8001e48:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <UartTask_sendData+0x54>)
 8001e4a:	6818      	ldr	r0, [r3, #0]
 8001e4c:	887a      	ldrh	r2, [r7, #2]
 8001e4e:	2300      	movs	r3, #0
 8001e50:	6879      	ldr	r1, [r7, #4]
 8001e52:	f00c fb0b 	bl	800e46c <xStreamBufferSend>
	}
	xSemaphoreGive(uartMutex);
 8001e56:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <UartTask_sendData+0x50>)
 8001e58:	6818      	ldr	r0, [r3, #0]
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	2100      	movs	r1, #0
 8001e60:	f00b fd48 	bl	800d8f4 <xQueueGenericSend>
	//osMutexRelease(myMutex01Handle);
	//xSemaphoreGive(uartMutex);
	// kontrolli, kas bufferstreamis on piisavalt ruumi: xStreamBufferSpacesAvailable
	// ja pane andmed puhvrisse: xStreamBufferSend
	// Mõtle, kas siia on vaja ka mutexit
}
 8001e64:	bf00      	nop
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	200005a4 	.word	0x200005a4
 8001e70:	2000057c 	.word	0x2000057c

08001e74 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
    UART_busy = 0;
 8001e7c:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <HAL_UART_TxCpltCallback+0x2c>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	701a      	strb	r2, [r3, #0]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
    // wake the thread
    vTaskNotifyGiveFromISR(uartTxTaskHandle, &xHigherPriorityTaskWoken);
 8001e86:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <HAL_UART_TxCpltCallback+0x30>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f107 020c 	add.w	r2, r7, #12
 8001e8e:	4611      	mov	r1, r2
 8001e90:	4618      	mov	r0, r3
 8001e92:	f00d ff23 	bl	800fcdc <vTaskNotifyGiveFromISR>
}
 8001e96:	bf00      	nop
 8001e98:	3710      	adds	r7, #16
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	200005a0 	.word	0x200005a0
 8001ea4:	20000578 	.word	0x20000578

08001ea8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001ea8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ee0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001eac:	480d      	ldr	r0, [pc, #52]	; (8001ee4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001eae:	490e      	ldr	r1, [pc, #56]	; (8001ee8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001eb0:	4a0e      	ldr	r2, [pc, #56]	; (8001eec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eb4:	e002      	b.n	8001ebc <LoopCopyDataInit>

08001eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eba:	3304      	adds	r3, #4

08001ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ec0:	d3f9      	bcc.n	8001eb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ec2:	4a0b      	ldr	r2, [pc, #44]	; (8001ef0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ec4:	4c0b      	ldr	r4, [pc, #44]	; (8001ef4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ec8:	e001      	b.n	8001ece <LoopFillZerobss>

08001eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ecc:	3204      	adds	r2, #4

08001ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ed0:	d3fb      	bcc.n	8001eca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ed2:	f7ff fe43 	bl	8001b5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ed6:	f00e ff6b 	bl	8010db0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eda:	f7ff faf7 	bl	80014cc <main>
  bx  lr    
 8001ede:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001ee0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ee8:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8001eec:	08013f7c 	.word	0x08013f7c
  ldr r2, =_sbss
 8001ef0:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 8001ef4:	20009050 	.word	0x20009050

08001ef8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ef8:	e7fe      	b.n	8001ef8 <ADC_IRQHandler>

08001efa <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001efe:	f000 fa5d 	bl	80023bc <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001f02:	20ca      	movs	r0, #202	; 0xca
 8001f04:	f000 f95d 	bl	80021c2 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001f08:	20c3      	movs	r0, #195	; 0xc3
 8001f0a:	f000 f967 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001f0e:	2008      	movs	r0, #8
 8001f10:	f000 f964 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001f14:	2050      	movs	r0, #80	; 0x50
 8001f16:	f000 f961 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001f1a:	20cf      	movs	r0, #207	; 0xcf
 8001f1c:	f000 f951 	bl	80021c2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001f20:	2000      	movs	r0, #0
 8001f22:	f000 f95b 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001f26:	20c1      	movs	r0, #193	; 0xc1
 8001f28:	f000 f958 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001f2c:	2030      	movs	r0, #48	; 0x30
 8001f2e:	f000 f955 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001f32:	20ed      	movs	r0, #237	; 0xed
 8001f34:	f000 f945 	bl	80021c2 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001f38:	2064      	movs	r0, #100	; 0x64
 8001f3a:	f000 f94f 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001f3e:	2003      	movs	r0, #3
 8001f40:	f000 f94c 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001f44:	2012      	movs	r0, #18
 8001f46:	f000 f949 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001f4a:	2081      	movs	r0, #129	; 0x81
 8001f4c:	f000 f946 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001f50:	20e8      	movs	r0, #232	; 0xe8
 8001f52:	f000 f936 	bl	80021c2 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001f56:	2085      	movs	r0, #133	; 0x85
 8001f58:	f000 f940 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	f000 f93d 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001f62:	2078      	movs	r0, #120	; 0x78
 8001f64:	f000 f93a 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001f68:	20cb      	movs	r0, #203	; 0xcb
 8001f6a:	f000 f92a 	bl	80021c2 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001f6e:	2039      	movs	r0, #57	; 0x39
 8001f70:	f000 f934 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001f74:	202c      	movs	r0, #44	; 0x2c
 8001f76:	f000 f931 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001f7a:	2000      	movs	r0, #0
 8001f7c:	f000 f92e 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001f80:	2034      	movs	r0, #52	; 0x34
 8001f82:	f000 f92b 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001f86:	2002      	movs	r0, #2
 8001f88:	f000 f928 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001f8c:	20f7      	movs	r0, #247	; 0xf7
 8001f8e:	f000 f918 	bl	80021c2 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001f92:	2020      	movs	r0, #32
 8001f94:	f000 f922 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001f98:	20ea      	movs	r0, #234	; 0xea
 8001f9a:	f000 f912 	bl	80021c2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	f000 f91c 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	f000 f919 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001faa:	20b1      	movs	r0, #177	; 0xb1
 8001fac:	f000 f909 	bl	80021c2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	f000 f913 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001fb6:	201b      	movs	r0, #27
 8001fb8:	f000 f910 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001fbc:	20b6      	movs	r0, #182	; 0xb6
 8001fbe:	f000 f900 	bl	80021c2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001fc2:	200a      	movs	r0, #10
 8001fc4:	f000 f90a 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001fc8:	20a2      	movs	r0, #162	; 0xa2
 8001fca:	f000 f907 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001fce:	20c0      	movs	r0, #192	; 0xc0
 8001fd0:	f000 f8f7 	bl	80021c2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001fd4:	2010      	movs	r0, #16
 8001fd6:	f000 f901 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001fda:	20c1      	movs	r0, #193	; 0xc1
 8001fdc:	f000 f8f1 	bl	80021c2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001fe0:	2010      	movs	r0, #16
 8001fe2:	f000 f8fb 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001fe6:	20c5      	movs	r0, #197	; 0xc5
 8001fe8:	f000 f8eb 	bl	80021c2 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001fec:	2045      	movs	r0, #69	; 0x45
 8001fee:	f000 f8f5 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001ff2:	2015      	movs	r0, #21
 8001ff4:	f000 f8f2 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001ff8:	20c7      	movs	r0, #199	; 0xc7
 8001ffa:	f000 f8e2 	bl	80021c2 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001ffe:	2090      	movs	r0, #144	; 0x90
 8002000:	f000 f8ec 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8002004:	2036      	movs	r0, #54	; 0x36
 8002006:	f000 f8dc 	bl	80021c2 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 800200a:	20c8      	movs	r0, #200	; 0xc8
 800200c:	f000 f8e6 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8002010:	20f2      	movs	r0, #242	; 0xf2
 8002012:	f000 f8d6 	bl	80021c2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002016:	2000      	movs	r0, #0
 8002018:	f000 f8e0 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 800201c:	20b0      	movs	r0, #176	; 0xb0
 800201e:	f000 f8d0 	bl	80021c2 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8002022:	20c2      	movs	r0, #194	; 0xc2
 8002024:	f000 f8da 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002028:	20b6      	movs	r0, #182	; 0xb6
 800202a:	f000 f8ca 	bl	80021c2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800202e:	200a      	movs	r0, #10
 8002030:	f000 f8d4 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8002034:	20a7      	movs	r0, #167	; 0xa7
 8002036:	f000 f8d1 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x27);
 800203a:	2027      	movs	r0, #39	; 0x27
 800203c:	f000 f8ce 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002040:	2004      	movs	r0, #4
 8002042:	f000 f8cb 	bl	80021dc <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8002046:	202a      	movs	r0, #42	; 0x2a
 8002048:	f000 f8bb 	bl	80021c2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800204c:	2000      	movs	r0, #0
 800204e:	f000 f8c5 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002052:	2000      	movs	r0, #0
 8002054:	f000 f8c2 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002058:	2000      	movs	r0, #0
 800205a:	f000 f8bf 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800205e:	20ef      	movs	r0, #239	; 0xef
 8002060:	f000 f8bc 	bl	80021dc <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8002064:	202b      	movs	r0, #43	; 0x2b
 8002066:	f000 f8ac 	bl	80021c2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800206a:	2000      	movs	r0, #0
 800206c:	f000 f8b6 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002070:	2000      	movs	r0, #0
 8002072:	f000 f8b3 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8002076:	2001      	movs	r0, #1
 8002078:	f000 f8b0 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 800207c:	203f      	movs	r0, #63	; 0x3f
 800207e:	f000 f8ad 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8002082:	20f6      	movs	r0, #246	; 0xf6
 8002084:	f000 f89d 	bl	80021c2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002088:	2001      	movs	r0, #1
 800208a:	f000 f8a7 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800208e:	2000      	movs	r0, #0
 8002090:	f000 f8a4 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8002094:	2006      	movs	r0, #6
 8002096:	f000 f8a1 	bl	80021dc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 800209a:	202c      	movs	r0, #44	; 0x2c
 800209c:	f000 f891 	bl	80021c2 <ili9341_WriteReg>
  LCD_Delay(200);
 80020a0:	20c8      	movs	r0, #200	; 0xc8
 80020a2:	f000 fa79 	bl	8002598 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80020a6:	2026      	movs	r0, #38	; 0x26
 80020a8:	f000 f88b 	bl	80021c2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80020ac:	2001      	movs	r0, #1
 80020ae:	f000 f895 	bl	80021dc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80020b2:	20e0      	movs	r0, #224	; 0xe0
 80020b4:	f000 f885 	bl	80021c2 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80020b8:	200f      	movs	r0, #15
 80020ba:	f000 f88f 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80020be:	2029      	movs	r0, #41	; 0x29
 80020c0:	f000 f88c 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80020c4:	2024      	movs	r0, #36	; 0x24
 80020c6:	f000 f889 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80020ca:	200c      	movs	r0, #12
 80020cc:	f000 f886 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80020d0:	200e      	movs	r0, #14
 80020d2:	f000 f883 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80020d6:	2009      	movs	r0, #9
 80020d8:	f000 f880 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80020dc:	204e      	movs	r0, #78	; 0x4e
 80020de:	f000 f87d 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80020e2:	2078      	movs	r0, #120	; 0x78
 80020e4:	f000 f87a 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80020e8:	203c      	movs	r0, #60	; 0x3c
 80020ea:	f000 f877 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80020ee:	2009      	movs	r0, #9
 80020f0:	f000 f874 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80020f4:	2013      	movs	r0, #19
 80020f6:	f000 f871 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80020fa:	2005      	movs	r0, #5
 80020fc:	f000 f86e 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8002100:	2017      	movs	r0, #23
 8002102:	f000 f86b 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002106:	2011      	movs	r0, #17
 8002108:	f000 f868 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800210c:	2000      	movs	r0, #0
 800210e:	f000 f865 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8002112:	20e1      	movs	r0, #225	; 0xe1
 8002114:	f000 f855 	bl	80021c2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002118:	2000      	movs	r0, #0
 800211a:	f000 f85f 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800211e:	2016      	movs	r0, #22
 8002120:	f000 f85c 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002124:	201b      	movs	r0, #27
 8002126:	f000 f859 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800212a:	2004      	movs	r0, #4
 800212c:	f000 f856 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002130:	2011      	movs	r0, #17
 8002132:	f000 f853 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8002136:	2007      	movs	r0, #7
 8002138:	f000 f850 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x31);
 800213c:	2031      	movs	r0, #49	; 0x31
 800213e:	f000 f84d 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8002142:	2033      	movs	r0, #51	; 0x33
 8002144:	f000 f84a 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8002148:	2042      	movs	r0, #66	; 0x42
 800214a:	f000 f847 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800214e:	2005      	movs	r0, #5
 8002150:	f000 f844 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002154:	200c      	movs	r0, #12
 8002156:	f000 f841 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800215a:	200a      	movs	r0, #10
 800215c:	f000 f83e 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8002160:	2028      	movs	r0, #40	; 0x28
 8002162:	f000 f83b 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8002166:	202f      	movs	r0, #47	; 0x2f
 8002168:	f000 f838 	bl	80021dc <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 800216c:	200f      	movs	r0, #15
 800216e:	f000 f835 	bl	80021dc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8002172:	2011      	movs	r0, #17
 8002174:	f000 f825 	bl	80021c2 <ili9341_WriteReg>
  LCD_Delay(200);
 8002178:	20c8      	movs	r0, #200	; 0xc8
 800217a:	f000 fa0d 	bl	8002598 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800217e:	2029      	movs	r0, #41	; 0x29
 8002180:	f000 f81f 	bl	80021c2 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8002184:	202c      	movs	r0, #44	; 0x2c
 8002186:	f000 f81c 	bl	80021c2 <ili9341_WriteReg>
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}

0800218e <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8002192:	f000 f913 	bl	80023bc <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8002196:	2103      	movs	r1, #3
 8002198:	20d3      	movs	r0, #211	; 0xd3
 800219a:	f000 f82c 	bl	80021f6 <ili9341_ReadData>
 800219e:	4603      	mov	r3, r0
 80021a0:	b29b      	uxth	r3, r3
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80021aa:	2029      	movs	r0, #41	; 0x29
 80021ac:	f000 f809 	bl	80021c2 <ili9341_WriteReg>
}
 80021b0:	bf00      	nop
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80021b8:	2028      	movs	r0, #40	; 0x28
 80021ba:	f000 f802 	bl	80021c2 <ili9341_WriteReg>
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b082      	sub	sp, #8
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	4603      	mov	r3, r0
 80021ca:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f000 f98e 	bl	80024f0 <LCD_IO_WriteReg>
}
 80021d4:	bf00      	nop
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80021e6:	88fb      	ldrh	r3, [r7, #6]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f000 f95f 	bl	80024ac <LCD_IO_WriteData>
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	4603      	mov	r3, r0
 80021fe:	460a      	mov	r2, r1
 8002200:	80fb      	strh	r3, [r7, #6]
 8002202:	4613      	mov	r3, r2
 8002204:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8002206:	797a      	ldrb	r2, [r7, #5]
 8002208:	88fb      	ldrh	r3, [r7, #6]
 800220a:	4611      	mov	r1, r2
 800220c:	4618      	mov	r0, r3
 800220e:	f000 f991 	bl	8002534 <LCD_IO_ReadData>
 8002212:	4603      	mov	r3, r0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8002220:	23f0      	movs	r3, #240	; 0xf0
}
 8002222:	4618      	mov	r0, r3
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8002230:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8002234:	4618      	mov	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
	...

08002240 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002244:	4819      	ldr	r0, [pc, #100]	; (80022ac <SPIx_Init+0x6c>)
 8002246:	f005 ff6e 	bl	8008126 <HAL_SPI_GetState>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d12b      	bne.n	80022a8 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002250:	4b16      	ldr	r3, [pc, #88]	; (80022ac <SPIx_Init+0x6c>)
 8002252:	4a17      	ldr	r2, [pc, #92]	; (80022b0 <SPIx_Init+0x70>)
 8002254:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002256:	4b15      	ldr	r3, [pc, #84]	; (80022ac <SPIx_Init+0x6c>)
 8002258:	2218      	movs	r2, #24
 800225a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 800225c:	4b13      	ldr	r3, [pc, #76]	; (80022ac <SPIx_Init+0x6c>)
 800225e:	2200      	movs	r2, #0
 8002260:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002262:	4b12      	ldr	r3, [pc, #72]	; (80022ac <SPIx_Init+0x6c>)
 8002264:	2200      	movs	r2, #0
 8002266:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002268:	4b10      	ldr	r3, [pc, #64]	; (80022ac <SPIx_Init+0x6c>)
 800226a:	2200      	movs	r2, #0
 800226c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800226e:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <SPIx_Init+0x6c>)
 8002270:	2200      	movs	r2, #0
 8002272:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002274:	4b0d      	ldr	r3, [pc, #52]	; (80022ac <SPIx_Init+0x6c>)
 8002276:	2207      	movs	r2, #7
 8002278:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800227a:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <SPIx_Init+0x6c>)
 800227c:	2200      	movs	r2, #0
 800227e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002280:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <SPIx_Init+0x6c>)
 8002282:	2200      	movs	r2, #0
 8002284:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002286:	4b09      	ldr	r3, [pc, #36]	; (80022ac <SPIx_Init+0x6c>)
 8002288:	f44f 7200 	mov.w	r2, #512	; 0x200
 800228c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800228e:	4b07      	ldr	r3, [pc, #28]	; (80022ac <SPIx_Init+0x6c>)
 8002290:	2200      	movs	r2, #0
 8002292:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002294:	4b05      	ldr	r3, [pc, #20]	; (80022ac <SPIx_Init+0x6c>)
 8002296:	f44f 7282 	mov.w	r2, #260	; 0x104
 800229a:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 800229c:	4803      	ldr	r0, [pc, #12]	; (80022ac <SPIx_Init+0x6c>)
 800229e:	f000 f853 	bl	8002348 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80022a2:	4802      	ldr	r0, [pc, #8]	; (80022ac <SPIx_Init+0x6c>)
 80022a4:	f005 fa9f 	bl	80077e6 <HAL_SPI_Init>
  } 
}
 80022a8:	bf00      	nop
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	200005a8 	.word	0x200005a8
 80022b0:	40015000 	.word	0x40015000

080022b4 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80022be:	2300      	movs	r3, #0
 80022c0:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	4b09      	ldr	r3, [pc, #36]	; (80022ec <SPIx_Read+0x38>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f107 0108 	add.w	r1, r7, #8
 80022ce:	4808      	ldr	r0, [pc, #32]	; (80022f0 <SPIx_Read+0x3c>)
 80022d0:	f005 fc76 	bl	8007bc0 <HAL_SPI_Receive>
 80022d4:	4603      	mov	r3, r0
 80022d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80022de:	f000 f827 	bl	8002330 <SPIx_Error>
  }
  
  return readvalue;
 80022e2:	68bb      	ldr	r3, [r7, #8]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	2000003c 	.word	0x2000003c
 80022f0:	200005a8 	.word	0x200005a8

080022f4 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80022fe:	2300      	movs	r3, #0
 8002300:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8002302:	4b09      	ldr	r3, [pc, #36]	; (8002328 <SPIx_Write+0x34>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	1db9      	adds	r1, r7, #6
 8002308:	2201      	movs	r2, #1
 800230a:	4808      	ldr	r0, [pc, #32]	; (800232c <SPIx_Write+0x38>)
 800230c:	f005 fb1c 	bl	8007948 <HAL_SPI_Transmit>
 8002310:	4603      	mov	r3, r0
 8002312:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002314:	7bfb      	ldrb	r3, [r7, #15]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800231a:	f000 f809 	bl	8002330 <SPIx_Error>
  }
}
 800231e:	bf00      	nop
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	2000003c 	.word	0x2000003c
 800232c:	200005a8 	.word	0x200005a8

08002330 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002334:	4803      	ldr	r0, [pc, #12]	; (8002344 <SPIx_Error+0x14>)
 8002336:	f005 fadf 	bl	80078f8 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 800233a:	f7ff ff81 	bl	8002240 <SPIx_Init>
}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	200005a8 	.word	0x200005a8

08002348 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08a      	sub	sp, #40	; 0x28
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002350:	2300      	movs	r3, #0
 8002352:	613b      	str	r3, [r7, #16]
 8002354:	4b17      	ldr	r3, [pc, #92]	; (80023b4 <SPIx_MspInit+0x6c>)
 8002356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002358:	4a16      	ldr	r2, [pc, #88]	; (80023b4 <SPIx_MspInit+0x6c>)
 800235a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800235e:	6453      	str	r3, [r2, #68]	; 0x44
 8002360:	4b14      	ldr	r3, [pc, #80]	; (80023b4 <SPIx_MspInit+0x6c>)
 8002362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002364:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002368:	613b      	str	r3, [r7, #16]
 800236a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 800236c:	2300      	movs	r3, #0
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	4b10      	ldr	r3, [pc, #64]	; (80023b4 <SPIx_MspInit+0x6c>)
 8002372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002374:	4a0f      	ldr	r2, [pc, #60]	; (80023b4 <SPIx_MspInit+0x6c>)
 8002376:	f043 0320 	orr.w	r3, r3, #32
 800237a:	6313      	str	r3, [r2, #48]	; 0x30
 800237c:	4b0d      	ldr	r3, [pc, #52]	; (80023b4 <SPIx_MspInit+0x6c>)
 800237e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002380:	f003 0320 	and.w	r3, r3, #32
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002388:	f44f 7360 	mov.w	r3, #896	; 0x380
 800238c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800238e:	2302      	movs	r3, #2
 8002390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002392:	2302      	movs	r3, #2
 8002394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002396:	2301      	movs	r3, #1
 8002398:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800239a:	2305      	movs	r3, #5
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800239e:	f107 0314 	add.w	r3, r7, #20
 80023a2:	4619      	mov	r1, r3
 80023a4:	4804      	ldr	r0, [pc, #16]	; (80023b8 <SPIx_MspInit+0x70>)
 80023a6:	f002 f87d 	bl	80044a4 <HAL_GPIO_Init>
}
 80023aa:	bf00      	nop
 80023ac:	3728      	adds	r7, #40	; 0x28
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40021400 	.word	0x40021400

080023bc <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b088      	sub	sp, #32
 80023c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80023c2:	4b36      	ldr	r3, [pc, #216]	; (800249c <LCD_IO_Init+0xe0>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d164      	bne.n	8002494 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80023ca:	4b34      	ldr	r3, [pc, #208]	; (800249c <LCD_IO_Init+0xe0>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80023d0:	2300      	movs	r3, #0
 80023d2:	60bb      	str	r3, [r7, #8]
 80023d4:	4b32      	ldr	r3, [pc, #200]	; (80024a0 <LCD_IO_Init+0xe4>)
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d8:	4a31      	ldr	r2, [pc, #196]	; (80024a0 <LCD_IO_Init+0xe4>)
 80023da:	f043 0308 	orr.w	r3, r3, #8
 80023de:	6313      	str	r3, [r2, #48]	; 0x30
 80023e0:	4b2f      	ldr	r3, [pc, #188]	; (80024a0 <LCD_IO_Init+0xe4>)
 80023e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e4:	f003 0308 	and.w	r3, r3, #8
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80023ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023f0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80023f2:	2301      	movs	r3, #1
 80023f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80023fa:	2302      	movs	r3, #2
 80023fc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80023fe:	f107 030c 	add.w	r3, r7, #12
 8002402:	4619      	mov	r1, r3
 8002404:	4827      	ldr	r0, [pc, #156]	; (80024a4 <LCD_IO_Init+0xe8>)
 8002406:	f002 f84d 	bl	80044a4 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	607b      	str	r3, [r7, #4]
 800240e:	4b24      	ldr	r3, [pc, #144]	; (80024a0 <LCD_IO_Init+0xe4>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	4a23      	ldr	r2, [pc, #140]	; (80024a0 <LCD_IO_Init+0xe4>)
 8002414:	f043 0308 	orr.w	r3, r3, #8
 8002418:	6313      	str	r3, [r2, #48]	; 0x30
 800241a:	4b21      	ldr	r3, [pc, #132]	; (80024a0 <LCD_IO_Init+0xe4>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	607b      	str	r3, [r7, #4]
 8002424:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002426:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800242a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800242c:	2301      	movs	r3, #1
 800242e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002434:	2302      	movs	r3, #2
 8002436:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002438:	f107 030c 	add.w	r3, r7, #12
 800243c:	4619      	mov	r1, r3
 800243e:	4819      	ldr	r0, [pc, #100]	; (80024a4 <LCD_IO_Init+0xe8>)
 8002440:	f002 f830 	bl	80044a4 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002444:	2300      	movs	r3, #0
 8002446:	603b      	str	r3, [r7, #0]
 8002448:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <LCD_IO_Init+0xe4>)
 800244a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244c:	4a14      	ldr	r2, [pc, #80]	; (80024a0 <LCD_IO_Init+0xe4>)
 800244e:	f043 0304 	orr.w	r3, r3, #4
 8002452:	6313      	str	r3, [r2, #48]	; 0x30
 8002454:	4b12      	ldr	r3, [pc, #72]	; (80024a0 <LCD_IO_Init+0xe4>)
 8002456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	603b      	str	r3, [r7, #0]
 800245e:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002460:	2304      	movs	r3, #4
 8002462:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002464:	2301      	movs	r3, #1
 8002466:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800246c:	2302      	movs	r3, #2
 800246e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002470:	f107 030c 	add.w	r3, r7, #12
 8002474:	4619      	mov	r1, r3
 8002476:	480c      	ldr	r0, [pc, #48]	; (80024a8 <LCD_IO_Init+0xec>)
 8002478:	f002 f814 	bl	80044a4 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 800247c:	2200      	movs	r2, #0
 800247e:	2104      	movs	r1, #4
 8002480:	4809      	ldr	r0, [pc, #36]	; (80024a8 <LCD_IO_Init+0xec>)
 8002482:	f002 fadf 	bl	8004a44 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002486:	2201      	movs	r2, #1
 8002488:	2104      	movs	r1, #4
 800248a:	4807      	ldr	r0, [pc, #28]	; (80024a8 <LCD_IO_Init+0xec>)
 800248c:	f002 fada 	bl	8004a44 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002490:	f7ff fed6 	bl	8002240 <SPIx_Init>
  }
}
 8002494:	bf00      	nop
 8002496:	3720      	adds	r7, #32
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	20000600 	.word	0x20000600
 80024a0:	40023800 	.word	0x40023800
 80024a4:	40020c00 	.word	0x40020c00
 80024a8:	40020800 	.word	0x40020800

080024ac <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80024b6:	2201      	movs	r2, #1
 80024b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024bc:	480a      	ldr	r0, [pc, #40]	; (80024e8 <LCD_IO_WriteData+0x3c>)
 80024be:	f002 fac1 	bl	8004a44 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80024c2:	2200      	movs	r2, #0
 80024c4:	2104      	movs	r1, #4
 80024c6:	4809      	ldr	r0, [pc, #36]	; (80024ec <LCD_IO_WriteData+0x40>)
 80024c8:	f002 fabc 	bl	8004a44 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80024cc:	88fb      	ldrh	r3, [r7, #6]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff ff10 	bl	80022f4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80024d4:	2201      	movs	r2, #1
 80024d6:	2104      	movs	r1, #4
 80024d8:	4804      	ldr	r0, [pc, #16]	; (80024ec <LCD_IO_WriteData+0x40>)
 80024da:	f002 fab3 	bl	8004a44 <HAL_GPIO_WritePin>
}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40020c00 	.word	0x40020c00
 80024ec:	40020800 	.word	0x40020800

080024f0 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80024fa:	2200      	movs	r2, #0
 80024fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002500:	480a      	ldr	r0, [pc, #40]	; (800252c <LCD_IO_WriteReg+0x3c>)
 8002502:	f002 fa9f 	bl	8004a44 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002506:	2200      	movs	r2, #0
 8002508:	2104      	movs	r1, #4
 800250a:	4809      	ldr	r0, [pc, #36]	; (8002530 <LCD_IO_WriteReg+0x40>)
 800250c:	f002 fa9a 	bl	8004a44 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002510:	79fb      	ldrb	r3, [r7, #7]
 8002512:	b29b      	uxth	r3, r3
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff feed 	bl	80022f4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800251a:	2201      	movs	r2, #1
 800251c:	2104      	movs	r1, #4
 800251e:	4804      	ldr	r0, [pc, #16]	; (8002530 <LCD_IO_WriteReg+0x40>)
 8002520:	f002 fa90 	bl	8004a44 <HAL_GPIO_WritePin>
}
 8002524:	bf00      	nop
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40020c00 	.word	0x40020c00
 8002530:	40020800 	.word	0x40020800

08002534 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	460a      	mov	r2, r1
 800253e:	80fb      	strh	r3, [r7, #6]
 8002540:	4613      	mov	r3, r2
 8002542:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002544:	2300      	movs	r3, #0
 8002546:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002548:	2200      	movs	r2, #0
 800254a:	2104      	movs	r1, #4
 800254c:	4810      	ldr	r0, [pc, #64]	; (8002590 <LCD_IO_ReadData+0x5c>)
 800254e:	f002 fa79 	bl	8004a44 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002552:	2200      	movs	r2, #0
 8002554:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002558:	480e      	ldr	r0, [pc, #56]	; (8002594 <LCD_IO_ReadData+0x60>)
 800255a:	f002 fa73 	bl	8004a44 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff fec7 	bl	80022f4 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002566:	797b      	ldrb	r3, [r7, #5]
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff fea3 	bl	80022b4 <SPIx_Read>
 800256e:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002570:	2201      	movs	r2, #1
 8002572:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002576:	4807      	ldr	r0, [pc, #28]	; (8002594 <LCD_IO_ReadData+0x60>)
 8002578:	f002 fa64 	bl	8004a44 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800257c:	2201      	movs	r2, #1
 800257e:	2104      	movs	r1, #4
 8002580:	4803      	ldr	r0, [pc, #12]	; (8002590 <LCD_IO_ReadData+0x5c>)
 8002582:	f002 fa5f 	bl	8004a44 <HAL_GPIO_WritePin>
  
  return readvalue;
 8002586:	68fb      	ldr	r3, [r7, #12]
}
 8002588:	4618      	mov	r0, r3
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40020800 	.word	0x40020800
 8002594:	40020c00 	.word	0x40020c00

08002598 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f001 f88d 	bl	80036c0 <HAL_Delay>
}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 80025b4:	4b2d      	ldr	r3, [pc, #180]	; (800266c <BSP_LCD_Init+0xbc>)
 80025b6:	4a2e      	ldr	r2, [pc, #184]	; (8002670 <BSP_LCD_Init+0xc0>)
 80025b8:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80025ba:	4b2c      	ldr	r3, [pc, #176]	; (800266c <BSP_LCD_Init+0xbc>)
 80025bc:	2209      	movs	r2, #9
 80025be:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80025c0:	4b2a      	ldr	r3, [pc, #168]	; (800266c <BSP_LCD_Init+0xbc>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80025c6:	4b29      	ldr	r3, [pc, #164]	; (800266c <BSP_LCD_Init+0xbc>)
 80025c8:	221d      	movs	r2, #29
 80025ca:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80025cc:	4b27      	ldr	r3, [pc, #156]	; (800266c <BSP_LCD_Init+0xbc>)
 80025ce:	2203      	movs	r2, #3
 80025d0:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 80025d2:	4b26      	ldr	r3, [pc, #152]	; (800266c <BSP_LCD_Init+0xbc>)
 80025d4:	f240 120d 	movw	r2, #269	; 0x10d
 80025d8:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80025da:	4b24      	ldr	r3, [pc, #144]	; (800266c <BSP_LCD_Init+0xbc>)
 80025dc:	f240 1243 	movw	r2, #323	; 0x143
 80025e0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80025e2:	4b22      	ldr	r3, [pc, #136]	; (800266c <BSP_LCD_Init+0xbc>)
 80025e4:	f240 1217 	movw	r2, #279	; 0x117
 80025e8:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80025ea:	4b20      	ldr	r3, [pc, #128]	; (800266c <BSP_LCD_Init+0xbc>)
 80025ec:	f240 1247 	movw	r2, #327	; 0x147
 80025f0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 80025f2:	4b1e      	ldr	r3, [pc, #120]	; (800266c <BSP_LCD_Init+0xbc>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80025fa:	4b1c      	ldr	r3, [pc, #112]	; (800266c <BSP_LCD_Init+0xbc>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002602:	4b1a      	ldr	r3, [pc, #104]	; (800266c <BSP_LCD_Init+0xbc>)
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800260a:	4b1a      	ldr	r3, [pc, #104]	; (8002674 <BSP_LCD_Init+0xc4>)
 800260c:	2208      	movs	r2, #8
 800260e:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 8002610:	4b18      	ldr	r3, [pc, #96]	; (8002674 <BSP_LCD_Init+0xc4>)
 8002612:	2260      	movs	r2, #96	; 0x60
 8002614:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 3;
 8002616:	4b17      	ldr	r3, [pc, #92]	; (8002674 <BSP_LCD_Init+0xc4>)
 8002618:	2203      	movs	r2, #3
 800261a:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800261c:	4b15      	ldr	r3, [pc, #84]	; (8002674 <BSP_LCD_Init+0xc4>)
 800261e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002622:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002624:	4813      	ldr	r0, [pc, #76]	; (8002674 <BSP_LCD_Init+0xc4>)
 8002626:	f004 fe8d 	bl	8007344 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800262a:	4b10      	ldr	r3, [pc, #64]	; (800266c <BSP_LCD_Init+0xbc>)
 800262c:	2200      	movs	r2, #0
 800262e:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002630:	4b0e      	ldr	r3, [pc, #56]	; (800266c <BSP_LCD_Init+0xbc>)
 8002632:	2200      	movs	r2, #0
 8002634:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002636:	4b0d      	ldr	r3, [pc, #52]	; (800266c <BSP_LCD_Init+0xbc>)
 8002638:	2200      	movs	r2, #0
 800263a:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800263c:	4b0b      	ldr	r3, [pc, #44]	; (800266c <BSP_LCD_Init+0xbc>)
 800263e:	2200      	movs	r2, #0
 8002640:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8002642:	f000 fc43 	bl	8002ecc <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002646:	4809      	ldr	r0, [pc, #36]	; (800266c <BSP_LCD_Init+0xbc>)
 8002648:	f003 fe20 	bl	800628c <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 800264c:	4b0a      	ldr	r3, [pc, #40]	; (8002678 <BSP_LCD_Init+0xc8>)
 800264e:	4a0b      	ldr	r2, [pc, #44]	; (800267c <BSP_LCD_Init+0xcc>)
 8002650:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002652:	4b09      	ldr	r3, [pc, #36]	; (8002678 <BSP_LCD_Init+0xc8>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 800265a:	f000 fe25 	bl	80032a8 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800265e:	4808      	ldr	r0, [pc, #32]	; (8002680 <BSP_LCD_Init+0xd0>)
 8002660:	f000 f8ce 	bl	8002800 <BSP_LCD_SetFont>

  return LCD_OK;
 8002664:	2300      	movs	r3, #0
}  
 8002666:	4618      	mov	r0, r3
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20000604 	.word	0x20000604
 8002670:	40016800 	.word	0x40016800
 8002674:	200006ec 	.word	0x200006ec
 8002678:	20000738 	.word	0x20000738
 800267c:	20000004 	.word	0x20000004
 8002680:	20000040 	.word	0x20000040

08002684 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002688:	4b03      	ldr	r3, [pc, #12]	; (8002698 <BSP_LCD_GetXSize+0x14>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268e:	4798      	blx	r3
 8002690:	4603      	mov	r3, r0
}
 8002692:	4618      	mov	r0, r3
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20000738 	.word	0x20000738

0800269c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 80026a0:	4b03      	ldr	r3, [pc, #12]	; (80026b0 <BSP_LCD_GetYSize+0x14>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a6:	4798      	blx	r3
 80026a8:	4603      	mov	r3, r0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	20000738 	.word	0x20000738

080026b4 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b090      	sub	sp, #64	; 0x40
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	6039      	str	r1, [r7, #0]
 80026be:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80026c4:	f7ff ffde 	bl	8002684 <BSP_LCD_GetXSize>
 80026c8:	4603      	mov	r3, r0
 80026ca:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80026d0:	f7ff ffe4 	bl	800269c <BSP_LCD_GetYSize>
 80026d4:	4603      	mov	r3, r0
 80026d6:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80026d8:	2300      	movs	r3, #0
 80026da:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80026e0:	23ff      	movs	r3, #255	; 0xff
 80026e2:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80026e4:	2300      	movs	r3, #0
 80026e6:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80026e8:	2300      	movs	r3, #0
 80026ea:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80026ee:	2300      	movs	r3, #0
 80026f0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80026f4:	2300      	movs	r3, #0
 80026f6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80026fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80026fe:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002700:	2307      	movs	r3, #7
 8002702:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002704:	f7ff ffbe 	bl	8002684 <BSP_LCD_GetXSize>
 8002708:	4603      	mov	r3, r0
 800270a:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 800270c:	f7ff ffc6 	bl	800269c <BSP_LCD_GetYSize>
 8002710:	4603      	mov	r3, r0
 8002712:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002714:	88fa      	ldrh	r2, [r7, #6]
 8002716:	f107 030c 	add.w	r3, r7, #12
 800271a:	4619      	mov	r1, r3
 800271c:	4814      	ldr	r0, [pc, #80]	; (8002770 <BSP_LCD_LayerDefaultInit+0xbc>)
 800271e:	f003 ff47 	bl	80065b0 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002722:	88fa      	ldrh	r2, [r7, #6]
 8002724:	4913      	ldr	r1, [pc, #76]	; (8002774 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002726:	4613      	mov	r3, r2
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	4413      	add	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	440b      	add	r3, r1
 8002730:	3304      	adds	r3, #4
 8002732:	f04f 32ff 	mov.w	r2, #4294967295
 8002736:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002738:	88fa      	ldrh	r2, [r7, #6]
 800273a:	490e      	ldr	r1, [pc, #56]	; (8002774 <BSP_LCD_LayerDefaultInit+0xc0>)
 800273c:	4613      	mov	r3, r2
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	4413      	add	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	3308      	adds	r3, #8
 8002748:	4a0b      	ldr	r2, [pc, #44]	; (8002778 <BSP_LCD_LayerDefaultInit+0xc4>)
 800274a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800274c:	88fa      	ldrh	r2, [r7, #6]
 800274e:	4909      	ldr	r1, [pc, #36]	; (8002774 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002750:	4613      	mov	r3, r2
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	4413      	add	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800275e:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002760:	4803      	ldr	r0, [pc, #12]	; (8002770 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002762:	f003 ff63 	bl	800662c <HAL_LTDC_EnableDither>
}
 8002766:	bf00      	nop
 8002768:	3740      	adds	r7, #64	; 0x40
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20000604 	.word	0x20000604
 8002774:	20000720 	.word	0x20000720
 8002778:	20000040 	.word	0x20000040

0800277c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002784:	4a04      	ldr	r2, [pc, #16]	; (8002798 <BSP_LCD_SelectLayer+0x1c>)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6013      	str	r3, [r2, #0]
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	2000071c 	.word	0x2000071c

0800279c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80027a4:	4b07      	ldr	r3, [pc, #28]	; (80027c4 <BSP_LCD_SetTextColor+0x28>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	4907      	ldr	r1, [pc, #28]	; (80027c8 <BSP_LCD_SetTextColor+0x2c>)
 80027aa:	4613      	mov	r3, r2
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	4413      	add	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	440b      	add	r3, r1
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	601a      	str	r2, [r3, #0]
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	2000071c 	.word	0x2000071c
 80027c8:	20000720 	.word	0x20000720

080027cc <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80027d4:	4b08      	ldr	r3, [pc, #32]	; (80027f8 <BSP_LCD_SetBackColor+0x2c>)
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	4908      	ldr	r1, [pc, #32]	; (80027fc <BSP_LCD_SetBackColor+0x30>)
 80027da:	4613      	mov	r3, r2
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	4413      	add	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	440b      	add	r3, r1
 80027e4:	3304      	adds	r3, #4
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	601a      	str	r2, [r3, #0]
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	2000071c 	.word	0x2000071c
 80027fc:	20000720 	.word	0x20000720

08002800 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002808:	4b08      	ldr	r3, [pc, #32]	; (800282c <BSP_LCD_SetFont+0x2c>)
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	4908      	ldr	r1, [pc, #32]	; (8002830 <BSP_LCD_SetFont+0x30>)
 800280e:	4613      	mov	r3, r2
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	4413      	add	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	440b      	add	r3, r1
 8002818:	3308      	adds	r3, #8
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	601a      	str	r2, [r3, #0]
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	2000071c 	.word	0x2000071c
 8002830:	20000720 	.word	0x20000720

08002834 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002836:	b085      	sub	sp, #20
 8002838:	af02      	add	r7, sp, #8
 800283a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800283c:	4b0f      	ldr	r3, [pc, #60]	; (800287c <BSP_LCD_Clear+0x48>)
 800283e:	681c      	ldr	r4, [r3, #0]
 8002840:	4b0e      	ldr	r3, [pc, #56]	; (800287c <BSP_LCD_Clear+0x48>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a0e      	ldr	r2, [pc, #56]	; (8002880 <BSP_LCD_Clear+0x4c>)
 8002846:	2134      	movs	r1, #52	; 0x34
 8002848:	fb01 f303 	mul.w	r3, r1, r3
 800284c:	4413      	add	r3, r2
 800284e:	335c      	adds	r3, #92	; 0x5c
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	461e      	mov	r6, r3
 8002854:	f7ff ff16 	bl	8002684 <BSP_LCD_GetXSize>
 8002858:	4605      	mov	r5, r0
 800285a:	f7ff ff1f 	bl	800269c <BSP_LCD_GetYSize>
 800285e:	4602      	mov	r2, r0
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	9301      	str	r3, [sp, #4]
 8002864:	2300      	movs	r3, #0
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	4613      	mov	r3, r2
 800286a:	462a      	mov	r2, r5
 800286c:	4631      	mov	r1, r6
 800286e:	4620      	mov	r0, r4
 8002870:	f000 fce2 	bl	8003238 <FillBuffer>
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800287c:	2000071c 	.word	0x2000071c
 8002880:	20000604 	.word	0x20000604

08002884 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002884:	b590      	push	{r4, r7, lr}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	80fb      	strh	r3, [r7, #6]
 800288e:	460b      	mov	r3, r1
 8002890:	80bb      	strh	r3, [r7, #4]
 8002892:	4613      	mov	r3, r2
 8002894:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002896:	4b1b      	ldr	r3, [pc, #108]	; (8002904 <BSP_LCD_DisplayChar+0x80>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	491b      	ldr	r1, [pc, #108]	; (8002908 <BSP_LCD_DisplayChar+0x84>)
 800289c:	4613      	mov	r3, r2
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	4413      	add	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	3308      	adds	r3, #8
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6819      	ldr	r1, [r3, #0]
 80028ac:	78fb      	ldrb	r3, [r7, #3]
 80028ae:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80028b2:	4b14      	ldr	r3, [pc, #80]	; (8002904 <BSP_LCD_DisplayChar+0x80>)
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	4c14      	ldr	r4, [pc, #80]	; (8002908 <BSP_LCD_DisplayChar+0x84>)
 80028b8:	4613      	mov	r3, r2
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	4413      	add	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4423      	add	r3, r4
 80028c2:	3308      	adds	r3, #8
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80028c8:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80028cc:	4b0d      	ldr	r3, [pc, #52]	; (8002904 <BSP_LCD_DisplayChar+0x80>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	4c0d      	ldr	r4, [pc, #52]	; (8002908 <BSP_LCD_DisplayChar+0x84>)
 80028d2:	4613      	mov	r3, r2
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	4413      	add	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4423      	add	r3, r4
 80028dc:	3308      	adds	r3, #8
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	889b      	ldrh	r3, [r3, #4]
 80028e2:	3307      	adds	r3, #7
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	da00      	bge.n	80028ea <BSP_LCD_DisplayChar+0x66>
 80028e8:	3307      	adds	r3, #7
 80028ea:	10db      	asrs	r3, r3, #3
 80028ec:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80028f0:	18ca      	adds	r2, r1, r3
 80028f2:	88b9      	ldrh	r1, [r7, #4]
 80028f4:	88fb      	ldrh	r3, [r7, #6]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 fbe4 	bl	80030c4 <DrawChar>
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	bd90      	pop	{r4, r7, pc}
 8002904:	2000071c 	.word	0x2000071c
 8002908:	20000720 	.word	0x20000720

0800290c <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 800290c:	b5b0      	push	{r4, r5, r7, lr}
 800290e:	b088      	sub	sp, #32
 8002910:	af00      	add	r7, sp, #0
 8002912:	60ba      	str	r2, [r7, #8]
 8002914:	461a      	mov	r2, r3
 8002916:	4603      	mov	r3, r0
 8002918:	81fb      	strh	r3, [r7, #14]
 800291a:	460b      	mov	r3, r1
 800291c:	81bb      	strh	r3, [r7, #12]
 800291e:	4613      	mov	r3, r2
 8002920:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002922:	2301      	movs	r3, #1
 8002924:	83fb      	strh	r3, [r7, #30]
 8002926:	2300      	movs	r3, #0
 8002928:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800292a:	2300      	movs	r3, #0
 800292c:	61bb      	str	r3, [r7, #24]
 800292e:	2300      	movs	r3, #0
 8002930:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002936:	e002      	b.n	800293e <BSP_LCD_DisplayStringAt+0x32>
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	3301      	adds	r3, #1
 800293c:	61bb      	str	r3, [r7, #24]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	617a      	str	r2, [r7, #20]
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f6      	bne.n	8002938 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800294a:	f7ff fe9b 	bl	8002684 <BSP_LCD_GetXSize>
 800294e:	4601      	mov	r1, r0
 8002950:	4b4b      	ldr	r3, [pc, #300]	; (8002a80 <BSP_LCD_DisplayStringAt+0x174>)
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	484b      	ldr	r0, [pc, #300]	; (8002a84 <BSP_LCD_DisplayStringAt+0x178>)
 8002956:	4613      	mov	r3, r2
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	4413      	add	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4403      	add	r3, r0
 8002960:	3308      	adds	r3, #8
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	889b      	ldrh	r3, [r3, #4]
 8002966:	fbb1 f3f3 	udiv	r3, r1, r3
 800296a:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 800296c:	79fb      	ldrb	r3, [r7, #7]
 800296e:	2b03      	cmp	r3, #3
 8002970:	d01c      	beq.n	80029ac <BSP_LCD_DisplayStringAt+0xa0>
 8002972:	2b03      	cmp	r3, #3
 8002974:	dc33      	bgt.n	80029de <BSP_LCD_DisplayStringAt+0xd2>
 8002976:	2b01      	cmp	r3, #1
 8002978:	d002      	beq.n	8002980 <BSP_LCD_DisplayStringAt+0x74>
 800297a:	2b02      	cmp	r3, #2
 800297c:	d019      	beq.n	80029b2 <BSP_LCD_DisplayStringAt+0xa6>
 800297e:	e02e      	b.n	80029de <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	1ad1      	subs	r1, r2, r3
 8002986:	4b3e      	ldr	r3, [pc, #248]	; (8002a80 <BSP_LCD_DisplayStringAt+0x174>)
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	483e      	ldr	r0, [pc, #248]	; (8002a84 <BSP_LCD_DisplayStringAt+0x178>)
 800298c:	4613      	mov	r3, r2
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	4413      	add	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4403      	add	r3, r0
 8002996:	3308      	adds	r3, #8
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	889b      	ldrh	r3, [r3, #4]
 800299c:	fb01 f303 	mul.w	r3, r1, r3
 80029a0:	085b      	lsrs	r3, r3, #1
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	89fb      	ldrh	r3, [r7, #14]
 80029a6:	4413      	add	r3, r2
 80029a8:	83fb      	strh	r3, [r7, #30]
      break;
 80029aa:	e01b      	b.n	80029e4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 80029ac:	89fb      	ldrh	r3, [r7, #14]
 80029ae:	83fb      	strh	r3, [r7, #30]
      break;
 80029b0:	e018      	b.n	80029e4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	b299      	uxth	r1, r3
 80029ba:	4b31      	ldr	r3, [pc, #196]	; (8002a80 <BSP_LCD_DisplayStringAt+0x174>)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	4831      	ldr	r0, [pc, #196]	; (8002a84 <BSP_LCD_DisplayStringAt+0x178>)
 80029c0:	4613      	mov	r3, r2
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4403      	add	r3, r0
 80029ca:	3308      	adds	r3, #8
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	889b      	ldrh	r3, [r3, #4]
 80029d0:	fb11 f303 	smulbb	r3, r1, r3
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	89fb      	ldrh	r3, [r7, #14]
 80029d8:	4413      	add	r3, r2
 80029da:	83fb      	strh	r3, [r7, #30]
      break;
 80029dc:	e002      	b.n	80029e4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 80029de:	89fb      	ldrh	r3, [r7, #14]
 80029e0:	83fb      	strh	r3, [r7, #30]
      break;
 80029e2:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80029e4:	e01a      	b.n	8002a1c <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	781a      	ldrb	r2, [r3, #0]
 80029ea:	89b9      	ldrh	r1, [r7, #12]
 80029ec:	8bfb      	ldrh	r3, [r7, #30]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff ff48 	bl	8002884 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80029f4:	4b22      	ldr	r3, [pc, #136]	; (8002a80 <BSP_LCD_DisplayStringAt+0x174>)
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	4922      	ldr	r1, [pc, #136]	; (8002a84 <BSP_LCD_DisplayStringAt+0x178>)
 80029fa:	4613      	mov	r3, r2
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	4413      	add	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	440b      	add	r3, r1
 8002a04:	3308      	adds	r3, #8
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	889a      	ldrh	r2, [r3, #4]
 8002a0a:	8bfb      	ldrh	r3, [r7, #30]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	3301      	adds	r3, #1
 8002a14:	60bb      	str	r3, [r7, #8]
    i++;
 8002a16:	8bbb      	ldrh	r3, [r7, #28]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	bf14      	ite	ne
 8002a24:	2301      	movne	r3, #1
 8002a26:	2300      	moveq	r3, #0
 8002a28:	b2dc      	uxtb	r4, r3
 8002a2a:	f7ff fe2b 	bl	8002684 <BSP_LCD_GetXSize>
 8002a2e:	8bb9      	ldrh	r1, [r7, #28]
 8002a30:	4b13      	ldr	r3, [pc, #76]	; (8002a80 <BSP_LCD_DisplayStringAt+0x174>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	4d13      	ldr	r5, [pc, #76]	; (8002a84 <BSP_LCD_DisplayStringAt+0x178>)
 8002a36:	4613      	mov	r3, r2
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	4413      	add	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	442b      	add	r3, r5
 8002a40:	3308      	adds	r3, #8
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	889b      	ldrh	r3, [r3, #4]
 8002a46:	fb01 f303 	mul.w	r3, r1, r3
 8002a4a:	1ac3      	subs	r3, r0, r3
 8002a4c:	b299      	uxth	r1, r3
 8002a4e:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <BSP_LCD_DisplayStringAt+0x174>)
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	480c      	ldr	r0, [pc, #48]	; (8002a84 <BSP_LCD_DisplayStringAt+0x178>)
 8002a54:	4613      	mov	r3, r2
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	4413      	add	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4403      	add	r3, r0
 8002a5e:	3308      	adds	r3, #8
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	889b      	ldrh	r3, [r3, #4]
 8002a64:	4299      	cmp	r1, r3
 8002a66:	bf2c      	ite	cs
 8002a68:	2301      	movcs	r3, #1
 8002a6a:	2300      	movcc	r3, #0
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	4023      	ands	r3, r4
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1b7      	bne.n	80029e6 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8002a76:	bf00      	nop
 8002a78:	bf00      	nop
 8002a7a:	3720      	adds	r7, #32
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bdb0      	pop	{r4, r5, r7, pc}
 8002a80:	2000071c 	.word	0x2000071c
 8002a84:	20000720 	.word	0x20000720

08002a88 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002a88:	b5b0      	push	{r4, r5, r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af02      	add	r7, sp, #8
 8002a8e:	4603      	mov	r3, r0
 8002a90:	80fb      	strh	r3, [r7, #6]
 8002a92:	460b      	mov	r3, r1
 8002a94:	80bb      	strh	r3, [r7, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002a9e:	4b16      	ldr	r3, [pc, #88]	; (8002af8 <BSP_LCD_DrawHLine+0x70>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a16      	ldr	r2, [pc, #88]	; (8002afc <BSP_LCD_DrawHLine+0x74>)
 8002aa4:	2134      	movs	r1, #52	; 0x34
 8002aa6:	fb01 f303 	mul.w	r3, r1, r3
 8002aaa:	4413      	add	r3, r2
 8002aac:	335c      	adds	r3, #92	; 0x5c
 8002aae:	681c      	ldr	r4, [r3, #0]
 8002ab0:	f7ff fde8 	bl	8002684 <BSP_LCD_GetXSize>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	88bb      	ldrh	r3, [r7, #4]
 8002ab8:	fb03 f202 	mul.w	r2, r3, r2
 8002abc:	88fb      	ldrh	r3, [r7, #6]
 8002abe:	4413      	add	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4423      	add	r3, r4
 8002ac4:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002ac6:	4b0c      	ldr	r3, [pc, #48]	; (8002af8 <BSP_LCD_DrawHLine+0x70>)
 8002ac8:	6818      	ldr	r0, [r3, #0]
 8002aca:	68f9      	ldr	r1, [r7, #12]
 8002acc:	887c      	ldrh	r4, [r7, #2]
 8002ace:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <BSP_LCD_DrawHLine+0x70>)
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	4d0b      	ldr	r5, [pc, #44]	; (8002b00 <BSP_LCD_DrawHLine+0x78>)
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	4413      	add	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	442b      	add	r3, r5
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	9301      	str	r3, [sp, #4]
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	4622      	mov	r2, r4
 8002aea:	f000 fba5 	bl	8003238 <FillBuffer>
}
 8002aee:	bf00      	nop
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bdb0      	pop	{r4, r5, r7, pc}
 8002af6:	bf00      	nop
 8002af8:	2000071c 	.word	0x2000071c
 8002afc:	20000604 	.word	0x20000604
 8002b00:	20000720 	.word	0x20000720

08002b04 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002b04:	b590      	push	{r4, r7, lr}
 8002b06:	b087      	sub	sp, #28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	80fb      	strh	r3, [r7, #6]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	80bb      	strh	r3, [r7, #4]
 8002b12:	4613      	mov	r3, r2
 8002b14:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8002b16:	887b      	ldrh	r3, [r7, #2]
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	f1c3 0303 	rsb	r3, r3, #3
 8002b1e:	617b      	str	r3, [r7, #20]
  curx = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8002b24:	887b      	ldrh	r3, [r7, #2]
 8002b26:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 8002b28:	e0c7      	b.n	8002cba <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	88fb      	ldrh	r3, [r7, #6]
 8002b30:	4413      	add	r3, r2
 8002b32:	b298      	uxth	r0, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	88ba      	ldrh	r2, [r7, #4]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	b299      	uxth	r1, r3
 8002b3e:	4b64      	ldr	r3, [pc, #400]	; (8002cd0 <BSP_LCD_DrawCircle+0x1cc>)
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	4c64      	ldr	r4, [pc, #400]	; (8002cd4 <BSP_LCD_DrawCircle+0x1d0>)
 8002b44:	4613      	mov	r3, r2
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	4413      	add	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4423      	add	r3, r4
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	461a      	mov	r2, r3
 8002b52:	f000 fa91 	bl	8003078 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	88fa      	ldrh	r2, [r7, #6]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	b298      	uxth	r0, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	88ba      	ldrh	r2, [r7, #4]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	b299      	uxth	r1, r3
 8002b6a:	4b59      	ldr	r3, [pc, #356]	; (8002cd0 <BSP_LCD_DrawCircle+0x1cc>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	4c59      	ldr	r4, [pc, #356]	; (8002cd4 <BSP_LCD_DrawCircle+0x1d0>)
 8002b70:	4613      	mov	r3, r2
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	4413      	add	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4423      	add	r3, r4
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	f000 fa7b 	bl	8003078 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	88fb      	ldrh	r3, [r7, #6]
 8002b88:	4413      	add	r3, r2
 8002b8a:	b298      	uxth	r0, r3
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	88ba      	ldrh	r2, [r7, #4]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	b299      	uxth	r1, r3
 8002b96:	4b4e      	ldr	r3, [pc, #312]	; (8002cd0 <BSP_LCD_DrawCircle+0x1cc>)
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	4c4e      	ldr	r4, [pc, #312]	; (8002cd4 <BSP_LCD_DrawCircle+0x1d0>)
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	4413      	add	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4423      	add	r3, r4
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	f000 fa65 	bl	8003078 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	88fa      	ldrh	r2, [r7, #6]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	b298      	uxth	r0, r3
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	88ba      	ldrh	r2, [r7, #4]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	b299      	uxth	r1, r3
 8002bc2:	4b43      	ldr	r3, [pc, #268]	; (8002cd0 <BSP_LCD_DrawCircle+0x1cc>)
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	4c43      	ldr	r4, [pc, #268]	; (8002cd4 <BSP_LCD_DrawCircle+0x1d0>)
 8002bc8:	4613      	mov	r3, r2
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	4413      	add	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4423      	add	r3, r4
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	f000 fa4f 	bl	8003078 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	88fb      	ldrh	r3, [r7, #6]
 8002be0:	4413      	add	r3, r2
 8002be2:	b298      	uxth	r0, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	88bb      	ldrh	r3, [r7, #4]
 8002bea:	4413      	add	r3, r2
 8002bec:	b299      	uxth	r1, r3
 8002bee:	4b38      	ldr	r3, [pc, #224]	; (8002cd0 <BSP_LCD_DrawCircle+0x1cc>)
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	4c38      	ldr	r4, [pc, #224]	; (8002cd4 <BSP_LCD_DrawCircle+0x1d0>)
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	4413      	add	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4423      	add	r3, r4
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	461a      	mov	r2, r3
 8002c02:	f000 fa39 	bl	8003078 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	88fa      	ldrh	r2, [r7, #6]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	b298      	uxth	r0, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	88bb      	ldrh	r3, [r7, #4]
 8002c16:	4413      	add	r3, r2
 8002c18:	b299      	uxth	r1, r3
 8002c1a:	4b2d      	ldr	r3, [pc, #180]	; (8002cd0 <BSP_LCD_DrawCircle+0x1cc>)
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	4c2d      	ldr	r4, [pc, #180]	; (8002cd4 <BSP_LCD_DrawCircle+0x1d0>)
 8002c20:	4613      	mov	r3, r2
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4423      	add	r3, r4
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	f000 fa23 	bl	8003078 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	88fb      	ldrh	r3, [r7, #6]
 8002c38:	4413      	add	r3, r2
 8002c3a:	b298      	uxth	r0, r3
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	88bb      	ldrh	r3, [r7, #4]
 8002c42:	4413      	add	r3, r2
 8002c44:	b299      	uxth	r1, r3
 8002c46:	4b22      	ldr	r3, [pc, #136]	; (8002cd0 <BSP_LCD_DrawCircle+0x1cc>)
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	4c22      	ldr	r4, [pc, #136]	; (8002cd4 <BSP_LCD_DrawCircle+0x1d0>)
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	4413      	add	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4423      	add	r3, r4
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	461a      	mov	r2, r3
 8002c5a:	f000 fa0d 	bl	8003078 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	88fa      	ldrh	r2, [r7, #6]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	b298      	uxth	r0, r3
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	88bb      	ldrh	r3, [r7, #4]
 8002c6e:	4413      	add	r3, r2
 8002c70:	b299      	uxth	r1, r3
 8002c72:	4b17      	ldr	r3, [pc, #92]	; (8002cd0 <BSP_LCD_DrawCircle+0x1cc>)
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	4c17      	ldr	r4, [pc, #92]	; (8002cd4 <BSP_LCD_DrawCircle+0x1d0>)
 8002c78:	4613      	mov	r3, r2
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4423      	add	r3, r4
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	461a      	mov	r2, r3
 8002c86:	f000 f9f7 	bl	8003078 <BSP_LCD_DrawPixel>

    if (d < 0)
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	da06      	bge.n	8002c9e <BSP_LCD_DrawCircle+0x19a>
    { 
      d += (curx << 2) + 6;
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	009a      	lsls	r2, r3, #2
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	4413      	add	r3, r2
 8002c98:	3306      	adds	r3, #6
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	e00a      	b.n	8002cb4 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	009a      	lsls	r2, r3, #2
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	4413      	add	r3, r2
 8002caa:	330a      	adds	r3, #10
 8002cac:	617b      	str	r3, [r7, #20]
      cury--;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	f67f af33 	bls.w	8002b2a <BSP_LCD_DrawCircle+0x26>
  } 
}
 8002cc4:	bf00      	nop
 8002cc6:	bf00      	nop
 8002cc8:	371c      	adds	r7, #28
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd90      	pop	{r4, r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	2000071c 	.word	0x2000071c
 8002cd4:	20000720 	.word	0x20000720

08002cd8 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cdc:	b086      	sub	sp, #24
 8002cde:	af02      	add	r7, sp, #8
 8002ce0:	4604      	mov	r4, r0
 8002ce2:	4608      	mov	r0, r1
 8002ce4:	4611      	mov	r1, r2
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	4623      	mov	r3, r4
 8002cea:	80fb      	strh	r3, [r7, #6]
 8002cec:	4603      	mov	r3, r0
 8002cee:	80bb      	strh	r3, [r7, #4]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	807b      	strh	r3, [r7, #2]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002cfc:	4b20      	ldr	r3, [pc, #128]	; (8002d80 <BSP_LCD_FillRect+0xa8>)
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	4920      	ldr	r1, [pc, #128]	; (8002d84 <BSP_LCD_FillRect+0xac>)
 8002d02:	4613      	mov	r3, r2
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	4413      	add	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	440b      	add	r3, r1
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff fd44 	bl	800279c <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002d14:	4b1a      	ldr	r3, [pc, #104]	; (8002d80 <BSP_LCD_FillRect+0xa8>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a1b      	ldr	r2, [pc, #108]	; (8002d88 <BSP_LCD_FillRect+0xb0>)
 8002d1a:	2134      	movs	r1, #52	; 0x34
 8002d1c:	fb01 f303 	mul.w	r3, r1, r3
 8002d20:	4413      	add	r3, r2
 8002d22:	335c      	adds	r3, #92	; 0x5c
 8002d24:	681c      	ldr	r4, [r3, #0]
 8002d26:	f7ff fcad 	bl	8002684 <BSP_LCD_GetXSize>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	88bb      	ldrh	r3, [r7, #4]
 8002d2e:	fb03 f202 	mul.w	r2, r3, r2
 8002d32:	88fb      	ldrh	r3, [r7, #6]
 8002d34:	4413      	add	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4423      	add	r3, r4
 8002d3a:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8002d3c:	4b10      	ldr	r3, [pc, #64]	; (8002d80 <BSP_LCD_FillRect+0xa8>)
 8002d3e:	681c      	ldr	r4, [r3, #0]
 8002d40:	68fd      	ldr	r5, [r7, #12]
 8002d42:	887e      	ldrh	r6, [r7, #2]
 8002d44:	f8b7 8000 	ldrh.w	r8, [r7]
 8002d48:	f7ff fc9c 	bl	8002684 <BSP_LCD_GetXSize>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	887b      	ldrh	r3, [r7, #2]
 8002d50:	1ad1      	subs	r1, r2, r3
 8002d52:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <BSP_LCD_FillRect+0xa8>)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	480b      	ldr	r0, [pc, #44]	; (8002d84 <BSP_LCD_FillRect+0xac>)
 8002d58:	4613      	mov	r3, r2
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	4413      	add	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4403      	add	r3, r0
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	9301      	str	r3, [sp, #4]
 8002d66:	9100      	str	r1, [sp, #0]
 8002d68:	4643      	mov	r3, r8
 8002d6a:	4632      	mov	r2, r6
 8002d6c:	4629      	mov	r1, r5
 8002d6e:	4620      	mov	r0, r4
 8002d70:	f000 fa62 	bl	8003238 <FillBuffer>
}
 8002d74:	bf00      	nop
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d7e:	bf00      	nop
 8002d80:	2000071c 	.word	0x2000071c
 8002d84:	20000720 	.word	0x20000720
 8002d88:	20000604 	.word	0x20000604

08002d8c <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	4603      	mov	r3, r0
 8002d94:	80fb      	strh	r3, [r7, #6]
 8002d96:	460b      	mov	r3, r1
 8002d98:	80bb      	strh	r3, [r7, #4]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8002d9e:	887b      	ldrh	r3, [r7, #2]
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	f1c3 0303 	rsb	r3, r3, #3
 8002da6:	617b      	str	r3, [r7, #20]

  curx = 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8002dac:	887b      	ldrh	r3, [r7, #2]
 8002dae:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002db0:	4b44      	ldr	r3, [pc, #272]	; (8002ec4 <BSP_LCD_FillCircle+0x138>)
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	4944      	ldr	r1, [pc, #272]	; (8002ec8 <BSP_LCD_FillCircle+0x13c>)
 8002db6:	4613      	mov	r3, r2
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	4413      	add	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff fcea 	bl	800279c <BSP_LCD_SetTextColor>

  while (curx <= cury)
 8002dc8:	e061      	b.n	8002e8e <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d021      	beq.n	8002e14 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	88fa      	ldrh	r2, [r7, #6]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	b298      	uxth	r0, r3
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	88bb      	ldrh	r3, [r7, #4]
 8002de0:	4413      	add	r3, r2
 8002de2:	b299      	uxth	r1, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	461a      	mov	r2, r3
 8002dee:	f7ff fe4b 	bl	8002a88 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	88fa      	ldrh	r2, [r7, #6]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	b298      	uxth	r0, r3
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	88ba      	ldrh	r2, [r7, #4]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	b299      	uxth	r1, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	461a      	mov	r2, r3
 8002e10:	f7ff fe3a 	bl	8002a88 <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d021      	beq.n	8002e5e <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	88fa      	ldrh	r2, [r7, #6]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	b298      	uxth	r0, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	88ba      	ldrh	r2, [r7, #4]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	b299      	uxth	r1, r3
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	461a      	mov	r2, r3
 8002e38:	f7ff fe26 	bl	8002a88 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	88fa      	ldrh	r2, [r7, #6]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	b298      	uxth	r0, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	88bb      	ldrh	r3, [r7, #4]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	b299      	uxth	r1, r3
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	461a      	mov	r2, r3
 8002e5a:	f7ff fe15 	bl	8002a88 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	da06      	bge.n	8002e72 <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	009a      	lsls	r2, r3, #2
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	3306      	adds	r3, #6
 8002e6e:	617b      	str	r3, [r7, #20]
 8002e70:	e00a      	b.n	8002e88 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	009a      	lsls	r2, r3, #2
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	330a      	adds	r3, #10
 8002e80:	617b      	str	r3, [r7, #20]
      cury--;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	3b01      	subs	r3, #1
 8002e86:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d999      	bls.n	8002dca <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002e96:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <BSP_LCD_FillCircle+0x138>)
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	490b      	ldr	r1, [pc, #44]	; (8002ec8 <BSP_LCD_FillCircle+0x13c>)
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	4413      	add	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff fc77 	bl	800279c <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8002eae:	887a      	ldrh	r2, [r7, #2]
 8002eb0:	88b9      	ldrh	r1, [r7, #4]
 8002eb2:	88fb      	ldrh	r3, [r7, #6]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff fe25 	bl	8002b04 <BSP_LCD_DrawCircle>
}
 8002eba:	bf00      	nop
 8002ebc:	3718      	adds	r7, #24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	2000071c 	.word	0x2000071c
 8002ec8:	20000720 	.word	0x20000720

08002ecc <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08e      	sub	sp, #56	; 0x38
 8002ed0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	623b      	str	r3, [r7, #32]
 8002ed6:	4b61      	ldr	r3, [pc, #388]	; (800305c <BSP_LCD_MspInit+0x190>)
 8002ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eda:	4a60      	ldr	r2, [pc, #384]	; (800305c <BSP_LCD_MspInit+0x190>)
 8002edc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ee2:	4b5e      	ldr	r3, [pc, #376]	; (800305c <BSP_LCD_MspInit+0x190>)
 8002ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002eea:	623b      	str	r3, [r7, #32]
 8002eec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61fb      	str	r3, [r7, #28]
 8002ef2:	4b5a      	ldr	r3, [pc, #360]	; (800305c <BSP_LCD_MspInit+0x190>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	4a59      	ldr	r2, [pc, #356]	; (800305c <BSP_LCD_MspInit+0x190>)
 8002ef8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002efc:	6313      	str	r3, [r2, #48]	; 0x30
 8002efe:	4b57      	ldr	r3, [pc, #348]	; (800305c <BSP_LCD_MspInit+0x190>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f06:	61fb      	str	r3, [r7, #28]
 8002f08:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61bb      	str	r3, [r7, #24]
 8002f0e:	4b53      	ldr	r3, [pc, #332]	; (800305c <BSP_LCD_MspInit+0x190>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	4a52      	ldr	r2, [pc, #328]	; (800305c <BSP_LCD_MspInit+0x190>)
 8002f14:	f043 0301 	orr.w	r3, r3, #1
 8002f18:	6313      	str	r3, [r2, #48]	; 0x30
 8002f1a:	4b50      	ldr	r3, [pc, #320]	; (800305c <BSP_LCD_MspInit+0x190>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	61bb      	str	r3, [r7, #24]
 8002f24:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	617b      	str	r3, [r7, #20]
 8002f2a:	4b4c      	ldr	r3, [pc, #304]	; (800305c <BSP_LCD_MspInit+0x190>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	4a4b      	ldr	r2, [pc, #300]	; (800305c <BSP_LCD_MspInit+0x190>)
 8002f30:	f043 0302 	orr.w	r3, r3, #2
 8002f34:	6313      	str	r3, [r2, #48]	; 0x30
 8002f36:	4b49      	ldr	r3, [pc, #292]	; (800305c <BSP_LCD_MspInit+0x190>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	617b      	str	r3, [r7, #20]
 8002f40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	613b      	str	r3, [r7, #16]
 8002f46:	4b45      	ldr	r3, [pc, #276]	; (800305c <BSP_LCD_MspInit+0x190>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	4a44      	ldr	r2, [pc, #272]	; (800305c <BSP_LCD_MspInit+0x190>)
 8002f4c:	f043 0304 	orr.w	r3, r3, #4
 8002f50:	6313      	str	r3, [r2, #48]	; 0x30
 8002f52:	4b42      	ldr	r3, [pc, #264]	; (800305c <BSP_LCD_MspInit+0x190>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	f003 0304 	and.w	r3, r3, #4
 8002f5a:	613b      	str	r3, [r7, #16]
 8002f5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	4b3e      	ldr	r3, [pc, #248]	; (800305c <BSP_LCD_MspInit+0x190>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	4a3d      	ldr	r2, [pc, #244]	; (800305c <BSP_LCD_MspInit+0x190>)
 8002f68:	f043 0308 	orr.w	r3, r3, #8
 8002f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f6e:	4b3b      	ldr	r3, [pc, #236]	; (800305c <BSP_LCD_MspInit+0x190>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	f003 0308 	and.w	r3, r3, #8
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	4b37      	ldr	r3, [pc, #220]	; (800305c <BSP_LCD_MspInit+0x190>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	4a36      	ldr	r2, [pc, #216]	; (800305c <BSP_LCD_MspInit+0x190>)
 8002f84:	f043 0320 	orr.w	r3, r3, #32
 8002f88:	6313      	str	r3, [r2, #48]	; 0x30
 8002f8a:	4b34      	ldr	r3, [pc, #208]	; (800305c <BSP_LCD_MspInit+0x190>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	f003 0320 	and.w	r3, r3, #32
 8002f92:	60bb      	str	r3, [r7, #8]
 8002f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f96:	2300      	movs	r3, #0
 8002f98:	607b      	str	r3, [r7, #4]
 8002f9a:	4b30      	ldr	r3, [pc, #192]	; (800305c <BSP_LCD_MspInit+0x190>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	4a2f      	ldr	r2, [pc, #188]	; (800305c <BSP_LCD_MspInit+0x190>)
 8002fa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa6:	4b2d      	ldr	r3, [pc, #180]	; (800305c <BSP_LCD_MspInit+0x190>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fae:	607b      	str	r3, [r7, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002fb2:	f641 0358 	movw	r3, #6232	; 0x1858
 8002fb6:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002fb8:	2302      	movs	r3, #2
 8002fba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002fc4:	230e      	movs	r3, #14
 8002fc6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002fc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4824      	ldr	r0, [pc, #144]	; (8003060 <BSP_LCD_MspInit+0x194>)
 8002fd0:	f001 fa68 	bl	80044a4 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002fd4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4820      	ldr	r0, [pc, #128]	; (8003064 <BSP_LCD_MspInit+0x198>)
 8002fe2:	f001 fa5f 	bl	80044a4 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002fe6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002fea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	481d      	ldr	r0, [pc, #116]	; (8003068 <BSP_LCD_MspInit+0x19c>)
 8002ff4:	f001 fa56 	bl	80044a4 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002ff8:	2348      	movs	r3, #72	; 0x48
 8002ffa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002ffc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003000:	4619      	mov	r1, r3
 8003002:	481a      	ldr	r0, [pc, #104]	; (800306c <BSP_LCD_MspInit+0x1a0>)
 8003004:	f001 fa4e 	bl	80044a4 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003008:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800300c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800300e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003012:	4619      	mov	r1, r3
 8003014:	4816      	ldr	r0, [pc, #88]	; (8003070 <BSP_LCD_MspInit+0x1a4>)
 8003016:	f001 fa45 	bl	80044a4 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800301a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800301e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003020:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003024:	4619      	mov	r1, r3
 8003026:	4813      	ldr	r0, [pc, #76]	; (8003074 <BSP_LCD_MspInit+0x1a8>)
 8003028:	f001 fa3c 	bl	80044a4 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800302c:	2303      	movs	r3, #3
 800302e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8003030:	2309      	movs	r3, #9
 8003032:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003038:	4619      	mov	r1, r3
 800303a:	480a      	ldr	r0, [pc, #40]	; (8003064 <BSP_LCD_MspInit+0x198>)
 800303c:	f001 fa32 	bl	80044a4 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003040:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003044:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003046:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800304a:	4619      	mov	r1, r3
 800304c:	4809      	ldr	r0, [pc, #36]	; (8003074 <BSP_LCD_MspInit+0x1a8>)
 800304e:	f001 fa29 	bl	80044a4 <HAL_GPIO_Init>
}
 8003052:	bf00      	nop
 8003054:	3738      	adds	r7, #56	; 0x38
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40023800 	.word	0x40023800
 8003060:	40020000 	.word	0x40020000
 8003064:	40020400 	.word	0x40020400
 8003068:	40020800 	.word	0x40020800
 800306c:	40020c00 	.word	0x40020c00
 8003070:	40021400 	.word	0x40021400
 8003074:	40021800 	.word	0x40021800

08003078 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003078:	b5b0      	push	{r4, r5, r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	603a      	str	r2, [r7, #0]
 8003082:	80fb      	strh	r3, [r7, #6]
 8003084:	460b      	mov	r3, r1
 8003086:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003088:	4b0c      	ldr	r3, [pc, #48]	; (80030bc <BSP_LCD_DrawPixel+0x44>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a0c      	ldr	r2, [pc, #48]	; (80030c0 <BSP_LCD_DrawPixel+0x48>)
 800308e:	2134      	movs	r1, #52	; 0x34
 8003090:	fb01 f303 	mul.w	r3, r1, r3
 8003094:	4413      	add	r3, r2
 8003096:	335c      	adds	r3, #92	; 0x5c
 8003098:	681c      	ldr	r4, [r3, #0]
 800309a:	88bd      	ldrh	r5, [r7, #4]
 800309c:	f7ff faf2 	bl	8002684 <BSP_LCD_GetXSize>
 80030a0:	4603      	mov	r3, r0
 80030a2:	fb03 f205 	mul.w	r2, r3, r5
 80030a6:	88fb      	ldrh	r3, [r7, #6]
 80030a8:	4413      	add	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4423      	add	r3, r4
 80030ae:	461a      	mov	r2, r3
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	6013      	str	r3, [r2, #0]
}
 80030b4:	bf00      	nop
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bdb0      	pop	{r4, r5, r7, pc}
 80030bc:	2000071c 	.word	0x2000071c
 80030c0:	20000604 	.word	0x20000604

080030c4 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b088      	sub	sp, #32
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	4603      	mov	r3, r0
 80030cc:	603a      	str	r2, [r7, #0]
 80030ce:	80fb      	strh	r3, [r7, #6]
 80030d0:	460b      	mov	r3, r1
 80030d2:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80030d4:	2300      	movs	r3, #0
 80030d6:	61fb      	str	r3, [r7, #28]
 80030d8:	2300      	movs	r3, #0
 80030da:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 80030dc:	2300      	movs	r3, #0
 80030de:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80030e0:	4b53      	ldr	r3, [pc, #332]	; (8003230 <DrawChar+0x16c>)
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	4953      	ldr	r1, [pc, #332]	; (8003234 <DrawChar+0x170>)
 80030e6:	4613      	mov	r3, r2
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	4413      	add	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	440b      	add	r3, r1
 80030f0:	3308      	adds	r3, #8
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	88db      	ldrh	r3, [r3, #6]
 80030f6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80030f8:	4b4d      	ldr	r3, [pc, #308]	; (8003230 <DrawChar+0x16c>)
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	494d      	ldr	r1, [pc, #308]	; (8003234 <DrawChar+0x170>)
 80030fe:	4613      	mov	r3, r2
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	4413      	add	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	3308      	adds	r3, #8
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	889b      	ldrh	r3, [r3, #4]
 800310e:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8003110:	8a3b      	ldrh	r3, [r7, #16]
 8003112:	3307      	adds	r3, #7
 8003114:	2b00      	cmp	r3, #0
 8003116:	da00      	bge.n	800311a <DrawChar+0x56>
 8003118:	3307      	adds	r3, #7
 800311a:	10db      	asrs	r3, r3, #3
 800311c:	b2db      	uxtb	r3, r3
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	b2da      	uxtb	r2, r3
 8003122:	8a3b      	ldrh	r3, [r7, #16]
 8003124:	b2db      	uxtb	r3, r3
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 800312a:	2300      	movs	r3, #0
 800312c:	61fb      	str	r3, [r7, #28]
 800312e:	e076      	b.n	800321e <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003130:	8a3b      	ldrh	r3, [r7, #16]
 8003132:	3307      	adds	r3, #7
 8003134:	2b00      	cmp	r3, #0
 8003136:	da00      	bge.n	800313a <DrawChar+0x76>
 8003138:	3307      	adds	r3, #7
 800313a:	10db      	asrs	r3, r3, #3
 800313c:	461a      	mov	r2, r3
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	fb02 f303 	mul.w	r3, r2, r3
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	4413      	add	r3, r2
 8003148:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 800314a:	8a3b      	ldrh	r3, [r7, #16]
 800314c:	3307      	adds	r3, #7
 800314e:	2b00      	cmp	r3, #0
 8003150:	da00      	bge.n	8003154 <DrawChar+0x90>
 8003152:	3307      	adds	r3, #7
 8003154:	10db      	asrs	r3, r3, #3
 8003156:	2b01      	cmp	r3, #1
 8003158:	d002      	beq.n	8003160 <DrawChar+0x9c>
 800315a:	2b02      	cmp	r3, #2
 800315c:	d004      	beq.n	8003168 <DrawChar+0xa4>
 800315e:	e00c      	b.n	800317a <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	617b      	str	r3, [r7, #20]
      break;
 8003166:	e016      	b.n	8003196 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	021b      	lsls	r3, r3, #8
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	3201      	adds	r2, #1
 8003172:	7812      	ldrb	r2, [r2, #0]
 8003174:	4313      	orrs	r3, r2
 8003176:	617b      	str	r3, [r7, #20]
      break;
 8003178:	e00d      	b.n	8003196 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	041a      	lsls	r2, r3, #16
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	3301      	adds	r3, #1
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	021b      	lsls	r3, r3, #8
 8003188:	4313      	orrs	r3, r2
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	3202      	adds	r2, #2
 800318e:	7812      	ldrb	r2, [r2, #0]
 8003190:	4313      	orrs	r3, r2
 8003192:	617b      	str	r3, [r7, #20]
      break;
 8003194:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8003196:	2300      	movs	r3, #0
 8003198:	61bb      	str	r3, [r7, #24]
 800319a:	e036      	b.n	800320a <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 800319c:	8a3a      	ldrh	r2, [r7, #16]
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	1ad2      	subs	r2, r2, r3
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
 80031a4:	4413      	add	r3, r2
 80031a6:	3b01      	subs	r3, #1
 80031a8:	2201      	movs	r2, #1
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	461a      	mov	r2, r3
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	4013      	ands	r3, r2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d012      	beq.n	80031de <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	88fb      	ldrh	r3, [r7, #6]
 80031be:	4413      	add	r3, r2
 80031c0:	b298      	uxth	r0, r3
 80031c2:	4b1b      	ldr	r3, [pc, #108]	; (8003230 <DrawChar+0x16c>)
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	491b      	ldr	r1, [pc, #108]	; (8003234 <DrawChar+0x170>)
 80031c8:	4613      	mov	r3, r2
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	4413      	add	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	88bb      	ldrh	r3, [r7, #4]
 80031d6:	4619      	mov	r1, r3
 80031d8:	f7ff ff4e 	bl	8003078 <BSP_LCD_DrawPixel>
 80031dc:	e012      	b.n	8003204 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	88fb      	ldrh	r3, [r7, #6]
 80031e4:	4413      	add	r3, r2
 80031e6:	b298      	uxth	r0, r3
 80031e8:	4b11      	ldr	r3, [pc, #68]	; (8003230 <DrawChar+0x16c>)
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	4911      	ldr	r1, [pc, #68]	; (8003234 <DrawChar+0x170>)
 80031ee:	4613      	mov	r3, r2
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	4413      	add	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	440b      	add	r3, r1
 80031f8:	3304      	adds	r3, #4
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	88bb      	ldrh	r3, [r7, #4]
 80031fe:	4619      	mov	r1, r3
 8003200:	f7ff ff3a 	bl	8003078 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	3301      	adds	r3, #1
 8003208:	61bb      	str	r3, [r7, #24]
 800320a:	8a3b      	ldrh	r3, [r7, #16]
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	429a      	cmp	r2, r3
 8003210:	d3c4      	bcc.n	800319c <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8003212:	88bb      	ldrh	r3, [r7, #4]
 8003214:	3301      	adds	r3, #1
 8003216:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	3301      	adds	r3, #1
 800321c:	61fb      	str	r3, [r7, #28]
 800321e:	8a7b      	ldrh	r3, [r7, #18]
 8003220:	69fa      	ldr	r2, [r7, #28]
 8003222:	429a      	cmp	r2, r3
 8003224:	d384      	bcc.n	8003130 <DrawChar+0x6c>
  }
}
 8003226:	bf00      	nop
 8003228:	bf00      	nop
 800322a:	3720      	adds	r7, #32
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	2000071c 	.word	0x2000071c
 8003234:	20000720 	.word	0x20000720

08003238 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af02      	add	r7, sp, #8
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
 8003244:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8003246:	4b16      	ldr	r3, [pc, #88]	; (80032a0 <FillBuffer+0x68>)
 8003248:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800324c:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800324e:	4b14      	ldr	r3, [pc, #80]	; (80032a0 <FillBuffer+0x68>)
 8003250:	2200      	movs	r2, #0
 8003252:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8003254:	4a12      	ldr	r2, [pc, #72]	; (80032a0 <FillBuffer+0x68>)
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 800325a:	4b11      	ldr	r3, [pc, #68]	; (80032a0 <FillBuffer+0x68>)
 800325c:	4a11      	ldr	r2, [pc, #68]	; (80032a4 <FillBuffer+0x6c>)
 800325e:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8003260:	480f      	ldr	r0, [pc, #60]	; (80032a0 <FillBuffer+0x68>)
 8003262:	f000 fd83 	bl	8003d6c <HAL_DMA2D_Init>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d115      	bne.n	8003298 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 800326c:	68f9      	ldr	r1, [r7, #12]
 800326e:	480c      	ldr	r0, [pc, #48]	; (80032a0 <FillBuffer+0x68>)
 8003270:	f000 ffea 	bl	8004248 <HAL_DMA2D_ConfigLayer>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10e      	bne.n	8003298 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	69f9      	ldr	r1, [r7, #28]
 8003284:	4806      	ldr	r0, [pc, #24]	; (80032a0 <FillBuffer+0x68>)
 8003286:	f000 fdba 	bl	8003dfe <HAL_DMA2D_Start>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d103      	bne.n	8003298 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003290:	210a      	movs	r1, #10
 8003292:	4803      	ldr	r0, [pc, #12]	; (80032a0 <FillBuffer+0x68>)
 8003294:	f000 fdde 	bl	8003e54 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003298:	bf00      	nop
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	200006ac 	.word	0x200006ac
 80032a4:	4002b000 	.word	0x4002b000

080032a8 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80032ac:	4b29      	ldr	r3, [pc, #164]	; (8003354 <BSP_SDRAM_Init+0xac>)
 80032ae:	4a2a      	ldr	r2, [pc, #168]	; (8003358 <BSP_SDRAM_Init+0xb0>)
 80032b0:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 80032b2:	4b2a      	ldr	r3, [pc, #168]	; (800335c <BSP_SDRAM_Init+0xb4>)
 80032b4:	2202      	movs	r2, #2
 80032b6:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80032b8:	4b28      	ldr	r3, [pc, #160]	; (800335c <BSP_SDRAM_Init+0xb4>)
 80032ba:	2207      	movs	r2, #7
 80032bc:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80032be:	4b27      	ldr	r3, [pc, #156]	; (800335c <BSP_SDRAM_Init+0xb4>)
 80032c0:	2204      	movs	r2, #4
 80032c2:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80032c4:	4b25      	ldr	r3, [pc, #148]	; (800335c <BSP_SDRAM_Init+0xb4>)
 80032c6:	2207      	movs	r2, #7
 80032c8:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80032ca:	4b24      	ldr	r3, [pc, #144]	; (800335c <BSP_SDRAM_Init+0xb4>)
 80032cc:	2202      	movs	r2, #2
 80032ce:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80032d0:	4b22      	ldr	r3, [pc, #136]	; (800335c <BSP_SDRAM_Init+0xb4>)
 80032d2:	2202      	movs	r2, #2
 80032d4:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80032d6:	4b21      	ldr	r3, [pc, #132]	; (800335c <BSP_SDRAM_Init+0xb4>)
 80032d8:	2202      	movs	r2, #2
 80032da:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80032dc:	4b1d      	ldr	r3, [pc, #116]	; (8003354 <BSP_SDRAM_Init+0xac>)
 80032de:	2201      	movs	r2, #1
 80032e0:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80032e2:	4b1c      	ldr	r3, [pc, #112]	; (8003354 <BSP_SDRAM_Init+0xac>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80032e8:	4b1a      	ldr	r3, [pc, #104]	; (8003354 <BSP_SDRAM_Init+0xac>)
 80032ea:	2204      	movs	r2, #4
 80032ec:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80032ee:	4b19      	ldr	r3, [pc, #100]	; (8003354 <BSP_SDRAM_Init+0xac>)
 80032f0:	2210      	movs	r2, #16
 80032f2:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80032f4:	4b17      	ldr	r3, [pc, #92]	; (8003354 <BSP_SDRAM_Init+0xac>)
 80032f6:	2240      	movs	r2, #64	; 0x40
 80032f8:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80032fa:	4b16      	ldr	r3, [pc, #88]	; (8003354 <BSP_SDRAM_Init+0xac>)
 80032fc:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003300:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003302:	4b14      	ldr	r3, [pc, #80]	; (8003354 <BSP_SDRAM_Init+0xac>)
 8003304:	2200      	movs	r2, #0
 8003306:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003308:	4b12      	ldr	r3, [pc, #72]	; (8003354 <BSP_SDRAM_Init+0xac>)
 800330a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800330e:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003310:	4b10      	ldr	r3, [pc, #64]	; (8003354 <BSP_SDRAM_Init+0xac>)
 8003312:	2200      	movs	r2, #0
 8003314:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8003316:	4b0f      	ldr	r3, [pc, #60]	; (8003354 <BSP_SDRAM_Init+0xac>)
 8003318:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800331c:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800331e:	2100      	movs	r1, #0
 8003320:	480c      	ldr	r0, [pc, #48]	; (8003354 <BSP_SDRAM_Init+0xac>)
 8003322:	f000 f87f 	bl	8003424 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8003326:	490d      	ldr	r1, [pc, #52]	; (800335c <BSP_SDRAM_Init+0xb4>)
 8003328:	480a      	ldr	r0, [pc, #40]	; (8003354 <BSP_SDRAM_Init+0xac>)
 800332a:	f004 f9cb 	bl	80076c4 <HAL_SDRAM_Init>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d003      	beq.n	800333c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003334:	4b0a      	ldr	r3, [pc, #40]	; (8003360 <BSP_SDRAM_Init+0xb8>)
 8003336:	2201      	movs	r2, #1
 8003338:	701a      	strb	r2, [r3, #0]
 800333a:	e002      	b.n	8003342 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800333c:	4b08      	ldr	r3, [pc, #32]	; (8003360 <BSP_SDRAM_Init+0xb8>)
 800333e:	2200      	movs	r2, #0
 8003340:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003342:	f240 506a 	movw	r0, #1386	; 0x56a
 8003346:	f000 f80d 	bl	8003364 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800334a:	4b05      	ldr	r3, [pc, #20]	; (8003360 <BSP_SDRAM_Init+0xb8>)
 800334c:	781b      	ldrb	r3, [r3, #0]
}
 800334e:	4618      	mov	r0, r3
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	2000073c 	.word	0x2000073c
 8003358:	a0000140 	.word	0xa0000140
 800335c:	20000770 	.word	0x20000770
 8003360:	20000048 	.word	0x20000048

08003364 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 800336c:	2300      	movs	r3, #0
 800336e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003370:	4b2a      	ldr	r3, [pc, #168]	; (800341c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003372:	2201      	movs	r2, #1
 8003374:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003376:	4b29      	ldr	r3, [pc, #164]	; (800341c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003378:	2208      	movs	r2, #8
 800337a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800337c:	4b27      	ldr	r3, [pc, #156]	; (800341c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800337e:	2201      	movs	r2, #1
 8003380:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003382:	4b26      	ldr	r3, [pc, #152]	; (800341c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003384:	2200      	movs	r2, #0
 8003386:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003388:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800338c:	4923      	ldr	r1, [pc, #140]	; (800341c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800338e:	4824      	ldr	r0, [pc, #144]	; (8003420 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003390:	f004 f9cc 	bl	800772c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003394:	2001      	movs	r0, #1
 8003396:	f000 f993 	bl	80036c0 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800339a:	4b20      	ldr	r3, [pc, #128]	; (800341c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800339c:	2202      	movs	r2, #2
 800339e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80033a0:	4b1e      	ldr	r3, [pc, #120]	; (800341c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033a2:	2208      	movs	r2, #8
 80033a4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80033a6:	4b1d      	ldr	r3, [pc, #116]	; (800341c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033a8:	2201      	movs	r2, #1
 80033aa:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80033ac:	4b1b      	ldr	r3, [pc, #108]	; (800341c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80033b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033b6:	4919      	ldr	r1, [pc, #100]	; (800341c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033b8:	4819      	ldr	r0, [pc, #100]	; (8003420 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80033ba:	f004 f9b7 	bl	800772c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80033be:	4b17      	ldr	r3, [pc, #92]	; (800341c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033c0:	2203      	movs	r2, #3
 80033c2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80033c4:	4b15      	ldr	r3, [pc, #84]	; (800341c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033c6:	2208      	movs	r2, #8
 80033c8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80033ca:	4b14      	ldr	r3, [pc, #80]	; (800341c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033cc:	2204      	movs	r2, #4
 80033ce:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80033d0:	4b12      	ldr	r3, [pc, #72]	; (800341c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80033d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033da:	4910      	ldr	r1, [pc, #64]	; (800341c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033dc:	4810      	ldr	r0, [pc, #64]	; (8003420 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80033de:	f004 f9a5 	bl	800772c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80033e2:	f44f 730c 	mov.w	r3, #560	; 0x230
 80033e6:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80033e8:	4b0c      	ldr	r3, [pc, #48]	; (800341c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033ea:	2204      	movs	r2, #4
 80033ec:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80033ee:	4b0b      	ldr	r3, [pc, #44]	; (800341c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033f0:	2208      	movs	r2, #8
 80033f2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80033f4:	4b09      	ldr	r3, [pc, #36]	; (800341c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033f6:	2201      	movs	r2, #1
 80033f8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	4a07      	ldr	r2, [pc, #28]	; (800341c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033fe:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003400:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003404:	4905      	ldr	r1, [pc, #20]	; (800341c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003406:	4806      	ldr	r0, [pc, #24]	; (8003420 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003408:	f004 f990 	bl	800772c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	4804      	ldr	r0, [pc, #16]	; (8003420 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003410:	f004 f9c1 	bl	8007796 <HAL_SDRAM_ProgramRefreshRate>
}
 8003414:	bf00      	nop
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	2000078c 	.word	0x2000078c
 8003420:	2000073c 	.word	0x2000073c

08003424 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b090      	sub	sp, #64	; 0x40
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 80ec 	beq.w	800360e <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003436:	2300      	movs	r3, #0
 8003438:	62bb      	str	r3, [r7, #40]	; 0x28
 800343a:	4b77      	ldr	r3, [pc, #476]	; (8003618 <BSP_SDRAM_MspInit+0x1f4>)
 800343c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343e:	4a76      	ldr	r2, [pc, #472]	; (8003618 <BSP_SDRAM_MspInit+0x1f4>)
 8003440:	f043 0301 	orr.w	r3, r3, #1
 8003444:	6393      	str	r3, [r2, #56]	; 0x38
 8003446:	4b74      	ldr	r3, [pc, #464]	; (8003618 <BSP_SDRAM_MspInit+0x1f4>)
 8003448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003450:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003452:	2300      	movs	r3, #0
 8003454:	627b      	str	r3, [r7, #36]	; 0x24
 8003456:	4b70      	ldr	r3, [pc, #448]	; (8003618 <BSP_SDRAM_MspInit+0x1f4>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	4a6f      	ldr	r2, [pc, #444]	; (8003618 <BSP_SDRAM_MspInit+0x1f4>)
 800345c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003460:	6313      	str	r3, [r2, #48]	; 0x30
 8003462:	4b6d      	ldr	r3, [pc, #436]	; (8003618 <BSP_SDRAM_MspInit+0x1f4>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800346a:	627b      	str	r3, [r7, #36]	; 0x24
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800346e:	2300      	movs	r3, #0
 8003470:	623b      	str	r3, [r7, #32]
 8003472:	4b69      	ldr	r3, [pc, #420]	; (8003618 <BSP_SDRAM_MspInit+0x1f4>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003476:	4a68      	ldr	r2, [pc, #416]	; (8003618 <BSP_SDRAM_MspInit+0x1f4>)
 8003478:	f043 0302 	orr.w	r3, r3, #2
 800347c:	6313      	str	r3, [r2, #48]	; 0x30
 800347e:	4b66      	ldr	r3, [pc, #408]	; (8003618 <BSP_SDRAM_MspInit+0x1f4>)
 8003480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	623b      	str	r3, [r7, #32]
 8003488:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800348a:	2300      	movs	r3, #0
 800348c:	61fb      	str	r3, [r7, #28]
 800348e:	4b62      	ldr	r3, [pc, #392]	; (8003618 <BSP_SDRAM_MspInit+0x1f4>)
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	4a61      	ldr	r2, [pc, #388]	; (8003618 <BSP_SDRAM_MspInit+0x1f4>)
 8003494:	f043 0304 	orr.w	r3, r3, #4
 8003498:	6313      	str	r3, [r2, #48]	; 0x30
 800349a:	4b5f      	ldr	r3, [pc, #380]	; (8003618 <BSP_SDRAM_MspInit+0x1f4>)
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	f003 0304 	and.w	r3, r3, #4
 80034a2:	61fb      	str	r3, [r7, #28]
 80034a4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80034a6:	2300      	movs	r3, #0
 80034a8:	61bb      	str	r3, [r7, #24]
 80034aa:	4b5b      	ldr	r3, [pc, #364]	; (8003618 <BSP_SDRAM_MspInit+0x1f4>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	4a5a      	ldr	r2, [pc, #360]	; (8003618 <BSP_SDRAM_MspInit+0x1f4>)
 80034b0:	f043 0308 	orr.w	r3, r3, #8
 80034b4:	6313      	str	r3, [r2, #48]	; 0x30
 80034b6:	4b58      	ldr	r3, [pc, #352]	; (8003618 <BSP_SDRAM_MspInit+0x1f4>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	61bb      	str	r3, [r7, #24]
 80034c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80034c2:	2300      	movs	r3, #0
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	4b54      	ldr	r3, [pc, #336]	; (8003618 <BSP_SDRAM_MspInit+0x1f4>)
 80034c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ca:	4a53      	ldr	r2, [pc, #332]	; (8003618 <BSP_SDRAM_MspInit+0x1f4>)
 80034cc:	f043 0310 	orr.w	r3, r3, #16
 80034d0:	6313      	str	r3, [r2, #48]	; 0x30
 80034d2:	4b51      	ldr	r3, [pc, #324]	; (8003618 <BSP_SDRAM_MspInit+0x1f4>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	f003 0310 	and.w	r3, r3, #16
 80034da:	617b      	str	r3, [r7, #20]
 80034dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80034de:	2300      	movs	r3, #0
 80034e0:	613b      	str	r3, [r7, #16]
 80034e2:	4b4d      	ldr	r3, [pc, #308]	; (8003618 <BSP_SDRAM_MspInit+0x1f4>)
 80034e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e6:	4a4c      	ldr	r2, [pc, #304]	; (8003618 <BSP_SDRAM_MspInit+0x1f4>)
 80034e8:	f043 0320 	orr.w	r3, r3, #32
 80034ec:	6313      	str	r3, [r2, #48]	; 0x30
 80034ee:	4b4a      	ldr	r3, [pc, #296]	; (8003618 <BSP_SDRAM_MspInit+0x1f4>)
 80034f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f2:	f003 0320 	and.w	r3, r3, #32
 80034f6:	613b      	str	r3, [r7, #16]
 80034f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80034fa:	2300      	movs	r3, #0
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	4b46      	ldr	r3, [pc, #280]	; (8003618 <BSP_SDRAM_MspInit+0x1f4>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	4a45      	ldr	r2, [pc, #276]	; (8003618 <BSP_SDRAM_MspInit+0x1f4>)
 8003504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003508:	6313      	str	r3, [r2, #48]	; 0x30
 800350a:	4b43      	ldr	r3, [pc, #268]	; (8003618 <BSP_SDRAM_MspInit+0x1f4>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8003516:	2302      	movs	r3, #2
 8003518:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800351a:	2302      	movs	r3, #2
 800351c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800351e:	2300      	movs	r3, #0
 8003520:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8003522:	230c      	movs	r3, #12
 8003524:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8003526:	2360      	movs	r3, #96	; 0x60
 8003528:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800352a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800352e:	4619      	mov	r1, r3
 8003530:	483a      	ldr	r0, [pc, #232]	; (800361c <BSP_SDRAM_MspInit+0x1f8>)
 8003532:	f000 ffb7 	bl	80044a4 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8003536:	2301      	movs	r3, #1
 8003538:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 800353a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800353e:	4619      	mov	r1, r3
 8003540:	4837      	ldr	r0, [pc, #220]	; (8003620 <BSP_SDRAM_MspInit+0x1fc>)
 8003542:	f000 ffaf 	bl	80044a4 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8003546:	f24c 7303 	movw	r3, #50947	; 0xc703
 800354a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800354c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003550:	4619      	mov	r1, r3
 8003552:	4834      	ldr	r0, [pc, #208]	; (8003624 <BSP_SDRAM_MspInit+0x200>)
 8003554:	f000 ffa6 	bl	80044a4 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8003558:	f64f 7383 	movw	r3, #65411	; 0xff83
 800355c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800355e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003562:	4619      	mov	r1, r3
 8003564:	4830      	ldr	r0, [pc, #192]	; (8003628 <BSP_SDRAM_MspInit+0x204>)
 8003566:	f000 ff9d 	bl	80044a4 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800356a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800356e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003570:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003574:	4619      	mov	r1, r3
 8003576:	482d      	ldr	r0, [pc, #180]	; (800362c <BSP_SDRAM_MspInit+0x208>)
 8003578:	f000 ff94 	bl	80044a4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 800357c:	f248 1333 	movw	r3, #33075	; 0x8133
 8003580:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003582:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003586:	4619      	mov	r1, r3
 8003588:	4829      	ldr	r0, [pc, #164]	; (8003630 <BSP_SDRAM_MspInit+0x20c>)
 800358a:	f000 ff8b 	bl	80044a4 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800358e:	4b29      	ldr	r3, [pc, #164]	; (8003634 <BSP_SDRAM_MspInit+0x210>)
 8003590:	2200      	movs	r2, #0
 8003592:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003594:	4b27      	ldr	r3, [pc, #156]	; (8003634 <BSP_SDRAM_MspInit+0x210>)
 8003596:	2280      	movs	r2, #128	; 0x80
 8003598:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800359a:	4b26      	ldr	r3, [pc, #152]	; (8003634 <BSP_SDRAM_MspInit+0x210>)
 800359c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035a0:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80035a2:	4b24      	ldr	r3, [pc, #144]	; (8003634 <BSP_SDRAM_MspInit+0x210>)
 80035a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035a8:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80035aa:	4b22      	ldr	r3, [pc, #136]	; (8003634 <BSP_SDRAM_MspInit+0x210>)
 80035ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035b0:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80035b2:	4b20      	ldr	r3, [pc, #128]	; (8003634 <BSP_SDRAM_MspInit+0x210>)
 80035b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80035b8:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 80035ba:	4b1e      	ldr	r3, [pc, #120]	; (8003634 <BSP_SDRAM_MspInit+0x210>)
 80035bc:	2200      	movs	r2, #0
 80035be:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80035c0:	4b1c      	ldr	r3, [pc, #112]	; (8003634 <BSP_SDRAM_MspInit+0x210>)
 80035c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035c6:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80035c8:	4b1a      	ldr	r3, [pc, #104]	; (8003634 <BSP_SDRAM_MspInit+0x210>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80035ce:	4b19      	ldr	r3, [pc, #100]	; (8003634 <BSP_SDRAM_MspInit+0x210>)
 80035d0:	2203      	movs	r2, #3
 80035d2:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80035d4:	4b17      	ldr	r3, [pc, #92]	; (8003634 <BSP_SDRAM_MspInit+0x210>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80035da:	4b16      	ldr	r3, [pc, #88]	; (8003634 <BSP_SDRAM_MspInit+0x210>)
 80035dc:	2200      	movs	r2, #0
 80035de:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80035e0:	4b14      	ldr	r3, [pc, #80]	; (8003634 <BSP_SDRAM_MspInit+0x210>)
 80035e2:	4a15      	ldr	r2, [pc, #84]	; (8003638 <BSP_SDRAM_MspInit+0x214>)
 80035e4:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a12      	ldr	r2, [pc, #72]	; (8003634 <BSP_SDRAM_MspInit+0x210>)
 80035ea:	631a      	str	r2, [r3, #48]	; 0x30
 80035ec:	4a11      	ldr	r2, [pc, #68]	; (8003634 <BSP_SDRAM_MspInit+0x210>)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 80035f2:	4810      	ldr	r0, [pc, #64]	; (8003634 <BSP_SDRAM_MspInit+0x210>)
 80035f4:	f000 fa18 	bl	8003a28 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 80035f8:	480e      	ldr	r0, [pc, #56]	; (8003634 <BSP_SDRAM_MspInit+0x210>)
 80035fa:	f000 f967 	bl	80038cc <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80035fe:	2200      	movs	r2, #0
 8003600:	210f      	movs	r1, #15
 8003602:	2038      	movs	r0, #56	; 0x38
 8003604:	f000 f938 	bl	8003878 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003608:	2038      	movs	r0, #56	; 0x38
 800360a:	f000 f951 	bl	80038b0 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800360e:	bf00      	nop
 8003610:	3740      	adds	r7, #64	; 0x40
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	40023800 	.word	0x40023800
 800361c:	40020400 	.word	0x40020400
 8003620:	40020800 	.word	0x40020800
 8003624:	40020c00 	.word	0x40020c00
 8003628:	40021000 	.word	0x40021000
 800362c:	40021400 	.word	0x40021400
 8003630:	40021800 	.word	0x40021800
 8003634:	2000079c 	.word	0x2000079c
 8003638:	40026410 	.word	0x40026410

0800363c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003640:	4b0e      	ldr	r3, [pc, #56]	; (800367c <HAL_Init+0x40>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a0d      	ldr	r2, [pc, #52]	; (800367c <HAL_Init+0x40>)
 8003646:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800364a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800364c:	4b0b      	ldr	r3, [pc, #44]	; (800367c <HAL_Init+0x40>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a0a      	ldr	r2, [pc, #40]	; (800367c <HAL_Init+0x40>)
 8003652:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003656:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003658:	4b08      	ldr	r3, [pc, #32]	; (800367c <HAL_Init+0x40>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a07      	ldr	r2, [pc, #28]	; (800367c <HAL_Init+0x40>)
 800365e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003662:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003664:	2003      	movs	r0, #3
 8003666:	f000 f8fc 	bl	8003862 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800366a:	2000      	movs	r0, #0
 800366c:	f7fe f8ec 	bl	8001848 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003670:	f7fe f8be 	bl	80017f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	40023c00 	.word	0x40023c00

08003680 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003684:	4b06      	ldr	r3, [pc, #24]	; (80036a0 <HAL_IncTick+0x20>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	461a      	mov	r2, r3
 800368a:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <HAL_IncTick+0x24>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4413      	add	r3, r2
 8003690:	4a04      	ldr	r2, [pc, #16]	; (80036a4 <HAL_IncTick+0x24>)
 8003692:	6013      	str	r3, [r2, #0]
}
 8003694:	bf00      	nop
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	20000050 	.word	0x20000050
 80036a4:	200007fc 	.word	0x200007fc

080036a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  return uwTick;
 80036ac:	4b03      	ldr	r3, [pc, #12]	; (80036bc <HAL_GetTick+0x14>)
 80036ae:	681b      	ldr	r3, [r3, #0]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	200007fc 	.word	0x200007fc

080036c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036c8:	f7ff ffee 	bl	80036a8 <HAL_GetTick>
 80036cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d8:	d005      	beq.n	80036e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036da:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <HAL_Delay+0x44>)
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	461a      	mov	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4413      	add	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80036e6:	bf00      	nop
 80036e8:	f7ff ffde 	bl	80036a8 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d8f7      	bhi.n	80036e8 <HAL_Delay+0x28>
  {
  }
}
 80036f8:	bf00      	nop
 80036fa:	bf00      	nop
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	20000050 	.word	0x20000050

08003708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003718:	4b0c      	ldr	r3, [pc, #48]	; (800374c <__NVIC_SetPriorityGrouping+0x44>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003724:	4013      	ands	r3, r2
 8003726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003730:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800373a:	4a04      	ldr	r2, [pc, #16]	; (800374c <__NVIC_SetPriorityGrouping+0x44>)
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	60d3      	str	r3, [r2, #12]
}
 8003740:	bf00      	nop
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	e000ed00 	.word	0xe000ed00

08003750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003754:	4b04      	ldr	r3, [pc, #16]	; (8003768 <__NVIC_GetPriorityGrouping+0x18>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	0a1b      	lsrs	r3, r3, #8
 800375a:	f003 0307 	and.w	r3, r3, #7
}
 800375e:	4618      	mov	r0, r3
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	e000ed00 	.word	0xe000ed00

0800376c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	4603      	mov	r3, r0
 8003774:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377a:	2b00      	cmp	r3, #0
 800377c:	db0b      	blt.n	8003796 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800377e:	79fb      	ldrb	r3, [r7, #7]
 8003780:	f003 021f 	and.w	r2, r3, #31
 8003784:	4907      	ldr	r1, [pc, #28]	; (80037a4 <__NVIC_EnableIRQ+0x38>)
 8003786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378a:	095b      	lsrs	r3, r3, #5
 800378c:	2001      	movs	r0, #1
 800378e:	fa00 f202 	lsl.w	r2, r0, r2
 8003792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003796:	bf00      	nop
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	e000e100 	.word	0xe000e100

080037a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	4603      	mov	r3, r0
 80037b0:	6039      	str	r1, [r7, #0]
 80037b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	db0a      	blt.n	80037d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	b2da      	uxtb	r2, r3
 80037c0:	490c      	ldr	r1, [pc, #48]	; (80037f4 <__NVIC_SetPriority+0x4c>)
 80037c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c6:	0112      	lsls	r2, r2, #4
 80037c8:	b2d2      	uxtb	r2, r2
 80037ca:	440b      	add	r3, r1
 80037cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037d0:	e00a      	b.n	80037e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	4908      	ldr	r1, [pc, #32]	; (80037f8 <__NVIC_SetPriority+0x50>)
 80037d8:	79fb      	ldrb	r3, [r7, #7]
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	3b04      	subs	r3, #4
 80037e0:	0112      	lsls	r2, r2, #4
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	440b      	add	r3, r1
 80037e6:	761a      	strb	r2, [r3, #24]
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	e000e100 	.word	0xe000e100
 80037f8:	e000ed00 	.word	0xe000ed00

080037fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b089      	sub	sp, #36	; 0x24
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f1c3 0307 	rsb	r3, r3, #7
 8003816:	2b04      	cmp	r3, #4
 8003818:	bf28      	it	cs
 800381a:	2304      	movcs	r3, #4
 800381c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	3304      	adds	r3, #4
 8003822:	2b06      	cmp	r3, #6
 8003824:	d902      	bls.n	800382c <NVIC_EncodePriority+0x30>
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	3b03      	subs	r3, #3
 800382a:	e000      	b.n	800382e <NVIC_EncodePriority+0x32>
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003830:	f04f 32ff 	mov.w	r2, #4294967295
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	43da      	mvns	r2, r3
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	401a      	ands	r2, r3
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003844:	f04f 31ff 	mov.w	r1, #4294967295
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	fa01 f303 	lsl.w	r3, r1, r3
 800384e:	43d9      	mvns	r1, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003854:	4313      	orrs	r3, r2
         );
}
 8003856:	4618      	mov	r0, r3
 8003858:	3724      	adds	r7, #36	; 0x24
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b082      	sub	sp, #8
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7ff ff4c 	bl	8003708 <__NVIC_SetPriorityGrouping>
}
 8003870:	bf00      	nop
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	4603      	mov	r3, r0
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
 8003884:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003886:	2300      	movs	r3, #0
 8003888:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800388a:	f7ff ff61 	bl	8003750 <__NVIC_GetPriorityGrouping>
 800388e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	68b9      	ldr	r1, [r7, #8]
 8003894:	6978      	ldr	r0, [r7, #20]
 8003896:	f7ff ffb1 	bl	80037fc <NVIC_EncodePriority>
 800389a:	4602      	mov	r2, r0
 800389c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038a0:	4611      	mov	r1, r2
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7ff ff80 	bl	80037a8 <__NVIC_SetPriority>
}
 80038a8:	bf00      	nop
 80038aa:	3718      	adds	r7, #24
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	4603      	mov	r3, r0
 80038b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038be:	4618      	mov	r0, r3
 80038c0:	f7ff ff54 	bl	800376c <__NVIC_EnableIRQ>
}
 80038c4:	bf00      	nop
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80038d4:	2300      	movs	r3, #0
 80038d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80038d8:	f7ff fee6 	bl	80036a8 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e099      	b.n	8003a1c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2202      	movs	r2, #2
 80038ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0201 	bic.w	r2, r2, #1
 8003906:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003908:	e00f      	b.n	800392a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800390a:	f7ff fecd 	bl	80036a8 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b05      	cmp	r3, #5
 8003916:	d908      	bls.n	800392a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2220      	movs	r2, #32
 800391c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2203      	movs	r2, #3
 8003922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e078      	b.n	8003a1c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1e8      	bne.n	800390a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	4b38      	ldr	r3, [pc, #224]	; (8003a24 <HAL_DMA_Init+0x158>)
 8003944:	4013      	ands	r3, r2
 8003946:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003956:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003962:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800396e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	4313      	orrs	r3, r2
 800397a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	2b04      	cmp	r3, #4
 8003982:	d107      	bne.n	8003994 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398c:	4313      	orrs	r3, r2
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	4313      	orrs	r3, r2
 8003992:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	f023 0307 	bic.w	r3, r3, #7
 80039aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d117      	bne.n	80039ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00e      	beq.n	80039ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f94f 	bl	8003c74 <DMA_CheckFifoParam>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d008      	beq.n	80039ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2240      	movs	r2, #64	; 0x40
 80039e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80039ea:	2301      	movs	r3, #1
 80039ec:	e016      	b.n	8003a1c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f906 	bl	8003c08 <DMA_CalcBaseAndBitshift>
 80039fc:	4603      	mov	r3, r0
 80039fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a04:	223f      	movs	r2, #63	; 0x3f
 8003a06:	409a      	lsls	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3718      	adds	r7, #24
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	f010803f 	.word	0xf010803f

08003a28 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e050      	b.n	8003adc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d101      	bne.n	8003a4a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003a46:	2302      	movs	r3, #2
 8003a48:	e048      	b.n	8003adc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0201 	bic.w	r2, r2, #1
 8003a58:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2200      	movs	r2, #0
 8003a68:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2200      	movs	r2, #0
 8003a78:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2221      	movs	r2, #33	; 0x21
 8003a88:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f8bc 	bl	8003c08 <DMA_CalcBaseAndBitshift>
 8003a90:	4603      	mov	r3, r0
 8003a92:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003abc:	223f      	movs	r2, #63	; 0x3f
 8003abe:	409a      	lsls	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003af2:	f7ff fdd9 	bl	80036a8 <HAL_GetTick>
 8003af6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d008      	beq.n	8003b16 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2280      	movs	r2, #128	; 0x80
 8003b08:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e052      	b.n	8003bbc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 0216 	bic.w	r2, r2, #22
 8003b24:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	695a      	ldr	r2, [r3, #20]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b34:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d103      	bne.n	8003b46 <HAL_DMA_Abort+0x62>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d007      	beq.n	8003b56 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 0208 	bic.w	r2, r2, #8
 8003b54:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f022 0201 	bic.w	r2, r2, #1
 8003b64:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b66:	e013      	b.n	8003b90 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b68:	f7ff fd9e 	bl	80036a8 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b05      	cmp	r3, #5
 8003b74:	d90c      	bls.n	8003b90 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2203      	movs	r2, #3
 8003b80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e015      	b.n	8003bbc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1e4      	bne.n	8003b68 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba2:	223f      	movs	r2, #63	; 0x3f
 8003ba4:	409a      	lsls	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3710      	adds	r7, #16
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d004      	beq.n	8003be2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2280      	movs	r2, #128	; 0x80
 8003bdc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e00c      	b.n	8003bfc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2205      	movs	r2, #5
 8003be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 0201 	bic.w	r2, r2, #1
 8003bf8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	3b10      	subs	r3, #16
 8003c18:	4a14      	ldr	r2, [pc, #80]	; (8003c6c <DMA_CalcBaseAndBitshift+0x64>)
 8003c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1e:	091b      	lsrs	r3, r3, #4
 8003c20:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c22:	4a13      	ldr	r2, [pc, #76]	; (8003c70 <DMA_CalcBaseAndBitshift+0x68>)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4413      	add	r3, r2
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2b03      	cmp	r3, #3
 8003c34:	d909      	bls.n	8003c4a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c3e:	f023 0303 	bic.w	r3, r3, #3
 8003c42:	1d1a      	adds	r2, r3, #4
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	659a      	str	r2, [r3, #88]	; 0x58
 8003c48:	e007      	b.n	8003c5a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c52:	f023 0303 	bic.w	r3, r3, #3
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	aaaaaaab 	.word	0xaaaaaaab
 8003c70:	08013e1c 	.word	0x08013e1c

08003c74 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c84:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d11f      	bne.n	8003cce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2b03      	cmp	r3, #3
 8003c92:	d856      	bhi.n	8003d42 <DMA_CheckFifoParam+0xce>
 8003c94:	a201      	add	r2, pc, #4	; (adr r2, 8003c9c <DMA_CheckFifoParam+0x28>)
 8003c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9a:	bf00      	nop
 8003c9c:	08003cad 	.word	0x08003cad
 8003ca0:	08003cbf 	.word	0x08003cbf
 8003ca4:	08003cad 	.word	0x08003cad
 8003ca8:	08003d43 	.word	0x08003d43
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d046      	beq.n	8003d46 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cbc:	e043      	b.n	8003d46 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cc6:	d140      	bne.n	8003d4a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ccc:	e03d      	b.n	8003d4a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cd6:	d121      	bne.n	8003d1c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	2b03      	cmp	r3, #3
 8003cdc:	d837      	bhi.n	8003d4e <DMA_CheckFifoParam+0xda>
 8003cde:	a201      	add	r2, pc, #4	; (adr r2, 8003ce4 <DMA_CheckFifoParam+0x70>)
 8003ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce4:	08003cf5 	.word	0x08003cf5
 8003ce8:	08003cfb 	.word	0x08003cfb
 8003cec:	08003cf5 	.word	0x08003cf5
 8003cf0:	08003d0d 	.word	0x08003d0d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8003cf8:	e030      	b.n	8003d5c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d025      	beq.n	8003d52 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d0a:	e022      	b.n	8003d52 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d10:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d14:	d11f      	bne.n	8003d56 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d1a:	e01c      	b.n	8003d56 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d903      	bls.n	8003d2a <DMA_CheckFifoParam+0xb6>
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2b03      	cmp	r3, #3
 8003d26:	d003      	beq.n	8003d30 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d28:	e018      	b.n	8003d5c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	73fb      	strb	r3, [r7, #15]
      break;
 8003d2e:	e015      	b.n	8003d5c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00e      	beq.n	8003d5a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d40:	e00b      	b.n	8003d5a <DMA_CheckFifoParam+0xe6>
      break;
 8003d42:	bf00      	nop
 8003d44:	e00a      	b.n	8003d5c <DMA_CheckFifoParam+0xe8>
      break;
 8003d46:	bf00      	nop
 8003d48:	e008      	b.n	8003d5c <DMA_CheckFifoParam+0xe8>
      break;
 8003d4a:	bf00      	nop
 8003d4c:	e006      	b.n	8003d5c <DMA_CheckFifoParam+0xe8>
      break;
 8003d4e:	bf00      	nop
 8003d50:	e004      	b.n	8003d5c <DMA_CheckFifoParam+0xe8>
      break;
 8003d52:	bf00      	nop
 8003d54:	e002      	b.n	8003d5c <DMA_CheckFifoParam+0xe8>
      break;   
 8003d56:	bf00      	nop
 8003d58:	e000      	b.n	8003d5c <DMA_CheckFifoParam+0xe8>
      break;
 8003d5a:	bf00      	nop
    }
  } 
  
  return status; 
 8003d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop

08003d6c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e03b      	b.n	8003df6 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d106      	bne.n	8003d98 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7fc fe10 	bl	80009b8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685a      	ldr	r2, [r3, #4]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dbc:	f023 0107 	bic.w	r1, r3, #7
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003dd6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	68d1      	ldr	r1, [r2, #12]
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	6812      	ldr	r2, [r2, #0]
 8003de2:	430b      	orrs	r3, r1
 8003de4:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3708      	adds	r7, #8
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b086      	sub	sp, #24
 8003e02:	af02      	add	r7, sp, #8
 8003e04:	60f8      	str	r0, [r7, #12]
 8003e06:	60b9      	str	r1, [r7, #8]
 8003e08:	607a      	str	r2, [r7, #4]
 8003e0a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d101      	bne.n	8003e1a <HAL_DMA2D_Start+0x1c>
 8003e16:	2302      	movs	r3, #2
 8003e18:	e018      	b.n	8003e4c <HAL_DMA2D_Start+0x4e>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2202      	movs	r2, #2
 8003e26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	68b9      	ldr	r1, [r7, #8]
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 fa99 	bl	800436c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f042 0201 	orr.w	r2, r2, #1
 8003e48:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3710      	adds	r7, #16
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d056      	beq.n	8003f1e <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e70:	f7ff fc1a 	bl	80036a8 <HAL_GetTick>
 8003e74:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003e76:	e04b      	b.n	8003f10 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d023      	beq.n	8003ed2 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f003 0320 	and.w	r3, r3, #32
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d005      	beq.n	8003ea0 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e98:	f043 0202 	orr.w	r2, r3, #2
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d005      	beq.n	8003eb6 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eae:	f043 0201 	orr.w	r2, r3, #1
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2221      	movs	r2, #33	; 0x21
 8003ebc:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2204      	movs	r2, #4
 8003ec2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e0a5      	b.n	800401e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed8:	d01a      	beq.n	8003f10 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003eda:	f7ff fbe5 	bl	80036a8 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d302      	bcc.n	8003ef0 <HAL_DMA2D_PollForTransfer+0x9c>
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10f      	bne.n	8003f10 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef4:	f043 0220 	orr.w	r2, r3, #32
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2203      	movs	r2, #3
 8003f00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e086      	b.n	800401e <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0ac      	beq.n	8003e78 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	69db      	ldr	r3, [r3, #28]
 8003f24:	f003 0320 	and.w	r3, r3, #32
 8003f28:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	f003 0320 	and.w	r3, r3, #32
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d061      	beq.n	8004004 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f40:	f7ff fbb2 	bl	80036a8 <HAL_GetTick>
 8003f44:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003f46:	e056      	b.n	8003ff6 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d02e      	beq.n	8003fb8 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f003 0308 	and.w	r3, r3, #8
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d005      	beq.n	8003f70 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f68:	f043 0204 	orr.w	r2, r3, #4
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f003 0320 	and.w	r3, r3, #32
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d005      	beq.n	8003f86 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7e:	f043 0202 	orr.w	r2, r3, #2
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d005      	beq.n	8003f9c <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f94:	f043 0201 	orr.w	r2, r3, #1
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2229      	movs	r2, #41	; 0x29
 8003fa2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2204      	movs	r2, #4
 8003fa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e032      	b.n	800401e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fbe:	d01a      	beq.n	8003ff6 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003fc0:	f7ff fb72 	bl	80036a8 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d302      	bcc.n	8003fd6 <HAL_DMA2D_PollForTransfer+0x182>
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10f      	bne.n	8003ff6 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fda:	f043 0220 	orr.w	r2, r3, #32
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2203      	movs	r2, #3
 8003fe6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e013      	b.n	800401e <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f003 0310 	and.w	r3, r3, #16
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0a1      	beq.n	8003f48 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2212      	movs	r2, #18
 800400a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3718      	adds	r7, #24
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b084      	sub	sp, #16
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b00      	cmp	r3, #0
 8004046:	d026      	beq.n	8004096 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404e:	2b00      	cmp	r3, #0
 8004050:	d021      	beq.n	8004096 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004060:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004066:	f043 0201 	orr.w	r2, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2201      	movs	r2, #1
 8004074:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2204      	movs	r2, #4
 800407a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f003 0320 	and.w	r3, r3, #32
 800409c:	2b00      	cmp	r3, #0
 800409e:	d026      	beq.n	80040ee <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d021      	beq.n	80040ee <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040b8:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2220      	movs	r2, #32
 80040c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c6:	f043 0202 	orr.w	r2, r3, #2
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2204      	movs	r2, #4
 80040d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f003 0308 	and.w	r3, r3, #8
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d026      	beq.n	8004146 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d021      	beq.n	8004146 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004110:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2208      	movs	r2, #8
 8004118:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411e:	f043 0204 	orr.w	r2, r3, #4
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2204      	movs	r2, #4
 800412a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	2b00      	cmp	r3, #0
 800414e:	d013      	beq.n	8004178 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00e      	beq.n	8004178 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004168:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2204      	movs	r2, #4
 8004170:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f853 	bl	800421e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d024      	beq.n	80041cc <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004188:	2b00      	cmp	r3, #0
 800418a:	d01f      	beq.n	80041cc <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800419a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2202      	movs	r2, #2
 80041a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d003      	beq.n	80041cc <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f003 0310 	and.w	r3, r3, #16
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d01f      	beq.n	8004216 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d01a      	beq.n	8004216 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041ee:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2210      	movs	r2, #16
 80041f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 f80e 	bl	8004232 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004216:	bf00      	nop
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800421e:	b480      	push	{r7}
 8004220:	b083      	sub	sp, #12
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004232:	b480      	push	{r7}
 8004234:	b083      	sub	sp, #12
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800423a:	bf00      	nop
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
	...

08004248 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004248:	b480      	push	{r7}
 800424a:	b087      	sub	sp, #28
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004260:	2b01      	cmp	r3, #1
 8004262:	d101      	bne.n	8004268 <HAL_DMA2D_ConfigLayer+0x20>
 8004264:	2302      	movs	r3, #2
 8004266:	e079      	b.n	800435c <HAL_DMA2D_ConfigLayer+0x114>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2202      	movs	r2, #2
 8004274:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	3318      	adds	r3, #24
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	4413      	add	r3, r2
 8004282:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	041b      	lsls	r3, r3, #16
 800428e:	4313      	orrs	r3, r2
 8004290:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004292:	4b35      	ldr	r3, [pc, #212]	; (8004368 <HAL_DMA2D_ConfigLayer+0x120>)
 8004294:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	2b0a      	cmp	r3, #10
 800429c:	d003      	beq.n	80042a6 <HAL_DMA2D_ConfigLayer+0x5e>
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2b09      	cmp	r3, #9
 80042a4:	d107      	bne.n	80042b6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	617b      	str	r3, [r7, #20]
 80042b4:	e005      	b.n	80042c2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	061b      	lsls	r3, r3, #24
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	4313      	orrs	r3, r2
 80042c0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d120      	bne.n	800430a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	43db      	mvns	r3, r3
 80042d2:	ea02 0103 	and.w	r1, r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	430a      	orrs	r2, r1
 80042de:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	6812      	ldr	r2, [r2, #0]
 80042e8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	2b0a      	cmp	r3, #10
 80042f0:	d003      	beq.n	80042fa <HAL_DMA2D_ConfigLayer+0xb2>
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	2b09      	cmp	r3, #9
 80042f8:	d127      	bne.n	800434a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	68da      	ldr	r2, [r3, #12]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004306:	629a      	str	r2, [r3, #40]	; 0x28
 8004308:	e01f      	b.n	800434a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	69da      	ldr	r2, [r3, #28]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	43db      	mvns	r3, r3
 8004314:	ea02 0103 	and.w	r1, r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	430a      	orrs	r2, r1
 8004320:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	6812      	ldr	r2, [r2, #0]
 800432a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	2b0a      	cmp	r3, #10
 8004332:	d003      	beq.n	800433c <HAL_DMA2D_ConfigLayer+0xf4>
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	2b09      	cmp	r3, #9
 800433a:	d106      	bne.n	800434a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	68da      	ldr	r2, [r3, #12]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004348:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	371c      	adds	r7, #28
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	ff03000f 	.word	0xff03000f

0800436c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800436c:	b480      	push	{r7}
 800436e:	b08b      	sub	sp, #44	; 0x2c
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
 8004378:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004380:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	041a      	lsls	r2, r3, #16
 8004388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438a:	431a      	orrs	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	430a      	orrs	r2, r1
 8004392:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80043a4:	d174      	bne.n	8004490 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80043ac:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80043b4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80043bc:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d108      	bne.n	80043de <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	431a      	orrs	r2, r3
 80043d2:	6a3b      	ldr	r3, [r7, #32]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	4313      	orrs	r3, r2
 80043da:	627b      	str	r3, [r7, #36]	; 0x24
 80043dc:	e053      	b.n	8004486 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d106      	bne.n	80043f4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	627b      	str	r3, [r7, #36]	; 0x24
 80043f2:	e048      	b.n	8004486 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d111      	bne.n	8004420 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	0cdb      	lsrs	r3, r3, #19
 8004400:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	0a9b      	lsrs	r3, r3, #10
 8004406:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	08db      	lsrs	r3, r3, #3
 800440c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	015a      	lsls	r2, r3, #5
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	02db      	lsls	r3, r3, #11
 8004416:	4313      	orrs	r3, r2
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	4313      	orrs	r3, r2
 800441c:	627b      	str	r3, [r7, #36]	; 0x24
 800441e:	e032      	b.n	8004486 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	2b03      	cmp	r3, #3
 8004426:	d117      	bne.n	8004458 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004428:	6a3b      	ldr	r3, [r7, #32]
 800442a:	0fdb      	lsrs	r3, r3, #31
 800442c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	0cdb      	lsrs	r3, r3, #19
 8004432:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	0adb      	lsrs	r3, r3, #11
 8004438:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	08db      	lsrs	r3, r3, #3
 800443e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	015a      	lsls	r2, r3, #5
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	029b      	lsls	r3, r3, #10
 8004448:	431a      	orrs	r2, r3
 800444a:	6a3b      	ldr	r3, [r7, #32]
 800444c:	03db      	lsls	r3, r3, #15
 800444e:	4313      	orrs	r3, r2
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	4313      	orrs	r3, r2
 8004454:	627b      	str	r3, [r7, #36]	; 0x24
 8004456:	e016      	b.n	8004486 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004458:	6a3b      	ldr	r3, [r7, #32]
 800445a:	0f1b      	lsrs	r3, r3, #28
 800445c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	0d1b      	lsrs	r3, r3, #20
 8004462:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	0b1b      	lsrs	r3, r3, #12
 8004468:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	091b      	lsrs	r3, r3, #4
 800446e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	011a      	lsls	r2, r3, #4
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	021b      	lsls	r3, r3, #8
 8004478:	431a      	orrs	r2, r3
 800447a:	6a3b      	ldr	r3, [r7, #32]
 800447c:	031b      	lsls	r3, r3, #12
 800447e:	4313      	orrs	r3, r2
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	4313      	orrs	r3, r2
 8004484:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800448c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800448e:	e003      	b.n	8004498 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	60da      	str	r2, [r3, #12]
}
 8004498:	bf00      	nop
 800449a:	372c      	adds	r7, #44	; 0x2c
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b089      	sub	sp, #36	; 0x24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044ba:	2300      	movs	r3, #0
 80044bc:	61fb      	str	r3, [r7, #28]
 80044be:	e177      	b.n	80047b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044c0:	2201      	movs	r2, #1
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	4013      	ands	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	429a      	cmp	r2, r3
 80044da:	f040 8166 	bne.w	80047aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d005      	beq.n	80044f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d130      	bne.n	8004558 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	005b      	lsls	r3, r3, #1
 8004500:	2203      	movs	r2, #3
 8004502:	fa02 f303 	lsl.w	r3, r2, r3
 8004506:	43db      	mvns	r3, r3
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	4013      	ands	r3, r2
 800450c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	fa02 f303 	lsl.w	r3, r2, r3
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	4313      	orrs	r3, r2
 800451e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800452c:	2201      	movs	r2, #1
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	43db      	mvns	r3, r3
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	4013      	ands	r3, r2
 800453a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	091b      	lsrs	r3, r3, #4
 8004542:	f003 0201 	and.w	r2, r3, #1
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	fa02 f303 	lsl.w	r3, r2, r3
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	4313      	orrs	r3, r2
 8004550:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f003 0303 	and.w	r3, r3, #3
 8004560:	2b03      	cmp	r3, #3
 8004562:	d017      	beq.n	8004594 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	2203      	movs	r2, #3
 8004570:	fa02 f303 	lsl.w	r3, r2, r3
 8004574:	43db      	mvns	r3, r3
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	4013      	ands	r3, r2
 800457a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	fa02 f303 	lsl.w	r3, r2, r3
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	4313      	orrs	r3, r2
 800458c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f003 0303 	and.w	r3, r3, #3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d123      	bne.n	80045e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	08da      	lsrs	r2, r3, #3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	3208      	adds	r2, #8
 80045a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	f003 0307 	and.w	r3, r3, #7
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	220f      	movs	r2, #15
 80045b8:	fa02 f303 	lsl.w	r3, r2, r3
 80045bc:	43db      	mvns	r3, r3
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	4013      	ands	r3, r2
 80045c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	691a      	ldr	r2, [r3, #16]
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	f003 0307 	and.w	r3, r3, #7
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	fa02 f303 	lsl.w	r3, r2, r3
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	08da      	lsrs	r2, r3, #3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	3208      	adds	r2, #8
 80045e2:	69b9      	ldr	r1, [r7, #24]
 80045e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	2203      	movs	r2, #3
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	43db      	mvns	r3, r3
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	4013      	ands	r3, r2
 80045fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f003 0203 	and.w	r2, r3, #3
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	fa02 f303 	lsl.w	r3, r2, r3
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	4313      	orrs	r3, r2
 8004614:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 80c0 	beq.w	80047aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800462a:	2300      	movs	r3, #0
 800462c:	60fb      	str	r3, [r7, #12]
 800462e:	4b66      	ldr	r3, [pc, #408]	; (80047c8 <HAL_GPIO_Init+0x324>)
 8004630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004632:	4a65      	ldr	r2, [pc, #404]	; (80047c8 <HAL_GPIO_Init+0x324>)
 8004634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004638:	6453      	str	r3, [r2, #68]	; 0x44
 800463a:	4b63      	ldr	r3, [pc, #396]	; (80047c8 <HAL_GPIO_Init+0x324>)
 800463c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004646:	4a61      	ldr	r2, [pc, #388]	; (80047cc <HAL_GPIO_Init+0x328>)
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	089b      	lsrs	r3, r3, #2
 800464c:	3302      	adds	r3, #2
 800464e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004652:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	f003 0303 	and.w	r3, r3, #3
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	220f      	movs	r2, #15
 800465e:	fa02 f303 	lsl.w	r3, r2, r3
 8004662:	43db      	mvns	r3, r3
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	4013      	ands	r3, r2
 8004668:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a58      	ldr	r2, [pc, #352]	; (80047d0 <HAL_GPIO_Init+0x32c>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d037      	beq.n	80046e2 <HAL_GPIO_Init+0x23e>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a57      	ldr	r2, [pc, #348]	; (80047d4 <HAL_GPIO_Init+0x330>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d031      	beq.n	80046de <HAL_GPIO_Init+0x23a>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a56      	ldr	r2, [pc, #344]	; (80047d8 <HAL_GPIO_Init+0x334>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d02b      	beq.n	80046da <HAL_GPIO_Init+0x236>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a55      	ldr	r2, [pc, #340]	; (80047dc <HAL_GPIO_Init+0x338>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d025      	beq.n	80046d6 <HAL_GPIO_Init+0x232>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a54      	ldr	r2, [pc, #336]	; (80047e0 <HAL_GPIO_Init+0x33c>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d01f      	beq.n	80046d2 <HAL_GPIO_Init+0x22e>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a53      	ldr	r2, [pc, #332]	; (80047e4 <HAL_GPIO_Init+0x340>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d019      	beq.n	80046ce <HAL_GPIO_Init+0x22a>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a52      	ldr	r2, [pc, #328]	; (80047e8 <HAL_GPIO_Init+0x344>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d013      	beq.n	80046ca <HAL_GPIO_Init+0x226>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a51      	ldr	r2, [pc, #324]	; (80047ec <HAL_GPIO_Init+0x348>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d00d      	beq.n	80046c6 <HAL_GPIO_Init+0x222>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a50      	ldr	r2, [pc, #320]	; (80047f0 <HAL_GPIO_Init+0x34c>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d007      	beq.n	80046c2 <HAL_GPIO_Init+0x21e>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a4f      	ldr	r2, [pc, #316]	; (80047f4 <HAL_GPIO_Init+0x350>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d101      	bne.n	80046be <HAL_GPIO_Init+0x21a>
 80046ba:	2309      	movs	r3, #9
 80046bc:	e012      	b.n	80046e4 <HAL_GPIO_Init+0x240>
 80046be:	230a      	movs	r3, #10
 80046c0:	e010      	b.n	80046e4 <HAL_GPIO_Init+0x240>
 80046c2:	2308      	movs	r3, #8
 80046c4:	e00e      	b.n	80046e4 <HAL_GPIO_Init+0x240>
 80046c6:	2307      	movs	r3, #7
 80046c8:	e00c      	b.n	80046e4 <HAL_GPIO_Init+0x240>
 80046ca:	2306      	movs	r3, #6
 80046cc:	e00a      	b.n	80046e4 <HAL_GPIO_Init+0x240>
 80046ce:	2305      	movs	r3, #5
 80046d0:	e008      	b.n	80046e4 <HAL_GPIO_Init+0x240>
 80046d2:	2304      	movs	r3, #4
 80046d4:	e006      	b.n	80046e4 <HAL_GPIO_Init+0x240>
 80046d6:	2303      	movs	r3, #3
 80046d8:	e004      	b.n	80046e4 <HAL_GPIO_Init+0x240>
 80046da:	2302      	movs	r3, #2
 80046dc:	e002      	b.n	80046e4 <HAL_GPIO_Init+0x240>
 80046de:	2301      	movs	r3, #1
 80046e0:	e000      	b.n	80046e4 <HAL_GPIO_Init+0x240>
 80046e2:	2300      	movs	r3, #0
 80046e4:	69fa      	ldr	r2, [r7, #28]
 80046e6:	f002 0203 	and.w	r2, r2, #3
 80046ea:	0092      	lsls	r2, r2, #2
 80046ec:	4093      	lsls	r3, r2
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046f4:	4935      	ldr	r1, [pc, #212]	; (80047cc <HAL_GPIO_Init+0x328>)
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	089b      	lsrs	r3, r3, #2
 80046fa:	3302      	adds	r3, #2
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004702:	4b3d      	ldr	r3, [pc, #244]	; (80047f8 <HAL_GPIO_Init+0x354>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	43db      	mvns	r3, r3
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	4013      	ands	r3, r2
 8004710:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	4313      	orrs	r3, r2
 8004724:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004726:	4a34      	ldr	r2, [pc, #208]	; (80047f8 <HAL_GPIO_Init+0x354>)
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800472c:	4b32      	ldr	r3, [pc, #200]	; (80047f8 <HAL_GPIO_Init+0x354>)
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	43db      	mvns	r3, r3
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	4013      	ands	r3, r2
 800473a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d003      	beq.n	8004750 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	4313      	orrs	r3, r2
 800474e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004750:	4a29      	ldr	r2, [pc, #164]	; (80047f8 <HAL_GPIO_Init+0x354>)
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004756:	4b28      	ldr	r3, [pc, #160]	; (80047f8 <HAL_GPIO_Init+0x354>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	43db      	mvns	r3, r3
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	4013      	ands	r3, r2
 8004764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004772:	69ba      	ldr	r2, [r7, #24]
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	4313      	orrs	r3, r2
 8004778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800477a:	4a1f      	ldr	r2, [pc, #124]	; (80047f8 <HAL_GPIO_Init+0x354>)
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004780:	4b1d      	ldr	r3, [pc, #116]	; (80047f8 <HAL_GPIO_Init+0x354>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	43db      	mvns	r3, r3
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	4013      	ands	r3, r2
 800478e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047a4:	4a14      	ldr	r2, [pc, #80]	; (80047f8 <HAL_GPIO_Init+0x354>)
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	3301      	adds	r3, #1
 80047ae:	61fb      	str	r3, [r7, #28]
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	2b0f      	cmp	r3, #15
 80047b4:	f67f ae84 	bls.w	80044c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80047b8:	bf00      	nop
 80047ba:	bf00      	nop
 80047bc:	3724      	adds	r7, #36	; 0x24
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	40023800 	.word	0x40023800
 80047cc:	40013800 	.word	0x40013800
 80047d0:	40020000 	.word	0x40020000
 80047d4:	40020400 	.word	0x40020400
 80047d8:	40020800 	.word	0x40020800
 80047dc:	40020c00 	.word	0x40020c00
 80047e0:	40021000 	.word	0x40021000
 80047e4:	40021400 	.word	0x40021400
 80047e8:	40021800 	.word	0x40021800
 80047ec:	40021c00 	.word	0x40021c00
 80047f0:	40022000 	.word	0x40022000
 80047f4:	40022400 	.word	0x40022400
 80047f8:	40013c00 	.word	0x40013c00

080047fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b087      	sub	sp, #28
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004806:	2300      	movs	r3, #0
 8004808:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800480a:	2300      	movs	r3, #0
 800480c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800480e:	2300      	movs	r3, #0
 8004810:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004812:	2300      	movs	r3, #0
 8004814:	617b      	str	r3, [r7, #20]
 8004816:	e0d9      	b.n	80049cc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004818:	2201      	movs	r2, #1
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	fa02 f303 	lsl.w	r3, r2, r3
 8004820:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	4013      	ands	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	429a      	cmp	r2, r3
 8004830:	f040 80c9 	bne.w	80049c6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004834:	4a6b      	ldr	r2, [pc, #428]	; (80049e4 <HAL_GPIO_DeInit+0x1e8>)
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	089b      	lsrs	r3, r3, #2
 800483a:	3302      	adds	r3, #2
 800483c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004840:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f003 0303 	and.w	r3, r3, #3
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	220f      	movs	r2, #15
 800484c:	fa02 f303 	lsl.w	r3, r2, r3
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	4013      	ands	r3, r2
 8004854:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a63      	ldr	r2, [pc, #396]	; (80049e8 <HAL_GPIO_DeInit+0x1ec>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d037      	beq.n	80048ce <HAL_GPIO_DeInit+0xd2>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a62      	ldr	r2, [pc, #392]	; (80049ec <HAL_GPIO_DeInit+0x1f0>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d031      	beq.n	80048ca <HAL_GPIO_DeInit+0xce>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a61      	ldr	r2, [pc, #388]	; (80049f0 <HAL_GPIO_DeInit+0x1f4>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d02b      	beq.n	80048c6 <HAL_GPIO_DeInit+0xca>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a60      	ldr	r2, [pc, #384]	; (80049f4 <HAL_GPIO_DeInit+0x1f8>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d025      	beq.n	80048c2 <HAL_GPIO_DeInit+0xc6>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a5f      	ldr	r2, [pc, #380]	; (80049f8 <HAL_GPIO_DeInit+0x1fc>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d01f      	beq.n	80048be <HAL_GPIO_DeInit+0xc2>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a5e      	ldr	r2, [pc, #376]	; (80049fc <HAL_GPIO_DeInit+0x200>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d019      	beq.n	80048ba <HAL_GPIO_DeInit+0xbe>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a5d      	ldr	r2, [pc, #372]	; (8004a00 <HAL_GPIO_DeInit+0x204>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d013      	beq.n	80048b6 <HAL_GPIO_DeInit+0xba>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a5c      	ldr	r2, [pc, #368]	; (8004a04 <HAL_GPIO_DeInit+0x208>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d00d      	beq.n	80048b2 <HAL_GPIO_DeInit+0xb6>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a5b      	ldr	r2, [pc, #364]	; (8004a08 <HAL_GPIO_DeInit+0x20c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d007      	beq.n	80048ae <HAL_GPIO_DeInit+0xb2>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a5a      	ldr	r2, [pc, #360]	; (8004a0c <HAL_GPIO_DeInit+0x210>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d101      	bne.n	80048aa <HAL_GPIO_DeInit+0xae>
 80048a6:	2309      	movs	r3, #9
 80048a8:	e012      	b.n	80048d0 <HAL_GPIO_DeInit+0xd4>
 80048aa:	230a      	movs	r3, #10
 80048ac:	e010      	b.n	80048d0 <HAL_GPIO_DeInit+0xd4>
 80048ae:	2308      	movs	r3, #8
 80048b0:	e00e      	b.n	80048d0 <HAL_GPIO_DeInit+0xd4>
 80048b2:	2307      	movs	r3, #7
 80048b4:	e00c      	b.n	80048d0 <HAL_GPIO_DeInit+0xd4>
 80048b6:	2306      	movs	r3, #6
 80048b8:	e00a      	b.n	80048d0 <HAL_GPIO_DeInit+0xd4>
 80048ba:	2305      	movs	r3, #5
 80048bc:	e008      	b.n	80048d0 <HAL_GPIO_DeInit+0xd4>
 80048be:	2304      	movs	r3, #4
 80048c0:	e006      	b.n	80048d0 <HAL_GPIO_DeInit+0xd4>
 80048c2:	2303      	movs	r3, #3
 80048c4:	e004      	b.n	80048d0 <HAL_GPIO_DeInit+0xd4>
 80048c6:	2302      	movs	r3, #2
 80048c8:	e002      	b.n	80048d0 <HAL_GPIO_DeInit+0xd4>
 80048ca:	2301      	movs	r3, #1
 80048cc:	e000      	b.n	80048d0 <HAL_GPIO_DeInit+0xd4>
 80048ce:	2300      	movs	r3, #0
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	f002 0203 	and.w	r2, r2, #3
 80048d6:	0092      	lsls	r2, r2, #2
 80048d8:	4093      	lsls	r3, r2
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d132      	bne.n	8004946 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80048e0:	4b4b      	ldr	r3, [pc, #300]	; (8004a10 <HAL_GPIO_DeInit+0x214>)
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	43db      	mvns	r3, r3
 80048e8:	4949      	ldr	r1, [pc, #292]	; (8004a10 <HAL_GPIO_DeInit+0x214>)
 80048ea:	4013      	ands	r3, r2
 80048ec:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80048ee:	4b48      	ldr	r3, [pc, #288]	; (8004a10 <HAL_GPIO_DeInit+0x214>)
 80048f0:	685a      	ldr	r2, [r3, #4]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	43db      	mvns	r3, r3
 80048f6:	4946      	ldr	r1, [pc, #280]	; (8004a10 <HAL_GPIO_DeInit+0x214>)
 80048f8:	4013      	ands	r3, r2
 80048fa:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80048fc:	4b44      	ldr	r3, [pc, #272]	; (8004a10 <HAL_GPIO_DeInit+0x214>)
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	43db      	mvns	r3, r3
 8004904:	4942      	ldr	r1, [pc, #264]	; (8004a10 <HAL_GPIO_DeInit+0x214>)
 8004906:	4013      	ands	r3, r2
 8004908:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800490a:	4b41      	ldr	r3, [pc, #260]	; (8004a10 <HAL_GPIO_DeInit+0x214>)
 800490c:	689a      	ldr	r2, [r3, #8]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	43db      	mvns	r3, r3
 8004912:	493f      	ldr	r1, [pc, #252]	; (8004a10 <HAL_GPIO_DeInit+0x214>)
 8004914:	4013      	ands	r3, r2
 8004916:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	f003 0303 	and.w	r3, r3, #3
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	220f      	movs	r2, #15
 8004922:	fa02 f303 	lsl.w	r3, r2, r3
 8004926:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004928:	4a2e      	ldr	r2, [pc, #184]	; (80049e4 <HAL_GPIO_DeInit+0x1e8>)
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	089b      	lsrs	r3, r3, #2
 800492e:	3302      	adds	r3, #2
 8004930:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	43da      	mvns	r2, r3
 8004938:	482a      	ldr	r0, [pc, #168]	; (80049e4 <HAL_GPIO_DeInit+0x1e8>)
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	089b      	lsrs	r3, r3, #2
 800493e:	400a      	ands	r2, r1
 8004940:	3302      	adds	r3, #2
 8004942:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	005b      	lsls	r3, r3, #1
 800494e:	2103      	movs	r1, #3
 8004950:	fa01 f303 	lsl.w	r3, r1, r3
 8004954:	43db      	mvns	r3, r3
 8004956:	401a      	ands	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	08da      	lsrs	r2, r3, #3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	3208      	adds	r2, #8
 8004964:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f003 0307 	and.w	r3, r3, #7
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	220f      	movs	r2, #15
 8004972:	fa02 f303 	lsl.w	r3, r2, r3
 8004976:	43db      	mvns	r3, r3
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	08d2      	lsrs	r2, r2, #3
 800497c:	4019      	ands	r1, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	3208      	adds	r2, #8
 8004982:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68da      	ldr	r2, [r3, #12]
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	2103      	movs	r1, #3
 8004990:	fa01 f303 	lsl.w	r3, r1, r3
 8004994:	43db      	mvns	r3, r3
 8004996:	401a      	ands	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	2101      	movs	r1, #1
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	fa01 f303 	lsl.w	r3, r1, r3
 80049a8:	43db      	mvns	r3, r3
 80049aa:	401a      	ands	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689a      	ldr	r2, [r3, #8]
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	005b      	lsls	r3, r3, #1
 80049b8:	2103      	movs	r1, #3
 80049ba:	fa01 f303 	lsl.w	r3, r1, r3
 80049be:	43db      	mvns	r3, r3
 80049c0:	401a      	ands	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	3301      	adds	r3, #1
 80049ca:	617b      	str	r3, [r7, #20]
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	2b0f      	cmp	r3, #15
 80049d0:	f67f af22 	bls.w	8004818 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80049d4:	bf00      	nop
 80049d6:	bf00      	nop
 80049d8:	371c      	adds	r7, #28
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	40013800 	.word	0x40013800
 80049e8:	40020000 	.word	0x40020000
 80049ec:	40020400 	.word	0x40020400
 80049f0:	40020800 	.word	0x40020800
 80049f4:	40020c00 	.word	0x40020c00
 80049f8:	40021000 	.word	0x40021000
 80049fc:	40021400 	.word	0x40021400
 8004a00:	40021800 	.word	0x40021800
 8004a04:	40021c00 	.word	0x40021c00
 8004a08:	40022000 	.word	0x40022000
 8004a0c:	40022400 	.word	0x40022400
 8004a10:	40013c00 	.word	0x40013c00

08004a14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	691a      	ldr	r2, [r3, #16]
 8004a24:	887b      	ldrh	r3, [r7, #2]
 8004a26:	4013      	ands	r3, r2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d002      	beq.n	8004a32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	73fb      	strb	r3, [r7, #15]
 8004a30:	e001      	b.n	8004a36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a32:	2300      	movs	r3, #0
 8004a34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	807b      	strh	r3, [r7, #2]
 8004a50:	4613      	mov	r3, r2
 8004a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a54:	787b      	ldrb	r3, [r7, #1]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a5a:	887a      	ldrh	r2, [r7, #2]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a60:	e003      	b.n	8004a6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a62:	887b      	ldrh	r3, [r7, #2]
 8004a64:	041a      	lsls	r2, r3, #16
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	619a      	str	r2, [r3, #24]
}
 8004a6a:	bf00      	nop
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004a76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a78:	b08f      	sub	sp, #60	; 0x3c
 8004a7a:	af0a      	add	r7, sp, #40	; 0x28
 8004a7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e054      	b.n	8004b32 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d106      	bne.n	8004aa8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f00b feca 	bl	801083c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2203      	movs	r2, #3
 8004aac:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d102      	bne.n	8004ac2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f005 f9c8 	bl	8009e5c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	603b      	str	r3, [r7, #0]
 8004ad2:	687e      	ldr	r6, [r7, #4]
 8004ad4:	466d      	mov	r5, sp
 8004ad6:	f106 0410 	add.w	r4, r6, #16
 8004ada:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004adc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ade:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ae0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ae2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ae6:	e885 0003 	stmia.w	r5, {r0, r1}
 8004aea:	1d33      	adds	r3, r6, #4
 8004aec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004aee:	6838      	ldr	r0, [r7, #0]
 8004af0:	f005 f942 	bl	8009d78 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2101      	movs	r1, #1
 8004afa:	4618      	mov	r0, r3
 8004afc:	f005 f9bf 	bl	8009e7e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	603b      	str	r3, [r7, #0]
 8004b06:	687e      	ldr	r6, [r7, #4]
 8004b08:	466d      	mov	r5, sp
 8004b0a:	f106 0410 	add.w	r4, r6, #16
 8004b0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b1e:	1d33      	adds	r3, r6, #4
 8004b20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b22:	6838      	ldr	r0, [r7, #0]
 8004b24:	f005 fb48 	bl	800a1b8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3714      	adds	r7, #20
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b3a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004b3a:	b590      	push	{r4, r7, lr}
 8004b3c:	b089      	sub	sp, #36	; 0x24
 8004b3e:	af04      	add	r7, sp, #16
 8004b40:	6078      	str	r0, [r7, #4]
 8004b42:	4608      	mov	r0, r1
 8004b44:	4611      	mov	r1, r2
 8004b46:	461a      	mov	r2, r3
 8004b48:	4603      	mov	r3, r0
 8004b4a:	70fb      	strb	r3, [r7, #3]
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	70bb      	strb	r3, [r7, #2]
 8004b50:	4613      	mov	r3, r2
 8004b52:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d101      	bne.n	8004b62 <HAL_HCD_HC_Init+0x28>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	e076      	b.n	8004c50 <HAL_HCD_HC_Init+0x116>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8004b6a:	78fb      	ldrb	r3, [r7, #3]
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	212c      	movs	r1, #44	; 0x2c
 8004b70:	fb01 f303 	mul.w	r3, r1, r3
 8004b74:	4413      	add	r3, r2
 8004b76:	333d      	adds	r3, #61	; 0x3d
 8004b78:	2200      	movs	r2, #0
 8004b7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004b7c:	78fb      	ldrb	r3, [r7, #3]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	212c      	movs	r1, #44	; 0x2c
 8004b82:	fb01 f303 	mul.w	r3, r1, r3
 8004b86:	4413      	add	r3, r2
 8004b88:	3338      	adds	r3, #56	; 0x38
 8004b8a:	787a      	ldrb	r2, [r7, #1]
 8004b8c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004b8e:	78fb      	ldrb	r3, [r7, #3]
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	212c      	movs	r1, #44	; 0x2c
 8004b94:	fb01 f303 	mul.w	r3, r1, r3
 8004b98:	4413      	add	r3, r2
 8004b9a:	3340      	adds	r3, #64	; 0x40
 8004b9c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004b9e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004ba0:	78fb      	ldrb	r3, [r7, #3]
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	212c      	movs	r1, #44	; 0x2c
 8004ba6:	fb01 f303 	mul.w	r3, r1, r3
 8004baa:	4413      	add	r3, r2
 8004bac:	3339      	adds	r3, #57	; 0x39
 8004bae:	78fa      	ldrb	r2, [r7, #3]
 8004bb0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004bb2:	78fb      	ldrb	r3, [r7, #3]
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	212c      	movs	r1, #44	; 0x2c
 8004bb8:	fb01 f303 	mul.w	r3, r1, r3
 8004bbc:	4413      	add	r3, r2
 8004bbe:	333f      	adds	r3, #63	; 0x3f
 8004bc0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004bc4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004bc6:	78fb      	ldrb	r3, [r7, #3]
 8004bc8:	78ba      	ldrb	r2, [r7, #2]
 8004bca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004bce:	b2d0      	uxtb	r0, r2
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	212c      	movs	r1, #44	; 0x2c
 8004bd4:	fb01 f303 	mul.w	r3, r1, r3
 8004bd8:	4413      	add	r3, r2
 8004bda:	333a      	adds	r3, #58	; 0x3a
 8004bdc:	4602      	mov	r2, r0
 8004bde:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004be0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	da09      	bge.n	8004bfc <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004be8:	78fb      	ldrb	r3, [r7, #3]
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	212c      	movs	r1, #44	; 0x2c
 8004bee:	fb01 f303 	mul.w	r3, r1, r3
 8004bf2:	4413      	add	r3, r2
 8004bf4:	333b      	adds	r3, #59	; 0x3b
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	701a      	strb	r2, [r3, #0]
 8004bfa:	e008      	b.n	8004c0e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004bfc:	78fb      	ldrb	r3, [r7, #3]
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	212c      	movs	r1, #44	; 0x2c
 8004c02:	fb01 f303 	mul.w	r3, r1, r3
 8004c06:	4413      	add	r3, r2
 8004c08:	333b      	adds	r3, #59	; 0x3b
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004c0e:	78fb      	ldrb	r3, [r7, #3]
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	212c      	movs	r1, #44	; 0x2c
 8004c14:	fb01 f303 	mul.w	r3, r1, r3
 8004c18:	4413      	add	r3, r2
 8004c1a:	333c      	adds	r3, #60	; 0x3c
 8004c1c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004c20:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6818      	ldr	r0, [r3, #0]
 8004c26:	787c      	ldrb	r4, [r7, #1]
 8004c28:	78ba      	ldrb	r2, [r7, #2]
 8004c2a:	78f9      	ldrb	r1, [r7, #3]
 8004c2c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004c2e:	9302      	str	r3, [sp, #8]
 8004c30:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004c34:	9301      	str	r3, [sp, #4]
 8004c36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004c3a:	9300      	str	r3, [sp, #0]
 8004c3c:	4623      	mov	r3, r4
 8004c3e:	f005 fc41 	bl	800a4c4 <USB_HC_Init>
 8004c42:	4603      	mov	r3, r0
 8004c44:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3714      	adds	r7, #20
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd90      	pop	{r4, r7, pc}

08004c58 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	460b      	mov	r3, r1
 8004c62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004c64:	2300      	movs	r3, #0
 8004c66:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d101      	bne.n	8004c76 <HAL_HCD_HC_Halt+0x1e>
 8004c72:	2302      	movs	r3, #2
 8004c74:	e00f      	b.n	8004c96 <HAL_HCD_HC_Halt+0x3e>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	78fa      	ldrb	r2, [r7, #3]
 8004c84:	4611      	mov	r1, r2
 8004c86:	4618      	mov	r0, r3
 8004c88:	f005 fe91 	bl	800a9ae <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
	...

08004ca0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	4608      	mov	r0, r1
 8004caa:	4611      	mov	r1, r2
 8004cac:	461a      	mov	r2, r3
 8004cae:	4603      	mov	r3, r0
 8004cb0:	70fb      	strb	r3, [r7, #3]
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	70bb      	strb	r3, [r7, #2]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004cba:	78fb      	ldrb	r3, [r7, #3]
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	212c      	movs	r1, #44	; 0x2c
 8004cc0:	fb01 f303 	mul.w	r3, r1, r3
 8004cc4:	4413      	add	r3, r2
 8004cc6:	333b      	adds	r3, #59	; 0x3b
 8004cc8:	78ba      	ldrb	r2, [r7, #2]
 8004cca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004ccc:	78fb      	ldrb	r3, [r7, #3]
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	212c      	movs	r1, #44	; 0x2c
 8004cd2:	fb01 f303 	mul.w	r3, r1, r3
 8004cd6:	4413      	add	r3, r2
 8004cd8:	333f      	adds	r3, #63	; 0x3f
 8004cda:	787a      	ldrb	r2, [r7, #1]
 8004cdc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004cde:	7c3b      	ldrb	r3, [r7, #16]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d112      	bne.n	8004d0a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004ce4:	78fb      	ldrb	r3, [r7, #3]
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	212c      	movs	r1, #44	; 0x2c
 8004cea:	fb01 f303 	mul.w	r3, r1, r3
 8004cee:	4413      	add	r3, r2
 8004cf0:	3342      	adds	r3, #66	; 0x42
 8004cf2:	2203      	movs	r2, #3
 8004cf4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004cf6:	78fb      	ldrb	r3, [r7, #3]
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	212c      	movs	r1, #44	; 0x2c
 8004cfc:	fb01 f303 	mul.w	r3, r1, r3
 8004d00:	4413      	add	r3, r2
 8004d02:	333d      	adds	r3, #61	; 0x3d
 8004d04:	7f3a      	ldrb	r2, [r7, #28]
 8004d06:	701a      	strb	r2, [r3, #0]
 8004d08:	e008      	b.n	8004d1c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004d0a:	78fb      	ldrb	r3, [r7, #3]
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	212c      	movs	r1, #44	; 0x2c
 8004d10:	fb01 f303 	mul.w	r3, r1, r3
 8004d14:	4413      	add	r3, r2
 8004d16:	3342      	adds	r3, #66	; 0x42
 8004d18:	2202      	movs	r2, #2
 8004d1a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004d1c:	787b      	ldrb	r3, [r7, #1]
 8004d1e:	2b03      	cmp	r3, #3
 8004d20:	f200 80c6 	bhi.w	8004eb0 <HAL_HCD_HC_SubmitRequest+0x210>
 8004d24:	a201      	add	r2, pc, #4	; (adr r2, 8004d2c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8004d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2a:	bf00      	nop
 8004d2c:	08004d3d 	.word	0x08004d3d
 8004d30:	08004e9d 	.word	0x08004e9d
 8004d34:	08004da1 	.word	0x08004da1
 8004d38:	08004e1f 	.word	0x08004e1f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004d3c:	7c3b      	ldrb	r3, [r7, #16]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	f040 80b8 	bne.w	8004eb4 <HAL_HCD_HC_SubmitRequest+0x214>
 8004d44:	78bb      	ldrb	r3, [r7, #2]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f040 80b4 	bne.w	8004eb4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8004d4c:	8b3b      	ldrh	r3, [r7, #24]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d108      	bne.n	8004d64 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004d52:	78fb      	ldrb	r3, [r7, #3]
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	212c      	movs	r1, #44	; 0x2c
 8004d58:	fb01 f303 	mul.w	r3, r1, r3
 8004d5c:	4413      	add	r3, r2
 8004d5e:	3355      	adds	r3, #85	; 0x55
 8004d60:	2201      	movs	r2, #1
 8004d62:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004d64:	78fb      	ldrb	r3, [r7, #3]
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	212c      	movs	r1, #44	; 0x2c
 8004d6a:	fb01 f303 	mul.w	r3, r1, r3
 8004d6e:	4413      	add	r3, r2
 8004d70:	3355      	adds	r3, #85	; 0x55
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d109      	bne.n	8004d8c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004d78:	78fb      	ldrb	r3, [r7, #3]
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	212c      	movs	r1, #44	; 0x2c
 8004d7e:	fb01 f303 	mul.w	r3, r1, r3
 8004d82:	4413      	add	r3, r2
 8004d84:	3342      	adds	r3, #66	; 0x42
 8004d86:	2200      	movs	r2, #0
 8004d88:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004d8a:	e093      	b.n	8004eb4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004d8c:	78fb      	ldrb	r3, [r7, #3]
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	212c      	movs	r1, #44	; 0x2c
 8004d92:	fb01 f303 	mul.w	r3, r1, r3
 8004d96:	4413      	add	r3, r2
 8004d98:	3342      	adds	r3, #66	; 0x42
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	701a      	strb	r2, [r3, #0]
      break;
 8004d9e:	e089      	b.n	8004eb4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004da0:	78bb      	ldrb	r3, [r7, #2]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d11d      	bne.n	8004de2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004da6:	78fb      	ldrb	r3, [r7, #3]
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	212c      	movs	r1, #44	; 0x2c
 8004dac:	fb01 f303 	mul.w	r3, r1, r3
 8004db0:	4413      	add	r3, r2
 8004db2:	3355      	adds	r3, #85	; 0x55
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d109      	bne.n	8004dce <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004dba:	78fb      	ldrb	r3, [r7, #3]
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	212c      	movs	r1, #44	; 0x2c
 8004dc0:	fb01 f303 	mul.w	r3, r1, r3
 8004dc4:	4413      	add	r3, r2
 8004dc6:	3342      	adds	r3, #66	; 0x42
 8004dc8:	2200      	movs	r2, #0
 8004dca:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004dcc:	e073      	b.n	8004eb6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004dce:	78fb      	ldrb	r3, [r7, #3]
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	212c      	movs	r1, #44	; 0x2c
 8004dd4:	fb01 f303 	mul.w	r3, r1, r3
 8004dd8:	4413      	add	r3, r2
 8004dda:	3342      	adds	r3, #66	; 0x42
 8004ddc:	2202      	movs	r2, #2
 8004dde:	701a      	strb	r2, [r3, #0]
      break;
 8004de0:	e069      	b.n	8004eb6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004de2:	78fb      	ldrb	r3, [r7, #3]
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	212c      	movs	r1, #44	; 0x2c
 8004de8:	fb01 f303 	mul.w	r3, r1, r3
 8004dec:	4413      	add	r3, r2
 8004dee:	3354      	adds	r3, #84	; 0x54
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d109      	bne.n	8004e0a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004df6:	78fb      	ldrb	r3, [r7, #3]
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	212c      	movs	r1, #44	; 0x2c
 8004dfc:	fb01 f303 	mul.w	r3, r1, r3
 8004e00:	4413      	add	r3, r2
 8004e02:	3342      	adds	r3, #66	; 0x42
 8004e04:	2200      	movs	r2, #0
 8004e06:	701a      	strb	r2, [r3, #0]
      break;
 8004e08:	e055      	b.n	8004eb6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e0a:	78fb      	ldrb	r3, [r7, #3]
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	212c      	movs	r1, #44	; 0x2c
 8004e10:	fb01 f303 	mul.w	r3, r1, r3
 8004e14:	4413      	add	r3, r2
 8004e16:	3342      	adds	r3, #66	; 0x42
 8004e18:	2202      	movs	r2, #2
 8004e1a:	701a      	strb	r2, [r3, #0]
      break;
 8004e1c:	e04b      	b.n	8004eb6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004e1e:	78bb      	ldrb	r3, [r7, #2]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d11d      	bne.n	8004e60 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004e24:	78fb      	ldrb	r3, [r7, #3]
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	212c      	movs	r1, #44	; 0x2c
 8004e2a:	fb01 f303 	mul.w	r3, r1, r3
 8004e2e:	4413      	add	r3, r2
 8004e30:	3355      	adds	r3, #85	; 0x55
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d109      	bne.n	8004e4c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004e38:	78fb      	ldrb	r3, [r7, #3]
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	212c      	movs	r1, #44	; 0x2c
 8004e3e:	fb01 f303 	mul.w	r3, r1, r3
 8004e42:	4413      	add	r3, r2
 8004e44:	3342      	adds	r3, #66	; 0x42
 8004e46:	2200      	movs	r2, #0
 8004e48:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004e4a:	e034      	b.n	8004eb6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e4c:	78fb      	ldrb	r3, [r7, #3]
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	212c      	movs	r1, #44	; 0x2c
 8004e52:	fb01 f303 	mul.w	r3, r1, r3
 8004e56:	4413      	add	r3, r2
 8004e58:	3342      	adds	r3, #66	; 0x42
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	701a      	strb	r2, [r3, #0]
      break;
 8004e5e:	e02a      	b.n	8004eb6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004e60:	78fb      	ldrb	r3, [r7, #3]
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	212c      	movs	r1, #44	; 0x2c
 8004e66:	fb01 f303 	mul.w	r3, r1, r3
 8004e6a:	4413      	add	r3, r2
 8004e6c:	3354      	adds	r3, #84	; 0x54
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d109      	bne.n	8004e88 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004e74:	78fb      	ldrb	r3, [r7, #3]
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	212c      	movs	r1, #44	; 0x2c
 8004e7a:	fb01 f303 	mul.w	r3, r1, r3
 8004e7e:	4413      	add	r3, r2
 8004e80:	3342      	adds	r3, #66	; 0x42
 8004e82:	2200      	movs	r2, #0
 8004e84:	701a      	strb	r2, [r3, #0]
      break;
 8004e86:	e016      	b.n	8004eb6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e88:	78fb      	ldrb	r3, [r7, #3]
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	212c      	movs	r1, #44	; 0x2c
 8004e8e:	fb01 f303 	mul.w	r3, r1, r3
 8004e92:	4413      	add	r3, r2
 8004e94:	3342      	adds	r3, #66	; 0x42
 8004e96:	2202      	movs	r2, #2
 8004e98:	701a      	strb	r2, [r3, #0]
      break;
 8004e9a:	e00c      	b.n	8004eb6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004e9c:	78fb      	ldrb	r3, [r7, #3]
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	212c      	movs	r1, #44	; 0x2c
 8004ea2:	fb01 f303 	mul.w	r3, r1, r3
 8004ea6:	4413      	add	r3, r2
 8004ea8:	3342      	adds	r3, #66	; 0x42
 8004eaa:	2200      	movs	r2, #0
 8004eac:	701a      	strb	r2, [r3, #0]
      break;
 8004eae:	e002      	b.n	8004eb6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004eb0:	bf00      	nop
 8004eb2:	e000      	b.n	8004eb6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004eb4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004eb6:	78fb      	ldrb	r3, [r7, #3]
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	212c      	movs	r1, #44	; 0x2c
 8004ebc:	fb01 f303 	mul.w	r3, r1, r3
 8004ec0:	4413      	add	r3, r2
 8004ec2:	3344      	adds	r3, #68	; 0x44
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004ec8:	78fb      	ldrb	r3, [r7, #3]
 8004eca:	8b3a      	ldrh	r2, [r7, #24]
 8004ecc:	6879      	ldr	r1, [r7, #4]
 8004ece:	202c      	movs	r0, #44	; 0x2c
 8004ed0:	fb00 f303 	mul.w	r3, r0, r3
 8004ed4:	440b      	add	r3, r1
 8004ed6:	334c      	adds	r3, #76	; 0x4c
 8004ed8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004eda:	78fb      	ldrb	r3, [r7, #3]
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	212c      	movs	r1, #44	; 0x2c
 8004ee0:	fb01 f303 	mul.w	r3, r1, r3
 8004ee4:	4413      	add	r3, r2
 8004ee6:	3360      	adds	r3, #96	; 0x60
 8004ee8:	2200      	movs	r2, #0
 8004eea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004eec:	78fb      	ldrb	r3, [r7, #3]
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	212c      	movs	r1, #44	; 0x2c
 8004ef2:	fb01 f303 	mul.w	r3, r1, r3
 8004ef6:	4413      	add	r3, r2
 8004ef8:	3350      	adds	r3, #80	; 0x50
 8004efa:	2200      	movs	r2, #0
 8004efc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004efe:	78fb      	ldrb	r3, [r7, #3]
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	212c      	movs	r1, #44	; 0x2c
 8004f04:	fb01 f303 	mul.w	r3, r1, r3
 8004f08:	4413      	add	r3, r2
 8004f0a:	3339      	adds	r3, #57	; 0x39
 8004f0c:	78fa      	ldrb	r2, [r7, #3]
 8004f0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004f10:	78fb      	ldrb	r3, [r7, #3]
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	212c      	movs	r1, #44	; 0x2c
 8004f16:	fb01 f303 	mul.w	r3, r1, r3
 8004f1a:	4413      	add	r3, r2
 8004f1c:	3361      	adds	r3, #97	; 0x61
 8004f1e:	2200      	movs	r2, #0
 8004f20:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6818      	ldr	r0, [r3, #0]
 8004f26:	78fb      	ldrb	r3, [r7, #3]
 8004f28:	222c      	movs	r2, #44	; 0x2c
 8004f2a:	fb02 f303 	mul.w	r3, r2, r3
 8004f2e:	3338      	adds	r3, #56	; 0x38
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	18d1      	adds	r1, r2, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	f005 fbe4 	bl	800a708 <USB_HC_StartXfer>
 8004f40:	4603      	mov	r3, r0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop

08004f4c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f005 f8e5 	bl	800a132 <USB_GetMode>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	f040 80f6 	bne.w	800515c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f005 f8c9 	bl	800a10c <USB_ReadInterrupts>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 80ec 	beq.w	800515a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f005 f8c0 	bl	800a10c <USB_ReadInterrupts>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f96:	d104      	bne.n	8004fa2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004fa0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f005 f8b0 	bl	800a10c <USB_ReadInterrupts>
 8004fac:	4603      	mov	r3, r0
 8004fae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fb6:	d104      	bne.n	8004fc2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004fc0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f005 f8a0 	bl	800a10c <USB_ReadInterrupts>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fd2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fd6:	d104      	bne.n	8004fe2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004fe0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f005 f890 	bl	800a10c <USB_ReadInterrupts>
 8004fec:	4603      	mov	r3, r0
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d103      	bne.n	8004ffe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4618      	mov	r0, r3
 8005004:	f005 f882 	bl	800a10c <USB_ReadInterrupts>
 8005008:	4603      	mov	r3, r0
 800500a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800500e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005012:	d11c      	bne.n	800504e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800501c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10f      	bne.n	800504e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800502e:	2110      	movs	r1, #16
 8005030:	6938      	ldr	r0, [r7, #16]
 8005032:	f004 ff71 	bl	8009f18 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8005036:	6938      	ldr	r0, [r7, #16]
 8005038:	f004 ffa2 	bl	8009f80 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2101      	movs	r1, #1
 8005042:	4618      	mov	r0, r3
 8005044:	f005 f978 	bl	800a338 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f00b fc71 	bl	8010930 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4618      	mov	r0, r3
 8005054:	f005 f85a 	bl	800a10c <USB_ReadInterrupts>
 8005058:	4603      	mov	r3, r0
 800505a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800505e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005062:	d102      	bne.n	800506a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f001 f89e 	bl	80061a6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4618      	mov	r0, r3
 8005070:	f005 f84c 	bl	800a10c <USB_ReadInterrupts>
 8005074:	4603      	mov	r3, r0
 8005076:	f003 0308 	and.w	r3, r3, #8
 800507a:	2b08      	cmp	r3, #8
 800507c:	d106      	bne.n	800508c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f00b fc3a 	bl	80108f8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2208      	movs	r2, #8
 800508a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4618      	mov	r0, r3
 8005092:	f005 f83b 	bl	800a10c <USB_ReadInterrupts>
 8005096:	4603      	mov	r3, r0
 8005098:	f003 0310 	and.w	r3, r3, #16
 800509c:	2b10      	cmp	r3, #16
 800509e:	d101      	bne.n	80050a4 <HAL_HCD_IRQHandler+0x158>
 80050a0:	2301      	movs	r3, #1
 80050a2:	e000      	b.n	80050a6 <HAL_HCD_IRQHandler+0x15a>
 80050a4:	2300      	movs	r3, #0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d012      	beq.n	80050d0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	699a      	ldr	r2, [r3, #24]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 0210 	bic.w	r2, r2, #16
 80050b8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 ffa1 	bl	8006002 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	699a      	ldr	r2, [r3, #24]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0210 	orr.w	r2, r2, #16
 80050ce:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f005 f819 	bl	800a10c <USB_ReadInterrupts>
 80050da:	4603      	mov	r3, r0
 80050dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80050e4:	d13a      	bne.n	800515c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f005 fc4e 	bl	800a98c <USB_HC_ReadInterrupt>
 80050f0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80050f2:	2300      	movs	r3, #0
 80050f4:	617b      	str	r3, [r7, #20]
 80050f6:	e025      	b.n	8005144 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f003 030f 	and.w	r3, r3, #15
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	fa22 f303 	lsr.w	r3, r2, r3
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	2b00      	cmp	r3, #0
 800510a:	d018      	beq.n	800513e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	015a      	lsls	r2, r3, #5
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4413      	add	r3, r2
 8005114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800511e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005122:	d106      	bne.n	8005132 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	b2db      	uxtb	r3, r3
 8005128:	4619      	mov	r1, r3
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f8ab 	bl	8005286 <HCD_HC_IN_IRQHandler>
 8005130:	e005      	b.n	800513e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	b2db      	uxtb	r3, r3
 8005136:	4619      	mov	r1, r3
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f000 fbf9 	bl	8005930 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	3301      	adds	r3, #1
 8005142:	617b      	str	r3, [r7, #20]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	429a      	cmp	r2, r3
 800514c:	d3d4      	bcc.n	80050f8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005156:	615a      	str	r2, [r3, #20]
 8005158:	e000      	b.n	800515c <HAL_HCD_IRQHandler+0x210>
      return;
 800515a:	bf00      	nop
    }
  }
}
 800515c:	3718      	adds	r7, #24
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b082      	sub	sp, #8
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005170:	2b01      	cmp	r3, #1
 8005172:	d101      	bne.n	8005178 <HAL_HCD_Start+0x16>
 8005174:	2302      	movs	r3, #2
 8005176:	e013      	b.n	80051a0 <HAL_HCD_Start+0x3e>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2101      	movs	r1, #1
 8005186:	4618      	mov	r0, r3
 8005188:	f005 f93a 	bl	800a400 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4618      	mov	r0, r3
 8005192:	f004 fe52 	bl	8009e3a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d101      	bne.n	80051be <HAL_HCD_Stop+0x16>
 80051ba:	2302      	movs	r3, #2
 80051bc:	e00d      	b.n	80051da <HAL_HCD_Stop+0x32>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f005 fd28 	bl	800ac20 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b082      	sub	sp, #8
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f005 f8dc 	bl	800a3ac <USB_ResetPort>
 80051f4:	4603      	mov	r3, r0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80051fe:	b480      	push	{r7}
 8005200:	b083      	sub	sp, #12
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
 8005206:	460b      	mov	r3, r1
 8005208:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800520a:	78fb      	ldrb	r3, [r7, #3]
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	212c      	movs	r1, #44	; 0x2c
 8005210:	fb01 f303 	mul.w	r3, r1, r3
 8005214:	4413      	add	r3, r2
 8005216:	3360      	adds	r3, #96	; 0x60
 8005218:	781b      	ldrb	r3, [r3, #0]
}
 800521a:	4618      	mov	r0, r3
 800521c:	370c      	adds	r7, #12
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005226:	b480      	push	{r7}
 8005228:	b083      	sub	sp, #12
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
 800522e:	460b      	mov	r3, r1
 8005230:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005232:	78fb      	ldrb	r3, [r7, #3]
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	212c      	movs	r1, #44	; 0x2c
 8005238:	fb01 f303 	mul.w	r3, r1, r3
 800523c:	4413      	add	r3, r2
 800523e:	3350      	adds	r3, #80	; 0x50
 8005240:	681b      	ldr	r3, [r3, #0]
}
 8005242:	4618      	mov	r0, r3
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b082      	sub	sp, #8
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4618      	mov	r0, r3
 800525c:	f005 f920 	bl	800a4a0 <USB_GetCurrentFrame>
 8005260:	4603      	mov	r3, r0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3708      	adds	r7, #8
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}

0800526a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b082      	sub	sp, #8
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4618      	mov	r0, r3
 8005278:	f005 f8fb 	bl	800a472 <USB_GetHostSpeed>
 800527c:	4603      	mov	r3, r0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b086      	sub	sp, #24
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
 800528e:	460b      	mov	r3, r1
 8005290:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800529c:	78fb      	ldrb	r3, [r7, #3]
 800529e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f003 0304 	and.w	r3, r3, #4
 80052b2:	2b04      	cmp	r3, #4
 80052b4:	d11a      	bne.n	80052ec <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	015a      	lsls	r2, r3, #5
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	4413      	add	r3, r2
 80052be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052c2:	461a      	mov	r2, r3
 80052c4:	2304      	movs	r3, #4
 80052c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	212c      	movs	r1, #44	; 0x2c
 80052ce:	fb01 f303 	mul.w	r3, r1, r3
 80052d2:	4413      	add	r3, r2
 80052d4:	3361      	adds	r3, #97	; 0x61
 80052d6:	2206      	movs	r2, #6
 80052d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	b2d2      	uxtb	r2, r2
 80052e2:	4611      	mov	r1, r2
 80052e4:	4618      	mov	r0, r3
 80052e6:	f005 fb62 	bl	800a9ae <USB_HC_Halt>
 80052ea:	e0af      	b.n	800544c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	015a      	lsls	r2, r3, #5
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005302:	d11b      	bne.n	800533c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	4413      	add	r3, r2
 800530c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005310:	461a      	mov	r2, r3
 8005312:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005316:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	212c      	movs	r1, #44	; 0x2c
 800531e:	fb01 f303 	mul.w	r3, r1, r3
 8005322:	4413      	add	r3, r2
 8005324:	3361      	adds	r3, #97	; 0x61
 8005326:	2207      	movs	r2, #7
 8005328:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	b2d2      	uxtb	r2, r2
 8005332:	4611      	mov	r1, r2
 8005334:	4618      	mov	r0, r3
 8005336:	f005 fb3a 	bl	800a9ae <USB_HC_Halt>
 800533a:	e087      	b.n	800544c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	4413      	add	r3, r2
 8005344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f003 0320 	and.w	r3, r3, #32
 800534e:	2b20      	cmp	r3, #32
 8005350:	d109      	bne.n	8005366 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	015a      	lsls	r2, r3, #5
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	4413      	add	r3, r2
 800535a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800535e:	461a      	mov	r2, r3
 8005360:	2320      	movs	r3, #32
 8005362:	6093      	str	r3, [r2, #8]
 8005364:	e072      	b.n	800544c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	015a      	lsls	r2, r3, #5
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	4413      	add	r3, r2
 800536e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f003 0308 	and.w	r3, r3, #8
 8005378:	2b08      	cmp	r3, #8
 800537a:	d11a      	bne.n	80053b2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	4413      	add	r3, r2
 8005384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005388:	461a      	mov	r2, r3
 800538a:	2308      	movs	r3, #8
 800538c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	212c      	movs	r1, #44	; 0x2c
 8005394:	fb01 f303 	mul.w	r3, r1, r3
 8005398:	4413      	add	r3, r2
 800539a:	3361      	adds	r3, #97	; 0x61
 800539c:	2205      	movs	r2, #5
 800539e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	b2d2      	uxtb	r2, r2
 80053a8:	4611      	mov	r1, r2
 80053aa:	4618      	mov	r0, r3
 80053ac:	f005 faff 	bl	800a9ae <USB_HC_Halt>
 80053b0:	e04c      	b.n	800544c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	015a      	lsls	r2, r3, #5
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	4413      	add	r3, r2
 80053ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053c8:	d11b      	bne.n	8005402 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	015a      	lsls	r2, r3, #5
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	4413      	add	r3, r2
 80053d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d6:	461a      	mov	r2, r3
 80053d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	212c      	movs	r1, #44	; 0x2c
 80053e4:	fb01 f303 	mul.w	r3, r1, r3
 80053e8:	4413      	add	r3, r2
 80053ea:	3361      	adds	r3, #97	; 0x61
 80053ec:	2208      	movs	r2, #8
 80053ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	b2d2      	uxtb	r2, r2
 80053f8:	4611      	mov	r1, r2
 80053fa:	4618      	mov	r0, r3
 80053fc:	f005 fad7 	bl	800a9ae <USB_HC_Halt>
 8005400:	e024      	b.n	800544c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	015a      	lsls	r2, r3, #5
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	4413      	add	r3, r2
 800540a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005414:	2b80      	cmp	r3, #128	; 0x80
 8005416:	d119      	bne.n	800544c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	015a      	lsls	r2, r3, #5
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	4413      	add	r3, r2
 8005420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005424:	461a      	mov	r2, r3
 8005426:	2380      	movs	r3, #128	; 0x80
 8005428:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	212c      	movs	r1, #44	; 0x2c
 8005430:	fb01 f303 	mul.w	r3, r1, r3
 8005434:	4413      	add	r3, r2
 8005436:	3361      	adds	r3, #97	; 0x61
 8005438:	2206      	movs	r2, #6
 800543a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	b2d2      	uxtb	r2, r2
 8005444:	4611      	mov	r1, r2
 8005446:	4618      	mov	r0, r3
 8005448:	f005 fab1 	bl	800a9ae <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	4413      	add	r3, r2
 8005454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800545e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005462:	d112      	bne.n	800548a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	b2d2      	uxtb	r2, r2
 800546c:	4611      	mov	r1, r2
 800546e:	4618      	mov	r0, r3
 8005470:	f005 fa9d 	bl	800a9ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	4413      	add	r3, r2
 800547c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005480:	461a      	mov	r2, r3
 8005482:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005486:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005488:	e24e      	b.n	8005928 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	015a      	lsls	r2, r3, #5
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	4413      	add	r3, r2
 8005492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	2b01      	cmp	r3, #1
 800549e:	f040 80df 	bne.w	8005660 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d019      	beq.n	80054de <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	212c      	movs	r1, #44	; 0x2c
 80054b0:	fb01 f303 	mul.w	r3, r1, r3
 80054b4:	4413      	add	r3, r2
 80054b6:	3348      	adds	r3, #72	; 0x48
 80054b8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	0159      	lsls	r1, r3, #5
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	440b      	add	r3, r1
 80054c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80054cc:	1ad2      	subs	r2, r2, r3
 80054ce:	6879      	ldr	r1, [r7, #4]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	202c      	movs	r0, #44	; 0x2c
 80054d4:	fb00 f303 	mul.w	r3, r0, r3
 80054d8:	440b      	add	r3, r1
 80054da:	3350      	adds	r3, #80	; 0x50
 80054dc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	212c      	movs	r1, #44	; 0x2c
 80054e4:	fb01 f303 	mul.w	r3, r1, r3
 80054e8:	4413      	add	r3, r2
 80054ea:	3361      	adds	r3, #97	; 0x61
 80054ec:	2201      	movs	r2, #1
 80054ee:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	212c      	movs	r1, #44	; 0x2c
 80054f6:	fb01 f303 	mul.w	r3, r1, r3
 80054fa:	4413      	add	r3, r2
 80054fc:	335c      	adds	r3, #92	; 0x5c
 80054fe:	2200      	movs	r2, #0
 8005500:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	015a      	lsls	r2, r3, #5
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	4413      	add	r3, r2
 800550a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800550e:	461a      	mov	r2, r3
 8005510:	2301      	movs	r3, #1
 8005512:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	212c      	movs	r1, #44	; 0x2c
 800551a:	fb01 f303 	mul.w	r3, r1, r3
 800551e:	4413      	add	r3, r2
 8005520:	333f      	adds	r3, #63	; 0x3f
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d009      	beq.n	800553c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	212c      	movs	r1, #44	; 0x2c
 800552e:	fb01 f303 	mul.w	r3, r1, r3
 8005532:	4413      	add	r3, r2
 8005534:	333f      	adds	r3, #63	; 0x3f
 8005536:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005538:	2b02      	cmp	r3, #2
 800553a:	d111      	bne.n	8005560 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	b2d2      	uxtb	r2, r2
 8005544:	4611      	mov	r1, r2
 8005546:	4618      	mov	r0, r3
 8005548:	f005 fa31 	bl	800a9ae <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	015a      	lsls	r2, r3, #5
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	4413      	add	r3, r2
 8005554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005558:	461a      	mov	r2, r3
 800555a:	2310      	movs	r3, #16
 800555c:	6093      	str	r3, [r2, #8]
 800555e:	e03a      	b.n	80055d6 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	212c      	movs	r1, #44	; 0x2c
 8005566:	fb01 f303 	mul.w	r3, r1, r3
 800556a:	4413      	add	r3, r2
 800556c:	333f      	adds	r3, #63	; 0x3f
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	2b03      	cmp	r3, #3
 8005572:	d009      	beq.n	8005588 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	212c      	movs	r1, #44	; 0x2c
 800557a:	fb01 f303 	mul.w	r3, r1, r3
 800557e:	4413      	add	r3, r2
 8005580:	333f      	adds	r3, #63	; 0x3f
 8005582:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8005584:	2b01      	cmp	r3, #1
 8005586:	d126      	bne.n	80055d6 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	4413      	add	r3, r2
 8005590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	0151      	lsls	r1, r2, #5
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	440a      	add	r2, r1
 800559e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055a6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	212c      	movs	r1, #44	; 0x2c
 80055ae:	fb01 f303 	mul.w	r3, r1, r3
 80055b2:	4413      	add	r3, r2
 80055b4:	3360      	adds	r3, #96	; 0x60
 80055b6:	2201      	movs	r2, #1
 80055b8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	b2d9      	uxtb	r1, r3
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	202c      	movs	r0, #44	; 0x2c
 80055c4:	fb00 f303 	mul.w	r3, r0, r3
 80055c8:	4413      	add	r3, r2
 80055ca:	3360      	adds	r3, #96	; 0x60
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	461a      	mov	r2, r3
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f00b f9bb 	bl	801094c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d12b      	bne.n	8005636 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	212c      	movs	r1, #44	; 0x2c
 80055e4:	fb01 f303 	mul.w	r3, r1, r3
 80055e8:	4413      	add	r3, r2
 80055ea:	3348      	adds	r3, #72	; 0x48
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	6879      	ldr	r1, [r7, #4]
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	202c      	movs	r0, #44	; 0x2c
 80055f4:	fb00 f202 	mul.w	r2, r0, r2
 80055f8:	440a      	add	r2, r1
 80055fa:	3240      	adds	r2, #64	; 0x40
 80055fc:	8812      	ldrh	r2, [r2, #0]
 80055fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	f000 818e 	beq.w	8005928 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	212c      	movs	r1, #44	; 0x2c
 8005612:	fb01 f303 	mul.w	r3, r1, r3
 8005616:	4413      	add	r3, r2
 8005618:	3354      	adds	r3, #84	; 0x54
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	f083 0301 	eor.w	r3, r3, #1
 8005620:	b2d8      	uxtb	r0, r3
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	212c      	movs	r1, #44	; 0x2c
 8005628:	fb01 f303 	mul.w	r3, r1, r3
 800562c:	4413      	add	r3, r2
 800562e:	3354      	adds	r3, #84	; 0x54
 8005630:	4602      	mov	r2, r0
 8005632:	701a      	strb	r2, [r3, #0]
}
 8005634:	e178      	b.n	8005928 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	212c      	movs	r1, #44	; 0x2c
 800563c:	fb01 f303 	mul.w	r3, r1, r3
 8005640:	4413      	add	r3, r2
 8005642:	3354      	adds	r3, #84	; 0x54
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	f083 0301 	eor.w	r3, r3, #1
 800564a:	b2d8      	uxtb	r0, r3
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	212c      	movs	r1, #44	; 0x2c
 8005652:	fb01 f303 	mul.w	r3, r1, r3
 8005656:	4413      	add	r3, r2
 8005658:	3354      	adds	r3, #84	; 0x54
 800565a:	4602      	mov	r2, r0
 800565c:	701a      	strb	r2, [r3, #0]
}
 800565e:	e163      	b.n	8005928 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	015a      	lsls	r2, r3, #5
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	4413      	add	r3, r2
 8005668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b02      	cmp	r3, #2
 8005674:	f040 80f6 	bne.w	8005864 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	212c      	movs	r1, #44	; 0x2c
 800567e:	fb01 f303 	mul.w	r3, r1, r3
 8005682:	4413      	add	r3, r2
 8005684:	3361      	adds	r3, #97	; 0x61
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d109      	bne.n	80056a0 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	212c      	movs	r1, #44	; 0x2c
 8005692:	fb01 f303 	mul.w	r3, r1, r3
 8005696:	4413      	add	r3, r2
 8005698:	3360      	adds	r3, #96	; 0x60
 800569a:	2201      	movs	r2, #1
 800569c:	701a      	strb	r2, [r3, #0]
 800569e:	e0c9      	b.n	8005834 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	212c      	movs	r1, #44	; 0x2c
 80056a6:	fb01 f303 	mul.w	r3, r1, r3
 80056aa:	4413      	add	r3, r2
 80056ac:	3361      	adds	r3, #97	; 0x61
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	2b05      	cmp	r3, #5
 80056b2:	d109      	bne.n	80056c8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	212c      	movs	r1, #44	; 0x2c
 80056ba:	fb01 f303 	mul.w	r3, r1, r3
 80056be:	4413      	add	r3, r2
 80056c0:	3360      	adds	r3, #96	; 0x60
 80056c2:	2205      	movs	r2, #5
 80056c4:	701a      	strb	r2, [r3, #0]
 80056c6:	e0b5      	b.n	8005834 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	212c      	movs	r1, #44	; 0x2c
 80056ce:	fb01 f303 	mul.w	r3, r1, r3
 80056d2:	4413      	add	r3, r2
 80056d4:	3361      	adds	r3, #97	; 0x61
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	2b06      	cmp	r3, #6
 80056da:	d009      	beq.n	80056f0 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	212c      	movs	r1, #44	; 0x2c
 80056e2:	fb01 f303 	mul.w	r3, r1, r3
 80056e6:	4413      	add	r3, r2
 80056e8:	3361      	adds	r3, #97	; 0x61
 80056ea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	d150      	bne.n	8005792 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	212c      	movs	r1, #44	; 0x2c
 80056f6:	fb01 f303 	mul.w	r3, r1, r3
 80056fa:	4413      	add	r3, r2
 80056fc:	335c      	adds	r3, #92	; 0x5c
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	1c5a      	adds	r2, r3, #1
 8005702:	6879      	ldr	r1, [r7, #4]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	202c      	movs	r0, #44	; 0x2c
 8005708:	fb00 f303 	mul.w	r3, r0, r3
 800570c:	440b      	add	r3, r1
 800570e:	335c      	adds	r3, #92	; 0x5c
 8005710:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	212c      	movs	r1, #44	; 0x2c
 8005718:	fb01 f303 	mul.w	r3, r1, r3
 800571c:	4413      	add	r3, r2
 800571e:	335c      	adds	r3, #92	; 0x5c
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2b02      	cmp	r3, #2
 8005724:	d912      	bls.n	800574c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	212c      	movs	r1, #44	; 0x2c
 800572c:	fb01 f303 	mul.w	r3, r1, r3
 8005730:	4413      	add	r3, r2
 8005732:	335c      	adds	r3, #92	; 0x5c
 8005734:	2200      	movs	r2, #0
 8005736:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	212c      	movs	r1, #44	; 0x2c
 800573e:	fb01 f303 	mul.w	r3, r1, r3
 8005742:	4413      	add	r3, r2
 8005744:	3360      	adds	r3, #96	; 0x60
 8005746:	2204      	movs	r2, #4
 8005748:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800574a:	e073      	b.n	8005834 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	212c      	movs	r1, #44	; 0x2c
 8005752:	fb01 f303 	mul.w	r3, r1, r3
 8005756:	4413      	add	r3, r2
 8005758:	3360      	adds	r3, #96	; 0x60
 800575a:	2202      	movs	r2, #2
 800575c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	015a      	lsls	r2, r3, #5
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	4413      	add	r3, r2
 8005766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005774:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800577c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	015a      	lsls	r2, r3, #5
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	4413      	add	r3, r2
 8005786:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800578a:	461a      	mov	r2, r3
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005790:	e050      	b.n	8005834 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	212c      	movs	r1, #44	; 0x2c
 8005798:	fb01 f303 	mul.w	r3, r1, r3
 800579c:	4413      	add	r3, r2
 800579e:	3361      	adds	r3, #97	; 0x61
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	2b03      	cmp	r3, #3
 80057a4:	d122      	bne.n	80057ec <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	212c      	movs	r1, #44	; 0x2c
 80057ac:	fb01 f303 	mul.w	r3, r1, r3
 80057b0:	4413      	add	r3, r2
 80057b2:	3360      	adds	r3, #96	; 0x60
 80057b4:	2202      	movs	r2, #2
 80057b6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	015a      	lsls	r2, r3, #5
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	4413      	add	r3, r2
 80057c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80057ce:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057d6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	015a      	lsls	r2, r3, #5
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	4413      	add	r3, r2
 80057e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057e4:	461a      	mov	r2, r3
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	6013      	str	r3, [r2, #0]
 80057ea:	e023      	b.n	8005834 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	212c      	movs	r1, #44	; 0x2c
 80057f2:	fb01 f303 	mul.w	r3, r1, r3
 80057f6:	4413      	add	r3, r2
 80057f8:	3361      	adds	r3, #97	; 0x61
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	2b07      	cmp	r3, #7
 80057fe:	d119      	bne.n	8005834 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	212c      	movs	r1, #44	; 0x2c
 8005806:	fb01 f303 	mul.w	r3, r1, r3
 800580a:	4413      	add	r3, r2
 800580c:	335c      	adds	r3, #92	; 0x5c
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	1c5a      	adds	r2, r3, #1
 8005812:	6879      	ldr	r1, [r7, #4]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	202c      	movs	r0, #44	; 0x2c
 8005818:	fb00 f303 	mul.w	r3, r0, r3
 800581c:	440b      	add	r3, r1
 800581e:	335c      	adds	r3, #92	; 0x5c
 8005820:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	212c      	movs	r1, #44	; 0x2c
 8005828:	fb01 f303 	mul.w	r3, r1, r3
 800582c:	4413      	add	r3, r2
 800582e:	3360      	adds	r3, #96	; 0x60
 8005830:	2204      	movs	r2, #4
 8005832:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	4413      	add	r3, r2
 800583c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005840:	461a      	mov	r2, r3
 8005842:	2302      	movs	r3, #2
 8005844:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	b2d9      	uxtb	r1, r3
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	202c      	movs	r0, #44	; 0x2c
 8005850:	fb00 f303 	mul.w	r3, r0, r3
 8005854:	4413      	add	r3, r2
 8005856:	3360      	adds	r3, #96	; 0x60
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	461a      	mov	r2, r3
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f00b f875 	bl	801094c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005862:	e061      	b.n	8005928 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	4413      	add	r3, r2
 800586c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f003 0310 	and.w	r3, r3, #16
 8005876:	2b10      	cmp	r3, #16
 8005878:	d156      	bne.n	8005928 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	212c      	movs	r1, #44	; 0x2c
 8005880:	fb01 f303 	mul.w	r3, r1, r3
 8005884:	4413      	add	r3, r2
 8005886:	333f      	adds	r3, #63	; 0x3f
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	2b03      	cmp	r3, #3
 800588c:	d111      	bne.n	80058b2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	212c      	movs	r1, #44	; 0x2c
 8005894:	fb01 f303 	mul.w	r3, r1, r3
 8005898:	4413      	add	r3, r2
 800589a:	335c      	adds	r3, #92	; 0x5c
 800589c:	2200      	movs	r2, #0
 800589e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	b2d2      	uxtb	r2, r2
 80058a8:	4611      	mov	r1, r2
 80058aa:	4618      	mov	r0, r3
 80058ac:	f005 f87f 	bl	800a9ae <USB_HC_Halt>
 80058b0:	e031      	b.n	8005916 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	212c      	movs	r1, #44	; 0x2c
 80058b8:	fb01 f303 	mul.w	r3, r1, r3
 80058bc:	4413      	add	r3, r2
 80058be:	333f      	adds	r3, #63	; 0x3f
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d009      	beq.n	80058da <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	212c      	movs	r1, #44	; 0x2c
 80058cc:	fb01 f303 	mul.w	r3, r1, r3
 80058d0:	4413      	add	r3, r2
 80058d2:	333f      	adds	r3, #63	; 0x3f
 80058d4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d11d      	bne.n	8005916 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	212c      	movs	r1, #44	; 0x2c
 80058e0:	fb01 f303 	mul.w	r3, r1, r3
 80058e4:	4413      	add	r3, r2
 80058e6:	335c      	adds	r3, #92	; 0x5c
 80058e8:	2200      	movs	r2, #0
 80058ea:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d110      	bne.n	8005916 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	212c      	movs	r1, #44	; 0x2c
 80058fa:	fb01 f303 	mul.w	r3, r1, r3
 80058fe:	4413      	add	r3, r2
 8005900:	3361      	adds	r3, #97	; 0x61
 8005902:	2203      	movs	r2, #3
 8005904:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	b2d2      	uxtb	r2, r2
 800590e:	4611      	mov	r1, r2
 8005910:	4618      	mov	r0, r3
 8005912:	f005 f84c 	bl	800a9ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	4413      	add	r3, r2
 800591e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005922:	461a      	mov	r2, r3
 8005924:	2310      	movs	r3, #16
 8005926:	6093      	str	r3, [r2, #8]
}
 8005928:	bf00      	nop
 800592a:	3718      	adds	r7, #24
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b088      	sub	sp, #32
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	460b      	mov	r3, r1
 800593a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8005946:	78fb      	ldrb	r3, [r7, #3]
 8005948:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	4413      	add	r3, r2
 8005952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f003 0304 	and.w	r3, r3, #4
 800595c:	2b04      	cmp	r3, #4
 800595e:	d11a      	bne.n	8005996 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	4413      	add	r3, r2
 8005968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800596c:	461a      	mov	r2, r3
 800596e:	2304      	movs	r3, #4
 8005970:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	212c      	movs	r1, #44	; 0x2c
 8005978:	fb01 f303 	mul.w	r3, r1, r3
 800597c:	4413      	add	r3, r2
 800597e:	3361      	adds	r3, #97	; 0x61
 8005980:	2206      	movs	r2, #6
 8005982:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	b2d2      	uxtb	r2, r2
 800598c:	4611      	mov	r1, r2
 800598e:	4618      	mov	r0, r3
 8005990:	f005 f80d 	bl	800a9ae <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8005994:	e331      	b.n	8005ffa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	4413      	add	r3, r2
 800599e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f003 0320 	and.w	r3, r3, #32
 80059a8:	2b20      	cmp	r3, #32
 80059aa:	d12e      	bne.n	8005a0a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	015a      	lsls	r2, r3, #5
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	4413      	add	r3, r2
 80059b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059b8:	461a      	mov	r2, r3
 80059ba:	2320      	movs	r3, #32
 80059bc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	212c      	movs	r1, #44	; 0x2c
 80059c4:	fb01 f303 	mul.w	r3, r1, r3
 80059c8:	4413      	add	r3, r2
 80059ca:	333d      	adds	r3, #61	; 0x3d
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	f040 8313 	bne.w	8005ffa <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	212c      	movs	r1, #44	; 0x2c
 80059da:	fb01 f303 	mul.w	r3, r1, r3
 80059de:	4413      	add	r3, r2
 80059e0:	333d      	adds	r3, #61	; 0x3d
 80059e2:	2200      	movs	r2, #0
 80059e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	212c      	movs	r1, #44	; 0x2c
 80059ec:	fb01 f303 	mul.w	r3, r1, r3
 80059f0:	4413      	add	r3, r2
 80059f2:	3360      	adds	r3, #96	; 0x60
 80059f4:	2202      	movs	r2, #2
 80059f6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	b2d2      	uxtb	r2, r2
 8005a00:	4611      	mov	r1, r2
 8005a02:	4618      	mov	r0, r3
 8005a04:	f004 ffd3 	bl	800a9ae <USB_HC_Halt>
}
 8005a08:	e2f7      	b.n	8005ffa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a20:	d112      	bne.n	8005a48 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	015a      	lsls	r2, r3, #5
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	4413      	add	r3, r2
 8005a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a2e:	461a      	mov	r2, r3
 8005a30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a34:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	b2d2      	uxtb	r2, r2
 8005a3e:	4611      	mov	r1, r2
 8005a40:	4618      	mov	r0, r3
 8005a42:	f004 ffb4 	bl	800a9ae <USB_HC_Halt>
}
 8005a46:	e2d8      	b.n	8005ffa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d140      	bne.n	8005ae0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	212c      	movs	r1, #44	; 0x2c
 8005a64:	fb01 f303 	mul.w	r3, r1, r3
 8005a68:	4413      	add	r3, r2
 8005a6a:	335c      	adds	r3, #92	; 0x5c
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	015a      	lsls	r2, r3, #5
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a82:	2b40      	cmp	r3, #64	; 0x40
 8005a84:	d111      	bne.n	8005aaa <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	212c      	movs	r1, #44	; 0x2c
 8005a8c:	fb01 f303 	mul.w	r3, r1, r3
 8005a90:	4413      	add	r3, r2
 8005a92:	333d      	adds	r3, #61	; 0x3d
 8005a94:	2201      	movs	r2, #1
 8005a96:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	2340      	movs	r3, #64	; 0x40
 8005aa8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	015a      	lsls	r2, r3, #5
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	2301      	movs	r3, #1
 8005aba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	212c      	movs	r1, #44	; 0x2c
 8005ac2:	fb01 f303 	mul.w	r3, r1, r3
 8005ac6:	4413      	add	r3, r2
 8005ac8:	3361      	adds	r3, #97	; 0x61
 8005aca:	2201      	movs	r2, #1
 8005acc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	b2d2      	uxtb	r2, r2
 8005ad6:	4611      	mov	r1, r2
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f004 ff68 	bl	800a9ae <USB_HC_Halt>
}
 8005ade:	e28c      	b.n	8005ffa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	015a      	lsls	r2, r3, #5
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af2:	2b40      	cmp	r3, #64	; 0x40
 8005af4:	d12c      	bne.n	8005b50 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	212c      	movs	r1, #44	; 0x2c
 8005afc:	fb01 f303 	mul.w	r3, r1, r3
 8005b00:	4413      	add	r3, r2
 8005b02:	3361      	adds	r3, #97	; 0x61
 8005b04:	2204      	movs	r2, #4
 8005b06:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	212c      	movs	r1, #44	; 0x2c
 8005b0e:	fb01 f303 	mul.w	r3, r1, r3
 8005b12:	4413      	add	r3, r2
 8005b14:	333d      	adds	r3, #61	; 0x3d
 8005b16:	2201      	movs	r2, #1
 8005b18:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	212c      	movs	r1, #44	; 0x2c
 8005b20:	fb01 f303 	mul.w	r3, r1, r3
 8005b24:	4413      	add	r3, r2
 8005b26:	335c      	adds	r3, #92	; 0x5c
 8005b28:	2200      	movs	r2, #0
 8005b2a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	b2d2      	uxtb	r2, r2
 8005b34:	4611      	mov	r1, r2
 8005b36:	4618      	mov	r0, r3
 8005b38:	f004 ff39 	bl	800a9ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	015a      	lsls	r2, r3, #5
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b48:	461a      	mov	r2, r3
 8005b4a:	2340      	movs	r3, #64	; 0x40
 8005b4c:	6093      	str	r3, [r2, #8]
}
 8005b4e:	e254      	b.n	8005ffa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	015a      	lsls	r2, r3, #5
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	f003 0308 	and.w	r3, r3, #8
 8005b62:	2b08      	cmp	r3, #8
 8005b64:	d11a      	bne.n	8005b9c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	015a      	lsls	r2, r3, #5
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b72:	461a      	mov	r2, r3
 8005b74:	2308      	movs	r3, #8
 8005b76:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	212c      	movs	r1, #44	; 0x2c
 8005b7e:	fb01 f303 	mul.w	r3, r1, r3
 8005b82:	4413      	add	r3, r2
 8005b84:	3361      	adds	r3, #97	; 0x61
 8005b86:	2205      	movs	r2, #5
 8005b88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	b2d2      	uxtb	r2, r2
 8005b92:	4611      	mov	r1, r2
 8005b94:	4618      	mov	r0, r3
 8005b96:	f004 ff0a 	bl	800a9ae <USB_HC_Halt>
}
 8005b9a:	e22e      	b.n	8005ffa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	015a      	lsls	r2, r3, #5
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f003 0310 	and.w	r3, r3, #16
 8005bae:	2b10      	cmp	r3, #16
 8005bb0:	d140      	bne.n	8005c34 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	212c      	movs	r1, #44	; 0x2c
 8005bb8:	fb01 f303 	mul.w	r3, r1, r3
 8005bbc:	4413      	add	r3, r2
 8005bbe:	335c      	adds	r3, #92	; 0x5c
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	212c      	movs	r1, #44	; 0x2c
 8005bca:	fb01 f303 	mul.w	r3, r1, r3
 8005bce:	4413      	add	r3, r2
 8005bd0:	3361      	adds	r3, #97	; 0x61
 8005bd2:	2203      	movs	r2, #3
 8005bd4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	212c      	movs	r1, #44	; 0x2c
 8005bdc:	fb01 f303 	mul.w	r3, r1, r3
 8005be0:	4413      	add	r3, r2
 8005be2:	333d      	adds	r3, #61	; 0x3d
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d112      	bne.n	8005c10 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	212c      	movs	r1, #44	; 0x2c
 8005bf0:	fb01 f303 	mul.w	r3, r1, r3
 8005bf4:	4413      	add	r3, r2
 8005bf6:	333c      	adds	r3, #60	; 0x3c
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d108      	bne.n	8005c10 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	212c      	movs	r1, #44	; 0x2c
 8005c04:	fb01 f303 	mul.w	r3, r1, r3
 8005c08:	4413      	add	r3, r2
 8005c0a:	333d      	adds	r3, #61	; 0x3d
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	b2d2      	uxtb	r2, r2
 8005c18:	4611      	mov	r1, r2
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f004 fec7 	bl	800a9ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	2310      	movs	r3, #16
 8005c30:	6093      	str	r3, [r2, #8]
}
 8005c32:	e1e2      	b.n	8005ffa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c46:	2b80      	cmp	r3, #128	; 0x80
 8005c48:	d164      	bne.n	8005d14 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d111      	bne.n	8005c76 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	212c      	movs	r1, #44	; 0x2c
 8005c58:	fb01 f303 	mul.w	r3, r1, r3
 8005c5c:	4413      	add	r3, r2
 8005c5e:	3361      	adds	r3, #97	; 0x61
 8005c60:	2206      	movs	r2, #6
 8005c62:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	b2d2      	uxtb	r2, r2
 8005c6c:	4611      	mov	r1, r2
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f004 fe9d 	bl	800a9ae <USB_HC_Halt>
 8005c74:	e044      	b.n	8005d00 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	212c      	movs	r1, #44	; 0x2c
 8005c7c:	fb01 f303 	mul.w	r3, r1, r3
 8005c80:	4413      	add	r3, r2
 8005c82:	335c      	adds	r3, #92	; 0x5c
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	1c5a      	adds	r2, r3, #1
 8005c88:	6879      	ldr	r1, [r7, #4]
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	202c      	movs	r0, #44	; 0x2c
 8005c8e:	fb00 f303 	mul.w	r3, r0, r3
 8005c92:	440b      	add	r3, r1
 8005c94:	335c      	adds	r3, #92	; 0x5c
 8005c96:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	212c      	movs	r1, #44	; 0x2c
 8005c9e:	fb01 f303 	mul.w	r3, r1, r3
 8005ca2:	4413      	add	r3, r2
 8005ca4:	335c      	adds	r3, #92	; 0x5c
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d920      	bls.n	8005cee <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	212c      	movs	r1, #44	; 0x2c
 8005cb2:	fb01 f303 	mul.w	r3, r1, r3
 8005cb6:	4413      	add	r3, r2
 8005cb8:	335c      	adds	r3, #92	; 0x5c
 8005cba:	2200      	movs	r2, #0
 8005cbc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	212c      	movs	r1, #44	; 0x2c
 8005cc4:	fb01 f303 	mul.w	r3, r1, r3
 8005cc8:	4413      	add	r3, r2
 8005cca:	3360      	adds	r3, #96	; 0x60
 8005ccc:	2204      	movs	r2, #4
 8005cce:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	b2d9      	uxtb	r1, r3
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	202c      	movs	r0, #44	; 0x2c
 8005cda:	fb00 f303 	mul.w	r3, r0, r3
 8005cde:	4413      	add	r3, r2
 8005ce0:	3360      	adds	r3, #96	; 0x60
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f00a fe30 	bl	801094c <HAL_HCD_HC_NotifyURBChange_Callback>
 8005cec:	e008      	b.n	8005d00 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	212c      	movs	r1, #44	; 0x2c
 8005cf4:	fb01 f303 	mul.w	r3, r1, r3
 8005cf8:	4413      	add	r3, r2
 8005cfa:	3360      	adds	r3, #96	; 0x60
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	2380      	movs	r3, #128	; 0x80
 8005d10:	6093      	str	r3, [r2, #8]
}
 8005d12:	e172      	b.n	8005ffa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d2a:	d11b      	bne.n	8005d64 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	212c      	movs	r1, #44	; 0x2c
 8005d32:	fb01 f303 	mul.w	r3, r1, r3
 8005d36:	4413      	add	r3, r2
 8005d38:	3361      	adds	r3, #97	; 0x61
 8005d3a:	2208      	movs	r2, #8
 8005d3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	b2d2      	uxtb	r2, r2
 8005d46:	4611      	mov	r1, r2
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f004 fe30 	bl	800a9ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d60:	6093      	str	r3, [r2, #8]
}
 8005d62:	e14a      	b.n	8005ffa <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	f040 813f 	bne.w	8005ffa <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	212c      	movs	r1, #44	; 0x2c
 8005d82:	fb01 f303 	mul.w	r3, r1, r3
 8005d86:	4413      	add	r3, r2
 8005d88:	3361      	adds	r3, #97	; 0x61
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d17d      	bne.n	8005e8c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	212c      	movs	r1, #44	; 0x2c
 8005d96:	fb01 f303 	mul.w	r3, r1, r3
 8005d9a:	4413      	add	r3, r2
 8005d9c:	3360      	adds	r3, #96	; 0x60
 8005d9e:	2201      	movs	r2, #1
 8005da0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	212c      	movs	r1, #44	; 0x2c
 8005da8:	fb01 f303 	mul.w	r3, r1, r3
 8005dac:	4413      	add	r3, r2
 8005dae:	333f      	adds	r3, #63	; 0x3f
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d00a      	beq.n	8005dcc <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	212c      	movs	r1, #44	; 0x2c
 8005dbc:	fb01 f303 	mul.w	r3, r1, r3
 8005dc0:	4413      	add	r3, r2
 8005dc2:	333f      	adds	r3, #63	; 0x3f
 8005dc4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005dc6:	2b03      	cmp	r3, #3
 8005dc8:	f040 8100 	bne.w	8005fcc <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d113      	bne.n	8005dfc <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	212c      	movs	r1, #44	; 0x2c
 8005dda:	fb01 f303 	mul.w	r3, r1, r3
 8005dde:	4413      	add	r3, r2
 8005de0:	3355      	adds	r3, #85	; 0x55
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	f083 0301 	eor.w	r3, r3, #1
 8005de8:	b2d8      	uxtb	r0, r3
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	212c      	movs	r1, #44	; 0x2c
 8005df0:	fb01 f303 	mul.w	r3, r1, r3
 8005df4:	4413      	add	r3, r2
 8005df6:	3355      	adds	r3, #85	; 0x55
 8005df8:	4602      	mov	r2, r0
 8005dfa:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	f040 80e3 	bne.w	8005fcc <HCD_HC_OUT_IRQHandler+0x69c>
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	212c      	movs	r1, #44	; 0x2c
 8005e0c:	fb01 f303 	mul.w	r3, r1, r3
 8005e10:	4413      	add	r3, r2
 8005e12:	334c      	adds	r3, #76	; 0x4c
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f000 80d8 	beq.w	8005fcc <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	212c      	movs	r1, #44	; 0x2c
 8005e22:	fb01 f303 	mul.w	r3, r1, r3
 8005e26:	4413      	add	r3, r2
 8005e28:	334c      	adds	r3, #76	; 0x4c
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	6879      	ldr	r1, [r7, #4]
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	202c      	movs	r0, #44	; 0x2c
 8005e32:	fb00 f202 	mul.w	r2, r0, r2
 8005e36:	440a      	add	r2, r1
 8005e38:	3240      	adds	r2, #64	; 0x40
 8005e3a:	8812      	ldrh	r2, [r2, #0]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	6879      	ldr	r1, [r7, #4]
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	202c      	movs	r0, #44	; 0x2c
 8005e46:	fb00 f202 	mul.w	r2, r0, r2
 8005e4a:	440a      	add	r2, r1
 8005e4c:	3240      	adds	r2, #64	; 0x40
 8005e4e:	8812      	ldrh	r2, [r2, #0]
 8005e50:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e54:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f003 0301 	and.w	r3, r3, #1
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 80b5 	beq.w	8005fcc <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	212c      	movs	r1, #44	; 0x2c
 8005e68:	fb01 f303 	mul.w	r3, r1, r3
 8005e6c:	4413      	add	r3, r2
 8005e6e:	3355      	adds	r3, #85	; 0x55
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	f083 0301 	eor.w	r3, r3, #1
 8005e76:	b2d8      	uxtb	r0, r3
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	212c      	movs	r1, #44	; 0x2c
 8005e7e:	fb01 f303 	mul.w	r3, r1, r3
 8005e82:	4413      	add	r3, r2
 8005e84:	3355      	adds	r3, #85	; 0x55
 8005e86:	4602      	mov	r2, r0
 8005e88:	701a      	strb	r2, [r3, #0]
 8005e8a:	e09f      	b.n	8005fcc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	212c      	movs	r1, #44	; 0x2c
 8005e92:	fb01 f303 	mul.w	r3, r1, r3
 8005e96:	4413      	add	r3, r2
 8005e98:	3361      	adds	r3, #97	; 0x61
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	2b03      	cmp	r3, #3
 8005e9e:	d109      	bne.n	8005eb4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	212c      	movs	r1, #44	; 0x2c
 8005ea6:	fb01 f303 	mul.w	r3, r1, r3
 8005eaa:	4413      	add	r3, r2
 8005eac:	3360      	adds	r3, #96	; 0x60
 8005eae:	2202      	movs	r2, #2
 8005eb0:	701a      	strb	r2, [r3, #0]
 8005eb2:	e08b      	b.n	8005fcc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	212c      	movs	r1, #44	; 0x2c
 8005eba:	fb01 f303 	mul.w	r3, r1, r3
 8005ebe:	4413      	add	r3, r2
 8005ec0:	3361      	adds	r3, #97	; 0x61
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	2b04      	cmp	r3, #4
 8005ec6:	d109      	bne.n	8005edc <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	212c      	movs	r1, #44	; 0x2c
 8005ece:	fb01 f303 	mul.w	r3, r1, r3
 8005ed2:	4413      	add	r3, r2
 8005ed4:	3360      	adds	r3, #96	; 0x60
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	701a      	strb	r2, [r3, #0]
 8005eda:	e077      	b.n	8005fcc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	212c      	movs	r1, #44	; 0x2c
 8005ee2:	fb01 f303 	mul.w	r3, r1, r3
 8005ee6:	4413      	add	r3, r2
 8005ee8:	3361      	adds	r3, #97	; 0x61
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	2b05      	cmp	r3, #5
 8005eee:	d109      	bne.n	8005f04 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	212c      	movs	r1, #44	; 0x2c
 8005ef6:	fb01 f303 	mul.w	r3, r1, r3
 8005efa:	4413      	add	r3, r2
 8005efc:	3360      	adds	r3, #96	; 0x60
 8005efe:	2205      	movs	r2, #5
 8005f00:	701a      	strb	r2, [r3, #0]
 8005f02:	e063      	b.n	8005fcc <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	212c      	movs	r1, #44	; 0x2c
 8005f0a:	fb01 f303 	mul.w	r3, r1, r3
 8005f0e:	4413      	add	r3, r2
 8005f10:	3361      	adds	r3, #97	; 0x61
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	2b06      	cmp	r3, #6
 8005f16:	d009      	beq.n	8005f2c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	212c      	movs	r1, #44	; 0x2c
 8005f1e:	fb01 f303 	mul.w	r3, r1, r3
 8005f22:	4413      	add	r3, r2
 8005f24:	3361      	adds	r3, #97	; 0x61
 8005f26:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005f28:	2b08      	cmp	r3, #8
 8005f2a:	d14f      	bne.n	8005fcc <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	212c      	movs	r1, #44	; 0x2c
 8005f32:	fb01 f303 	mul.w	r3, r1, r3
 8005f36:	4413      	add	r3, r2
 8005f38:	335c      	adds	r3, #92	; 0x5c
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	1c5a      	adds	r2, r3, #1
 8005f3e:	6879      	ldr	r1, [r7, #4]
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	202c      	movs	r0, #44	; 0x2c
 8005f44:	fb00 f303 	mul.w	r3, r0, r3
 8005f48:	440b      	add	r3, r1
 8005f4a:	335c      	adds	r3, #92	; 0x5c
 8005f4c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	212c      	movs	r1, #44	; 0x2c
 8005f54:	fb01 f303 	mul.w	r3, r1, r3
 8005f58:	4413      	add	r3, r2
 8005f5a:	335c      	adds	r3, #92	; 0x5c
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d912      	bls.n	8005f88 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	212c      	movs	r1, #44	; 0x2c
 8005f68:	fb01 f303 	mul.w	r3, r1, r3
 8005f6c:	4413      	add	r3, r2
 8005f6e:	335c      	adds	r3, #92	; 0x5c
 8005f70:	2200      	movs	r2, #0
 8005f72:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	212c      	movs	r1, #44	; 0x2c
 8005f7a:	fb01 f303 	mul.w	r3, r1, r3
 8005f7e:	4413      	add	r3, r2
 8005f80:	3360      	adds	r3, #96	; 0x60
 8005f82:	2204      	movs	r2, #4
 8005f84:	701a      	strb	r2, [r3, #0]
 8005f86:	e021      	b.n	8005fcc <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	212c      	movs	r1, #44	; 0x2c
 8005f8e:	fb01 f303 	mul.w	r3, r1, r3
 8005f92:	4413      	add	r3, r2
 8005f94:	3360      	adds	r3, #96	; 0x60
 8005f96:	2202      	movs	r2, #2
 8005f98:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	015a      	lsls	r2, r3, #5
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005fb0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fb8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	015a      	lsls	r2, r3, #5
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	015a      	lsls	r2, r3, #5
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd8:	461a      	mov	r2, r3
 8005fda:	2302      	movs	r3, #2
 8005fdc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	b2d9      	uxtb	r1, r3
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	202c      	movs	r0, #44	; 0x2c
 8005fe8:	fb00 f303 	mul.w	r3, r0, r3
 8005fec:	4413      	add	r3, r2
 8005fee:	3360      	adds	r3, #96	; 0x60
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f00a fca9 	bl	801094c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005ffa:	bf00      	nop
 8005ffc:	3720      	adds	r7, #32
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b08a      	sub	sp, #40	; 0x28
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006012:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	f003 030f 	and.w	r3, r3, #15
 8006022:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	0c5b      	lsrs	r3, r3, #17
 8006028:	f003 030f 	and.w	r3, r3, #15
 800602c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	091b      	lsrs	r3, r3, #4
 8006032:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006036:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	2b02      	cmp	r3, #2
 800603c:	d004      	beq.n	8006048 <HCD_RXQLVL_IRQHandler+0x46>
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	2b05      	cmp	r3, #5
 8006042:	f000 80a9 	beq.w	8006198 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006046:	e0aa      	b.n	800619e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	2b00      	cmp	r3, #0
 800604c:	f000 80a6 	beq.w	800619c <HCD_RXQLVL_IRQHandler+0x19a>
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	212c      	movs	r1, #44	; 0x2c
 8006056:	fb01 f303 	mul.w	r3, r1, r3
 800605a:	4413      	add	r3, r2
 800605c:	3344      	adds	r3, #68	; 0x44
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	f000 809b 	beq.w	800619c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	212c      	movs	r1, #44	; 0x2c
 800606c:	fb01 f303 	mul.w	r3, r1, r3
 8006070:	4413      	add	r3, r2
 8006072:	3350      	adds	r3, #80	; 0x50
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	441a      	add	r2, r3
 800607a:	6879      	ldr	r1, [r7, #4]
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	202c      	movs	r0, #44	; 0x2c
 8006080:	fb00 f303 	mul.w	r3, r0, r3
 8006084:	440b      	add	r3, r1
 8006086:	334c      	adds	r3, #76	; 0x4c
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	429a      	cmp	r2, r3
 800608c:	d87a      	bhi.n	8006184 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6818      	ldr	r0, [r3, #0]
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	212c      	movs	r1, #44	; 0x2c
 8006098:	fb01 f303 	mul.w	r3, r1, r3
 800609c:	4413      	add	r3, r2
 800609e:	3344      	adds	r3, #68	; 0x44
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	b292      	uxth	r2, r2
 80060a6:	4619      	mov	r1, r3
 80060a8:	f003 ffd8 	bl	800a05c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	212c      	movs	r1, #44	; 0x2c
 80060b2:	fb01 f303 	mul.w	r3, r1, r3
 80060b6:	4413      	add	r3, r2
 80060b8:	3344      	adds	r3, #68	; 0x44
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	441a      	add	r2, r3
 80060c0:	6879      	ldr	r1, [r7, #4]
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	202c      	movs	r0, #44	; 0x2c
 80060c6:	fb00 f303 	mul.w	r3, r0, r3
 80060ca:	440b      	add	r3, r1
 80060cc:	3344      	adds	r3, #68	; 0x44
 80060ce:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	212c      	movs	r1, #44	; 0x2c
 80060d6:	fb01 f303 	mul.w	r3, r1, r3
 80060da:	4413      	add	r3, r2
 80060dc:	3350      	adds	r3, #80	; 0x50
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	441a      	add	r2, r3
 80060e4:	6879      	ldr	r1, [r7, #4]
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	202c      	movs	r0, #44	; 0x2c
 80060ea:	fb00 f303 	mul.w	r3, r0, r3
 80060ee:	440b      	add	r3, r1
 80060f0:	3350      	adds	r3, #80	; 0x50
 80060f2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	015a      	lsls	r2, r3, #5
 80060f8:	6a3b      	ldr	r3, [r7, #32]
 80060fa:	4413      	add	r3, r2
 80060fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	0cdb      	lsrs	r3, r3, #19
 8006104:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006108:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	212c      	movs	r1, #44	; 0x2c
 8006110:	fb01 f303 	mul.w	r3, r1, r3
 8006114:	4413      	add	r3, r2
 8006116:	3340      	adds	r3, #64	; 0x40
 8006118:	881b      	ldrh	r3, [r3, #0]
 800611a:	461a      	mov	r2, r3
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	4293      	cmp	r3, r2
 8006120:	d13c      	bne.n	800619c <HCD_RXQLVL_IRQHandler+0x19a>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d039      	beq.n	800619c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	015a      	lsls	r2, r3, #5
 800612c:	6a3b      	ldr	r3, [r7, #32]
 800612e:	4413      	add	r3, r2
 8006130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800613e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006146:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	6a3b      	ldr	r3, [r7, #32]
 800614e:	4413      	add	r3, r2
 8006150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006154:	461a      	mov	r2, r3
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	212c      	movs	r1, #44	; 0x2c
 8006160:	fb01 f303 	mul.w	r3, r1, r3
 8006164:	4413      	add	r3, r2
 8006166:	3354      	adds	r3, #84	; 0x54
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	f083 0301 	eor.w	r3, r3, #1
 800616e:	b2d8      	uxtb	r0, r3
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	212c      	movs	r1, #44	; 0x2c
 8006176:	fb01 f303 	mul.w	r3, r1, r3
 800617a:	4413      	add	r3, r2
 800617c:	3354      	adds	r3, #84	; 0x54
 800617e:	4602      	mov	r2, r0
 8006180:	701a      	strb	r2, [r3, #0]
      break;
 8006182:	e00b      	b.n	800619c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	212c      	movs	r1, #44	; 0x2c
 800618a:	fb01 f303 	mul.w	r3, r1, r3
 800618e:	4413      	add	r3, r2
 8006190:	3360      	adds	r3, #96	; 0x60
 8006192:	2204      	movs	r2, #4
 8006194:	701a      	strb	r2, [r3, #0]
      break;
 8006196:	e001      	b.n	800619c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8006198:	bf00      	nop
 800619a:	e000      	b.n	800619e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800619c:	bf00      	nop
  }
}
 800619e:	bf00      	nop
 80061a0:	3728      	adds	r7, #40	; 0x28
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b086      	sub	sp, #24
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80061d2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f003 0302 	and.w	r3, r3, #2
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d10b      	bne.n	80061f6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d102      	bne.n	80061ee <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f00a fb93 	bl	8010914 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	f043 0302 	orr.w	r3, r3, #2
 80061f4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f003 0308 	and.w	r3, r3, #8
 80061fc:	2b08      	cmp	r3, #8
 80061fe:	d132      	bne.n	8006266 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	f043 0308 	orr.w	r3, r3, #8
 8006206:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f003 0304 	and.w	r3, r3, #4
 800620e:	2b04      	cmp	r3, #4
 8006210:	d126      	bne.n	8006260 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	2b02      	cmp	r3, #2
 8006218:	d113      	bne.n	8006242 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006220:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006224:	d106      	bne.n	8006234 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2102      	movs	r1, #2
 800622c:	4618      	mov	r0, r3
 800622e:	f004 f883 	bl	800a338 <USB_InitFSLSPClkSel>
 8006232:	e011      	b.n	8006258 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2101      	movs	r1, #1
 800623a:	4618      	mov	r0, r3
 800623c:	f004 f87c 	bl	800a338 <USB_InitFSLSPClkSel>
 8006240:	e00a      	b.n	8006258 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	2b01      	cmp	r3, #1
 8006248:	d106      	bne.n	8006258 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006250:	461a      	mov	r2, r3
 8006252:	f64e 2360 	movw	r3, #60000	; 0xea60
 8006256:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f00a fb89 	bl	8010970 <HAL_HCD_PortEnabled_Callback>
 800625e:	e002      	b.n	8006266 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f00a fb93 	bl	801098c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f003 0320 	and.w	r3, r3, #32
 800626c:	2b20      	cmp	r3, #32
 800626e:	d103      	bne.n	8006278 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	f043 0320 	orr.w	r3, r3, #32
 8006276:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800627e:	461a      	mov	r2, r3
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	6013      	str	r3, [r2, #0]
}
 8006284:	bf00      	nop
 8006286:	3718      	adds	r7, #24
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d101      	bne.n	800629e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e0bf      	b.n	800641e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d106      	bne.n	80062b8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7fa ffda 	bl	800126c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2202      	movs	r2, #2
 80062bc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	699a      	ldr	r2, [r3, #24]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80062ce:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6999      	ldr	r1, [r3, #24]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	685a      	ldr	r2, [r3, #4]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80062e4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	430a      	orrs	r2, r1
 80062f2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	6899      	ldr	r1, [r3, #8]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	4b4a      	ldr	r3, [pc, #296]	; (8006428 <HAL_LTDC_Init+0x19c>)
 8006300:	400b      	ands	r3, r1
 8006302:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	695b      	ldr	r3, [r3, #20]
 8006308:	041b      	lsls	r3, r3, #16
 800630a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	6899      	ldr	r1, [r3, #8]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	699a      	ldr	r2, [r3, #24]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	431a      	orrs	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	430a      	orrs	r2, r1
 8006320:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68d9      	ldr	r1, [r3, #12]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	4b3e      	ldr	r3, [pc, #248]	; (8006428 <HAL_LTDC_Init+0x19c>)
 800632e:	400b      	ands	r3, r1
 8006330:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	69db      	ldr	r3, [r3, #28]
 8006336:	041b      	lsls	r3, r3, #16
 8006338:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68d9      	ldr	r1, [r3, #12]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a1a      	ldr	r2, [r3, #32]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	431a      	orrs	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	430a      	orrs	r2, r1
 800634e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	6919      	ldr	r1, [r3, #16]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	4b33      	ldr	r3, [pc, #204]	; (8006428 <HAL_LTDC_Init+0x19c>)
 800635c:	400b      	ands	r3, r1
 800635e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006364:	041b      	lsls	r3, r3, #16
 8006366:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6919      	ldr	r1, [r3, #16]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	431a      	orrs	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	430a      	orrs	r2, r1
 800637c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6959      	ldr	r1, [r3, #20]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	4b27      	ldr	r3, [pc, #156]	; (8006428 <HAL_LTDC_Init+0x19c>)
 800638a:	400b      	ands	r3, r1
 800638c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006392:	041b      	lsls	r3, r3, #16
 8006394:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	6959      	ldr	r1, [r3, #20]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	431a      	orrs	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	430a      	orrs	r2, r1
 80063aa:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063b2:	021b      	lsls	r3, r3, #8
 80063b4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80063bc:	041b      	lsls	r3, r3, #16
 80063be:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80063ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	4313      	orrs	r3, r2
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80063e2:	431a      	orrs	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	430a      	orrs	r2, r1
 80063ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f042 0206 	orr.w	r2, r2, #6
 80063fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	699a      	ldr	r2, [r3, #24]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f042 0201 	orr.w	r2, r2, #1
 800640a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	f000f800 	.word	0xf000f800

0800642c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006442:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f003 0304 	and.w	r3, r3, #4
 800644a:	2b00      	cmp	r3, #0
 800644c:	d023      	beq.n	8006496 <HAL_LTDC_IRQHandler+0x6a>
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	f003 0304 	and.w	r3, r3, #4
 8006454:	2b00      	cmp	r3, #0
 8006456:	d01e      	beq.n	8006496 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f022 0204 	bic.w	r2, r2, #4
 8006466:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2204      	movs	r2, #4
 800646e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006476:	f043 0201 	orr.w	r2, r3, #1
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2204      	movs	r2, #4
 8006484:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f86f 	bl	8006574 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f003 0302 	and.w	r3, r3, #2
 800649c:	2b00      	cmp	r3, #0
 800649e:	d023      	beq.n	80064e8 <HAL_LTDC_IRQHandler+0xbc>
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	f003 0302 	and.w	r3, r3, #2
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d01e      	beq.n	80064e8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f022 0202 	bic.w	r2, r2, #2
 80064b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2202      	movs	r2, #2
 80064c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80064c8:	f043 0202 	orr.w	r2, r3, #2
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2204      	movs	r2, #4
 80064d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 f846 	bl	8006574 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d01b      	beq.n	800652a <HAL_LTDC_IRQHandler+0xfe>
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	f003 0301 	and.w	r3, r3, #1
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d016      	beq.n	800652a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f022 0201 	bic.w	r2, r2, #1
 800650a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2201      	movs	r2, #1
 8006512:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 f82f 	bl	8006588 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f003 0308 	and.w	r3, r3, #8
 8006530:	2b00      	cmp	r3, #0
 8006532:	d01b      	beq.n	800656c <HAL_LTDC_IRQHandler+0x140>
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	f003 0308 	and.w	r3, r3, #8
 800653a:	2b00      	cmp	r3, #0
 800653c:	d016      	beq.n	800656c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f022 0208 	bic.w	r2, r2, #8
 800654c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2208      	movs	r2, #8
 8006554:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f818 	bl	800659c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800656c:	bf00      	nop
 800656e:	3710      	adds	r7, #16
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80065b0:	b5b0      	push	{r4, r5, r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d101      	bne.n	80065ca <HAL_LTDC_ConfigLayer+0x1a>
 80065c6:	2302      	movs	r3, #2
 80065c8:	e02c      	b.n	8006624 <HAL_LTDC_ConfigLayer+0x74>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2201      	movs	r2, #1
 80065ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2202      	movs	r2, #2
 80065d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2134      	movs	r1, #52	; 0x34
 80065e0:	fb01 f303 	mul.w	r3, r1, r3
 80065e4:	4413      	add	r3, r2
 80065e6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	4614      	mov	r4, r2
 80065ee:	461d      	mov	r5, r3
 80065f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80065f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80065f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80065fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065fc:	682b      	ldr	r3, [r5, #0]
 80065fe:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	68b9      	ldr	r1, [r7, #8]
 8006604:	68f8      	ldr	r0, [r7, #12]
 8006606:	f000 f83b 	bl	8006680 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2201      	movs	r2, #1
 8006610:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3710      	adds	r7, #16
 8006628:	46bd      	mov	sp, r7
 800662a:	bdb0      	pop	{r4, r5, r7, pc}

0800662c <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800663a:	2b01      	cmp	r3, #1
 800663c:	d101      	bne.n	8006642 <HAL_LTDC_EnableDither+0x16>
 800663e:	2302      	movs	r3, #2
 8006640:	e016      	b.n	8006670 <HAL_LTDC_EnableDither+0x44>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2202      	movs	r2, #2
 800664e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8006652:	4b0a      	ldr	r3, [pc, #40]	; (800667c <HAL_LTDC_EnableDither+0x50>)
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	4a09      	ldr	r2, [pc, #36]	; (800667c <HAL_LTDC_EnableDither+0x50>)
 8006658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800665c:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr
 800667c:	40016800 	.word	0x40016800

08006680 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006680:	b480      	push	{r7}
 8006682:	b089      	sub	sp, #36	; 0x24
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	0c1b      	lsrs	r3, r3, #16
 8006698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800669c:	4413      	add	r3, r2
 800669e:	041b      	lsls	r3, r3, #16
 80066a0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	461a      	mov	r2, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	01db      	lsls	r3, r3, #7
 80066ac:	4413      	add	r3, r2
 80066ae:	3384      	adds	r3, #132	; 0x84
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	6812      	ldr	r2, [r2, #0]
 80066b6:	4611      	mov	r1, r2
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	01d2      	lsls	r2, r2, #7
 80066bc:	440a      	add	r2, r1
 80066be:	3284      	adds	r2, #132	; 0x84
 80066c0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80066c4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	0c1b      	lsrs	r3, r3, #16
 80066d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80066d6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80066d8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4619      	mov	r1, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	01db      	lsls	r3, r3, #7
 80066e4:	440b      	add	r3, r1
 80066e6:	3384      	adds	r3, #132	; 0x84
 80066e8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80066ee:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	68da      	ldr	r2, [r3, #12]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066fe:	4413      	add	r3, r2
 8006700:	041b      	lsls	r3, r3, #16
 8006702:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	461a      	mov	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	01db      	lsls	r3, r3, #7
 800670e:	4413      	add	r3, r2
 8006710:	3384      	adds	r3, #132	; 0x84
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	6812      	ldr	r2, [r2, #0]
 8006718:	4611      	mov	r1, r2
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	01d2      	lsls	r2, r2, #7
 800671e:	440a      	add	r2, r1
 8006720:	3284      	adds	r2, #132	; 0x84
 8006722:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006726:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	689a      	ldr	r2, [r3, #8]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006736:	4413      	add	r3, r2
 8006738:	1c5a      	adds	r2, r3, #1
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4619      	mov	r1, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	01db      	lsls	r3, r3, #7
 8006744:	440b      	add	r3, r1
 8006746:	3384      	adds	r3, #132	; 0x84
 8006748:	4619      	mov	r1, r3
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	4313      	orrs	r3, r2
 800674e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	461a      	mov	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	01db      	lsls	r3, r3, #7
 800675a:	4413      	add	r3, r2
 800675c:	3384      	adds	r3, #132	; 0x84
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	6812      	ldr	r2, [r2, #0]
 8006764:	4611      	mov	r1, r2
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	01d2      	lsls	r2, r2, #7
 800676a:	440a      	add	r2, r1
 800676c:	3284      	adds	r2, #132	; 0x84
 800676e:	f023 0307 	bic.w	r3, r3, #7
 8006772:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	461a      	mov	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	01db      	lsls	r3, r3, #7
 800677e:	4413      	add	r3, r2
 8006780:	3384      	adds	r3, #132	; 0x84
 8006782:	461a      	mov	r2, r3
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006790:	021b      	lsls	r3, r3, #8
 8006792:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800679a:	041b      	lsls	r3, r3, #16
 800679c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	061b      	lsls	r3, r3, #24
 80067a4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	461a      	mov	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	01db      	lsls	r3, r3, #7
 80067b0:	4413      	add	r3, r2
 80067b2:	3384      	adds	r3, #132	; 0x84
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	461a      	mov	r2, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	01db      	lsls	r3, r3, #7
 80067c0:	4413      	add	r3, r2
 80067c2:	3384      	adds	r3, #132	; 0x84
 80067c4:	461a      	mov	r2, r3
 80067c6:	2300      	movs	r3, #0
 80067c8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80067d0:	461a      	mov	r2, r3
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	431a      	orrs	r2, r3
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	431a      	orrs	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4619      	mov	r1, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	01db      	lsls	r3, r3, #7
 80067e4:	440b      	add	r3, r1
 80067e6:	3384      	adds	r3, #132	; 0x84
 80067e8:	4619      	mov	r1, r3
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	461a      	mov	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	01db      	lsls	r3, r3, #7
 80067fa:	4413      	add	r3, r2
 80067fc:	3384      	adds	r3, #132	; 0x84
 80067fe:	695b      	ldr	r3, [r3, #20]
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	6812      	ldr	r2, [r2, #0]
 8006804:	4611      	mov	r1, r2
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	01d2      	lsls	r2, r2, #7
 800680a:	440a      	add	r2, r1
 800680c:	3284      	adds	r2, #132	; 0x84
 800680e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006812:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	461a      	mov	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	01db      	lsls	r3, r3, #7
 800681e:	4413      	add	r3, r2
 8006820:	3384      	adds	r3, #132	; 0x84
 8006822:	461a      	mov	r2, r3
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	695b      	ldr	r3, [r3, #20]
 8006828:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	461a      	mov	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	01db      	lsls	r3, r3, #7
 8006834:	4413      	add	r3, r2
 8006836:	3384      	adds	r3, #132	; 0x84
 8006838:	69db      	ldr	r3, [r3, #28]
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	6812      	ldr	r2, [r2, #0]
 800683e:	4611      	mov	r1, r2
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	01d2      	lsls	r2, r2, #7
 8006844:	440a      	add	r2, r1
 8006846:	3284      	adds	r2, #132	; 0x84
 8006848:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800684c:	f023 0307 	bic.w	r3, r3, #7
 8006850:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	69da      	ldr	r2, [r3, #28]
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	6a1b      	ldr	r3, [r3, #32]
 800685a:	68f9      	ldr	r1, [r7, #12]
 800685c:	6809      	ldr	r1, [r1, #0]
 800685e:	4608      	mov	r0, r1
 8006860:	6879      	ldr	r1, [r7, #4]
 8006862:	01c9      	lsls	r1, r1, #7
 8006864:	4401      	add	r1, r0
 8006866:	3184      	adds	r1, #132	; 0x84
 8006868:	4313      	orrs	r3, r2
 800686a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	461a      	mov	r2, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	01db      	lsls	r3, r3, #7
 8006876:	4413      	add	r3, r2
 8006878:	3384      	adds	r3, #132	; 0x84
 800687a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	461a      	mov	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	01db      	lsls	r3, r3, #7
 8006886:	4413      	add	r3, r2
 8006888:	3384      	adds	r3, #132	; 0x84
 800688a:	461a      	mov	r2, r3
 800688c:	2300      	movs	r3, #0
 800688e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	461a      	mov	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	01db      	lsls	r3, r3, #7
 800689a:	4413      	add	r3, r2
 800689c:	3384      	adds	r3, #132	; 0x84
 800689e:	461a      	mov	r2, r3
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a4:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d102      	bne.n	80068b4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80068ae:	2304      	movs	r3, #4
 80068b0:	61fb      	str	r3, [r7, #28]
 80068b2:	e01b      	b.n	80068ec <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d102      	bne.n	80068c2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80068bc:	2303      	movs	r3, #3
 80068be:	61fb      	str	r3, [r7, #28]
 80068c0:	e014      	b.n	80068ec <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	2b04      	cmp	r3, #4
 80068c8:	d00b      	beq.n	80068e2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d007      	beq.n	80068e2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80068d6:	2b03      	cmp	r3, #3
 80068d8:	d003      	beq.n	80068e2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80068de:	2b07      	cmp	r3, #7
 80068e0:	d102      	bne.n	80068e8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80068e2:	2302      	movs	r3, #2
 80068e4:	61fb      	str	r3, [r7, #28]
 80068e6:	e001      	b.n	80068ec <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80068e8:	2301      	movs	r3, #1
 80068ea:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	461a      	mov	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	01db      	lsls	r3, r3, #7
 80068f6:	4413      	add	r3, r2
 80068f8:	3384      	adds	r3, #132	; 0x84
 80068fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	6812      	ldr	r2, [r2, #0]
 8006900:	4611      	mov	r1, r2
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	01d2      	lsls	r2, r2, #7
 8006906:	440a      	add	r2, r1
 8006908:	3284      	adds	r2, #132	; 0x84
 800690a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800690e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006914:	69fa      	ldr	r2, [r7, #28]
 8006916:	fb02 f303 	mul.w	r3, r2, r3
 800691a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	6859      	ldr	r1, [r3, #4]
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	1acb      	subs	r3, r1, r3
 8006926:	69f9      	ldr	r1, [r7, #28]
 8006928:	fb01 f303 	mul.w	r3, r1, r3
 800692c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800692e:	68f9      	ldr	r1, [r7, #12]
 8006930:	6809      	ldr	r1, [r1, #0]
 8006932:	4608      	mov	r0, r1
 8006934:	6879      	ldr	r1, [r7, #4]
 8006936:	01c9      	lsls	r1, r1, #7
 8006938:	4401      	add	r1, r0
 800693a:	3184      	adds	r1, #132	; 0x84
 800693c:	4313      	orrs	r3, r2
 800693e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	461a      	mov	r2, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	01db      	lsls	r3, r3, #7
 800694a:	4413      	add	r3, r2
 800694c:	3384      	adds	r3, #132	; 0x84
 800694e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	6812      	ldr	r2, [r2, #0]
 8006954:	4611      	mov	r1, r2
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	01d2      	lsls	r2, r2, #7
 800695a:	440a      	add	r2, r1
 800695c:	3284      	adds	r2, #132	; 0x84
 800695e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006962:	f023 0307 	bic.w	r3, r3, #7
 8006966:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	461a      	mov	r2, r3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	01db      	lsls	r3, r3, #7
 8006972:	4413      	add	r3, r2
 8006974:	3384      	adds	r3, #132	; 0x84
 8006976:	461a      	mov	r2, r3
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	461a      	mov	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	01db      	lsls	r3, r3, #7
 8006988:	4413      	add	r3, r2
 800698a:	3384      	adds	r3, #132	; 0x84
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	6812      	ldr	r2, [r2, #0]
 8006992:	4611      	mov	r1, r2
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	01d2      	lsls	r2, r2, #7
 8006998:	440a      	add	r2, r1
 800699a:	3284      	adds	r2, #132	; 0x84
 800699c:	f043 0301 	orr.w	r3, r3, #1
 80069a0:	6013      	str	r3, [r2, #0]
}
 80069a2:	bf00      	nop
 80069a4:	3724      	adds	r7, #36	; 0x24
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
	...

080069b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d101      	bne.n	80069c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e267      	b.n	8006e92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0301 	and.w	r3, r3, #1
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d075      	beq.n	8006aba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80069ce:	4b88      	ldr	r3, [pc, #544]	; (8006bf0 <HAL_RCC_OscConfig+0x240>)
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	f003 030c 	and.w	r3, r3, #12
 80069d6:	2b04      	cmp	r3, #4
 80069d8:	d00c      	beq.n	80069f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069da:	4b85      	ldr	r3, [pc, #532]	; (8006bf0 <HAL_RCC_OscConfig+0x240>)
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80069e2:	2b08      	cmp	r3, #8
 80069e4:	d112      	bne.n	8006a0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069e6:	4b82      	ldr	r3, [pc, #520]	; (8006bf0 <HAL_RCC_OscConfig+0x240>)
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069f2:	d10b      	bne.n	8006a0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069f4:	4b7e      	ldr	r3, [pc, #504]	; (8006bf0 <HAL_RCC_OscConfig+0x240>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d05b      	beq.n	8006ab8 <HAL_RCC_OscConfig+0x108>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d157      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e242      	b.n	8006e92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a14:	d106      	bne.n	8006a24 <HAL_RCC_OscConfig+0x74>
 8006a16:	4b76      	ldr	r3, [pc, #472]	; (8006bf0 <HAL_RCC_OscConfig+0x240>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a75      	ldr	r2, [pc, #468]	; (8006bf0 <HAL_RCC_OscConfig+0x240>)
 8006a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a20:	6013      	str	r3, [r2, #0]
 8006a22:	e01d      	b.n	8006a60 <HAL_RCC_OscConfig+0xb0>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a2c:	d10c      	bne.n	8006a48 <HAL_RCC_OscConfig+0x98>
 8006a2e:	4b70      	ldr	r3, [pc, #448]	; (8006bf0 <HAL_RCC_OscConfig+0x240>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a6f      	ldr	r2, [pc, #444]	; (8006bf0 <HAL_RCC_OscConfig+0x240>)
 8006a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a38:	6013      	str	r3, [r2, #0]
 8006a3a:	4b6d      	ldr	r3, [pc, #436]	; (8006bf0 <HAL_RCC_OscConfig+0x240>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a6c      	ldr	r2, [pc, #432]	; (8006bf0 <HAL_RCC_OscConfig+0x240>)
 8006a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a44:	6013      	str	r3, [r2, #0]
 8006a46:	e00b      	b.n	8006a60 <HAL_RCC_OscConfig+0xb0>
 8006a48:	4b69      	ldr	r3, [pc, #420]	; (8006bf0 <HAL_RCC_OscConfig+0x240>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a68      	ldr	r2, [pc, #416]	; (8006bf0 <HAL_RCC_OscConfig+0x240>)
 8006a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a52:	6013      	str	r3, [r2, #0]
 8006a54:	4b66      	ldr	r3, [pc, #408]	; (8006bf0 <HAL_RCC_OscConfig+0x240>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a65      	ldr	r2, [pc, #404]	; (8006bf0 <HAL_RCC_OscConfig+0x240>)
 8006a5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d013      	beq.n	8006a90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a68:	f7fc fe1e 	bl	80036a8 <HAL_GetTick>
 8006a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a6e:	e008      	b.n	8006a82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a70:	f7fc fe1a 	bl	80036a8 <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	2b64      	cmp	r3, #100	; 0x64
 8006a7c:	d901      	bls.n	8006a82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	e207      	b.n	8006e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a82:	4b5b      	ldr	r3, [pc, #364]	; (8006bf0 <HAL_RCC_OscConfig+0x240>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d0f0      	beq.n	8006a70 <HAL_RCC_OscConfig+0xc0>
 8006a8e:	e014      	b.n	8006aba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a90:	f7fc fe0a 	bl	80036a8 <HAL_GetTick>
 8006a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a96:	e008      	b.n	8006aaa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006a98:	f7fc fe06 	bl	80036a8 <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	2b64      	cmp	r3, #100	; 0x64
 8006aa4:	d901      	bls.n	8006aaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e1f3      	b.n	8006e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006aaa:	4b51      	ldr	r3, [pc, #324]	; (8006bf0 <HAL_RCC_OscConfig+0x240>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1f0      	bne.n	8006a98 <HAL_RCC_OscConfig+0xe8>
 8006ab6:	e000      	b.n	8006aba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ab8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 0302 	and.w	r3, r3, #2
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d063      	beq.n	8006b8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ac6:	4b4a      	ldr	r3, [pc, #296]	; (8006bf0 <HAL_RCC_OscConfig+0x240>)
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	f003 030c 	and.w	r3, r3, #12
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00b      	beq.n	8006aea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ad2:	4b47      	ldr	r3, [pc, #284]	; (8006bf0 <HAL_RCC_OscConfig+0x240>)
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ada:	2b08      	cmp	r3, #8
 8006adc:	d11c      	bne.n	8006b18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ade:	4b44      	ldr	r3, [pc, #272]	; (8006bf0 <HAL_RCC_OscConfig+0x240>)
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d116      	bne.n	8006b18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006aea:	4b41      	ldr	r3, [pc, #260]	; (8006bf0 <HAL_RCC_OscConfig+0x240>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0302 	and.w	r3, r3, #2
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d005      	beq.n	8006b02 <HAL_RCC_OscConfig+0x152>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d001      	beq.n	8006b02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e1c7      	b.n	8006e92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b02:	4b3b      	ldr	r3, [pc, #236]	; (8006bf0 <HAL_RCC_OscConfig+0x240>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	00db      	lsls	r3, r3, #3
 8006b10:	4937      	ldr	r1, [pc, #220]	; (8006bf0 <HAL_RCC_OscConfig+0x240>)
 8006b12:	4313      	orrs	r3, r2
 8006b14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b16:	e03a      	b.n	8006b8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d020      	beq.n	8006b62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b20:	4b34      	ldr	r3, [pc, #208]	; (8006bf4 <HAL_RCC_OscConfig+0x244>)
 8006b22:	2201      	movs	r2, #1
 8006b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b26:	f7fc fdbf 	bl	80036a8 <HAL_GetTick>
 8006b2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b2c:	e008      	b.n	8006b40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b2e:	f7fc fdbb 	bl	80036a8 <HAL_GetTick>
 8006b32:	4602      	mov	r2, r0
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d901      	bls.n	8006b40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	e1a8      	b.n	8006e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b40:	4b2b      	ldr	r3, [pc, #172]	; (8006bf0 <HAL_RCC_OscConfig+0x240>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 0302 	and.w	r3, r3, #2
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d0f0      	beq.n	8006b2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b4c:	4b28      	ldr	r3, [pc, #160]	; (8006bf0 <HAL_RCC_OscConfig+0x240>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	00db      	lsls	r3, r3, #3
 8006b5a:	4925      	ldr	r1, [pc, #148]	; (8006bf0 <HAL_RCC_OscConfig+0x240>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	600b      	str	r3, [r1, #0]
 8006b60:	e015      	b.n	8006b8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b62:	4b24      	ldr	r3, [pc, #144]	; (8006bf4 <HAL_RCC_OscConfig+0x244>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b68:	f7fc fd9e 	bl	80036a8 <HAL_GetTick>
 8006b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b6e:	e008      	b.n	8006b82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b70:	f7fc fd9a 	bl	80036a8 <HAL_GetTick>
 8006b74:	4602      	mov	r2, r0
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	d901      	bls.n	8006b82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e187      	b.n	8006e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b82:	4b1b      	ldr	r3, [pc, #108]	; (8006bf0 <HAL_RCC_OscConfig+0x240>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0302 	and.w	r3, r3, #2
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1f0      	bne.n	8006b70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0308 	and.w	r3, r3, #8
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d036      	beq.n	8006c08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d016      	beq.n	8006bd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ba2:	4b15      	ldr	r3, [pc, #84]	; (8006bf8 <HAL_RCC_OscConfig+0x248>)
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ba8:	f7fc fd7e 	bl	80036a8 <HAL_GetTick>
 8006bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bae:	e008      	b.n	8006bc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bb0:	f7fc fd7a 	bl	80036a8 <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d901      	bls.n	8006bc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e167      	b.n	8006e92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bc2:	4b0b      	ldr	r3, [pc, #44]	; (8006bf0 <HAL_RCC_OscConfig+0x240>)
 8006bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bc6:	f003 0302 	and.w	r3, r3, #2
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d0f0      	beq.n	8006bb0 <HAL_RCC_OscConfig+0x200>
 8006bce:	e01b      	b.n	8006c08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bd0:	4b09      	ldr	r3, [pc, #36]	; (8006bf8 <HAL_RCC_OscConfig+0x248>)
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bd6:	f7fc fd67 	bl	80036a8 <HAL_GetTick>
 8006bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bdc:	e00e      	b.n	8006bfc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bde:	f7fc fd63 	bl	80036a8 <HAL_GetTick>
 8006be2:	4602      	mov	r2, r0
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d907      	bls.n	8006bfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	e150      	b.n	8006e92 <HAL_RCC_OscConfig+0x4e2>
 8006bf0:	40023800 	.word	0x40023800
 8006bf4:	42470000 	.word	0x42470000
 8006bf8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bfc:	4b88      	ldr	r3, [pc, #544]	; (8006e20 <HAL_RCC_OscConfig+0x470>)
 8006bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c00:	f003 0302 	and.w	r3, r3, #2
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d1ea      	bne.n	8006bde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 0304 	and.w	r3, r3, #4
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f000 8097 	beq.w	8006d44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c16:	2300      	movs	r3, #0
 8006c18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c1a:	4b81      	ldr	r3, [pc, #516]	; (8006e20 <HAL_RCC_OscConfig+0x470>)
 8006c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10f      	bne.n	8006c46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c26:	2300      	movs	r3, #0
 8006c28:	60bb      	str	r3, [r7, #8]
 8006c2a:	4b7d      	ldr	r3, [pc, #500]	; (8006e20 <HAL_RCC_OscConfig+0x470>)
 8006c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2e:	4a7c      	ldr	r2, [pc, #496]	; (8006e20 <HAL_RCC_OscConfig+0x470>)
 8006c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c34:	6413      	str	r3, [r2, #64]	; 0x40
 8006c36:	4b7a      	ldr	r3, [pc, #488]	; (8006e20 <HAL_RCC_OscConfig+0x470>)
 8006c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c3e:	60bb      	str	r3, [r7, #8]
 8006c40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c42:	2301      	movs	r3, #1
 8006c44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c46:	4b77      	ldr	r3, [pc, #476]	; (8006e24 <HAL_RCC_OscConfig+0x474>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d118      	bne.n	8006c84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c52:	4b74      	ldr	r3, [pc, #464]	; (8006e24 <HAL_RCC_OscConfig+0x474>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a73      	ldr	r2, [pc, #460]	; (8006e24 <HAL_RCC_OscConfig+0x474>)
 8006c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c5e:	f7fc fd23 	bl	80036a8 <HAL_GetTick>
 8006c62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c64:	e008      	b.n	8006c78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c66:	f7fc fd1f 	bl	80036a8 <HAL_GetTick>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d901      	bls.n	8006c78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006c74:	2303      	movs	r3, #3
 8006c76:	e10c      	b.n	8006e92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c78:	4b6a      	ldr	r3, [pc, #424]	; (8006e24 <HAL_RCC_OscConfig+0x474>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d0f0      	beq.n	8006c66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d106      	bne.n	8006c9a <HAL_RCC_OscConfig+0x2ea>
 8006c8c:	4b64      	ldr	r3, [pc, #400]	; (8006e20 <HAL_RCC_OscConfig+0x470>)
 8006c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c90:	4a63      	ldr	r2, [pc, #396]	; (8006e20 <HAL_RCC_OscConfig+0x470>)
 8006c92:	f043 0301 	orr.w	r3, r3, #1
 8006c96:	6713      	str	r3, [r2, #112]	; 0x70
 8006c98:	e01c      	b.n	8006cd4 <HAL_RCC_OscConfig+0x324>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	2b05      	cmp	r3, #5
 8006ca0:	d10c      	bne.n	8006cbc <HAL_RCC_OscConfig+0x30c>
 8006ca2:	4b5f      	ldr	r3, [pc, #380]	; (8006e20 <HAL_RCC_OscConfig+0x470>)
 8006ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca6:	4a5e      	ldr	r2, [pc, #376]	; (8006e20 <HAL_RCC_OscConfig+0x470>)
 8006ca8:	f043 0304 	orr.w	r3, r3, #4
 8006cac:	6713      	str	r3, [r2, #112]	; 0x70
 8006cae:	4b5c      	ldr	r3, [pc, #368]	; (8006e20 <HAL_RCC_OscConfig+0x470>)
 8006cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb2:	4a5b      	ldr	r2, [pc, #364]	; (8006e20 <HAL_RCC_OscConfig+0x470>)
 8006cb4:	f043 0301 	orr.w	r3, r3, #1
 8006cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8006cba:	e00b      	b.n	8006cd4 <HAL_RCC_OscConfig+0x324>
 8006cbc:	4b58      	ldr	r3, [pc, #352]	; (8006e20 <HAL_RCC_OscConfig+0x470>)
 8006cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc0:	4a57      	ldr	r2, [pc, #348]	; (8006e20 <HAL_RCC_OscConfig+0x470>)
 8006cc2:	f023 0301 	bic.w	r3, r3, #1
 8006cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8006cc8:	4b55      	ldr	r3, [pc, #340]	; (8006e20 <HAL_RCC_OscConfig+0x470>)
 8006cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ccc:	4a54      	ldr	r2, [pc, #336]	; (8006e20 <HAL_RCC_OscConfig+0x470>)
 8006cce:	f023 0304 	bic.w	r3, r3, #4
 8006cd2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d015      	beq.n	8006d08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cdc:	f7fc fce4 	bl	80036a8 <HAL_GetTick>
 8006ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ce2:	e00a      	b.n	8006cfa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ce4:	f7fc fce0 	bl	80036a8 <HAL_GetTick>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d901      	bls.n	8006cfa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e0cb      	b.n	8006e92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cfa:	4b49      	ldr	r3, [pc, #292]	; (8006e20 <HAL_RCC_OscConfig+0x470>)
 8006cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cfe:	f003 0302 	and.w	r3, r3, #2
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d0ee      	beq.n	8006ce4 <HAL_RCC_OscConfig+0x334>
 8006d06:	e014      	b.n	8006d32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d08:	f7fc fcce 	bl	80036a8 <HAL_GetTick>
 8006d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d0e:	e00a      	b.n	8006d26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d10:	f7fc fcca 	bl	80036a8 <HAL_GetTick>
 8006d14:	4602      	mov	r2, r0
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d901      	bls.n	8006d26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006d22:	2303      	movs	r3, #3
 8006d24:	e0b5      	b.n	8006e92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d26:	4b3e      	ldr	r3, [pc, #248]	; (8006e20 <HAL_RCC_OscConfig+0x470>)
 8006d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d2a:	f003 0302 	and.w	r3, r3, #2
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1ee      	bne.n	8006d10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d32:	7dfb      	ldrb	r3, [r7, #23]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d105      	bne.n	8006d44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d38:	4b39      	ldr	r3, [pc, #228]	; (8006e20 <HAL_RCC_OscConfig+0x470>)
 8006d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3c:	4a38      	ldr	r2, [pc, #224]	; (8006e20 <HAL_RCC_OscConfig+0x470>)
 8006d3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	699b      	ldr	r3, [r3, #24]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f000 80a1 	beq.w	8006e90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d4e:	4b34      	ldr	r3, [pc, #208]	; (8006e20 <HAL_RCC_OscConfig+0x470>)
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	f003 030c 	and.w	r3, r3, #12
 8006d56:	2b08      	cmp	r3, #8
 8006d58:	d05c      	beq.n	8006e14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	d141      	bne.n	8006de6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d62:	4b31      	ldr	r3, [pc, #196]	; (8006e28 <HAL_RCC_OscConfig+0x478>)
 8006d64:	2200      	movs	r2, #0
 8006d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d68:	f7fc fc9e 	bl	80036a8 <HAL_GetTick>
 8006d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d6e:	e008      	b.n	8006d82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d70:	f7fc fc9a 	bl	80036a8 <HAL_GetTick>
 8006d74:	4602      	mov	r2, r0
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d901      	bls.n	8006d82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e087      	b.n	8006e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d82:	4b27      	ldr	r3, [pc, #156]	; (8006e20 <HAL_RCC_OscConfig+0x470>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1f0      	bne.n	8006d70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	69da      	ldr	r2, [r3, #28]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	431a      	orrs	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9c:	019b      	lsls	r3, r3, #6
 8006d9e:	431a      	orrs	r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da4:	085b      	lsrs	r3, r3, #1
 8006da6:	3b01      	subs	r3, #1
 8006da8:	041b      	lsls	r3, r3, #16
 8006daa:	431a      	orrs	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db0:	061b      	lsls	r3, r3, #24
 8006db2:	491b      	ldr	r1, [pc, #108]	; (8006e20 <HAL_RCC_OscConfig+0x470>)
 8006db4:	4313      	orrs	r3, r2
 8006db6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006db8:	4b1b      	ldr	r3, [pc, #108]	; (8006e28 <HAL_RCC_OscConfig+0x478>)
 8006dba:	2201      	movs	r2, #1
 8006dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dbe:	f7fc fc73 	bl	80036a8 <HAL_GetTick>
 8006dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dc4:	e008      	b.n	8006dd8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006dc6:	f7fc fc6f 	bl	80036a8 <HAL_GetTick>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	1ad3      	subs	r3, r2, r3
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	d901      	bls.n	8006dd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e05c      	b.n	8006e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dd8:	4b11      	ldr	r3, [pc, #68]	; (8006e20 <HAL_RCC_OscConfig+0x470>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d0f0      	beq.n	8006dc6 <HAL_RCC_OscConfig+0x416>
 8006de4:	e054      	b.n	8006e90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006de6:	4b10      	ldr	r3, [pc, #64]	; (8006e28 <HAL_RCC_OscConfig+0x478>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dec:	f7fc fc5c 	bl	80036a8 <HAL_GetTick>
 8006df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006df2:	e008      	b.n	8006e06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006df4:	f7fc fc58 	bl	80036a8 <HAL_GetTick>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d901      	bls.n	8006e06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006e02:	2303      	movs	r3, #3
 8006e04:	e045      	b.n	8006e92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e06:	4b06      	ldr	r3, [pc, #24]	; (8006e20 <HAL_RCC_OscConfig+0x470>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1f0      	bne.n	8006df4 <HAL_RCC_OscConfig+0x444>
 8006e12:	e03d      	b.n	8006e90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	699b      	ldr	r3, [r3, #24]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d107      	bne.n	8006e2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e038      	b.n	8006e92 <HAL_RCC_OscConfig+0x4e2>
 8006e20:	40023800 	.word	0x40023800
 8006e24:	40007000 	.word	0x40007000
 8006e28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006e2c:	4b1b      	ldr	r3, [pc, #108]	; (8006e9c <HAL_RCC_OscConfig+0x4ec>)
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d028      	beq.n	8006e8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d121      	bne.n	8006e8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d11a      	bne.n	8006e8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d111      	bne.n	8006e8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e72:	085b      	lsrs	r3, r3, #1
 8006e74:	3b01      	subs	r3, #1
 8006e76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d107      	bne.n	8006e8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d001      	beq.n	8006e90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e000      	b.n	8006e92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3718      	adds	r7, #24
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	40023800 	.word	0x40023800

08006ea0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d101      	bne.n	8006eb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e0cc      	b.n	800704e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006eb4:	4b68      	ldr	r3, [pc, #416]	; (8007058 <HAL_RCC_ClockConfig+0x1b8>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 030f 	and.w	r3, r3, #15
 8006ebc:	683a      	ldr	r2, [r7, #0]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d90c      	bls.n	8006edc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ec2:	4b65      	ldr	r3, [pc, #404]	; (8007058 <HAL_RCC_ClockConfig+0x1b8>)
 8006ec4:	683a      	ldr	r2, [r7, #0]
 8006ec6:	b2d2      	uxtb	r2, r2
 8006ec8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eca:	4b63      	ldr	r3, [pc, #396]	; (8007058 <HAL_RCC_ClockConfig+0x1b8>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 030f 	and.w	r3, r3, #15
 8006ed2:	683a      	ldr	r2, [r7, #0]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d001      	beq.n	8006edc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e0b8      	b.n	800704e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 0302 	and.w	r3, r3, #2
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d020      	beq.n	8006f2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 0304 	and.w	r3, r3, #4
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d005      	beq.n	8006f00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ef4:	4b59      	ldr	r3, [pc, #356]	; (800705c <HAL_RCC_ClockConfig+0x1bc>)
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	4a58      	ldr	r2, [pc, #352]	; (800705c <HAL_RCC_ClockConfig+0x1bc>)
 8006efa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006efe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 0308 	and.w	r3, r3, #8
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d005      	beq.n	8006f18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f0c:	4b53      	ldr	r3, [pc, #332]	; (800705c <HAL_RCC_ClockConfig+0x1bc>)
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	4a52      	ldr	r2, [pc, #328]	; (800705c <HAL_RCC_ClockConfig+0x1bc>)
 8006f12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006f16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f18:	4b50      	ldr	r3, [pc, #320]	; (800705c <HAL_RCC_ClockConfig+0x1bc>)
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	494d      	ldr	r1, [pc, #308]	; (800705c <HAL_RCC_ClockConfig+0x1bc>)
 8006f26:	4313      	orrs	r3, r2
 8006f28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 0301 	and.w	r3, r3, #1
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d044      	beq.n	8006fc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d107      	bne.n	8006f4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f3e:	4b47      	ldr	r3, [pc, #284]	; (800705c <HAL_RCC_ClockConfig+0x1bc>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d119      	bne.n	8006f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e07f      	b.n	800704e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d003      	beq.n	8006f5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f5a:	2b03      	cmp	r3, #3
 8006f5c:	d107      	bne.n	8006f6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f5e:	4b3f      	ldr	r3, [pc, #252]	; (800705c <HAL_RCC_ClockConfig+0x1bc>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d109      	bne.n	8006f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e06f      	b.n	800704e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f6e:	4b3b      	ldr	r3, [pc, #236]	; (800705c <HAL_RCC_ClockConfig+0x1bc>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0302 	and.w	r3, r3, #2
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d101      	bne.n	8006f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e067      	b.n	800704e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f7e:	4b37      	ldr	r3, [pc, #220]	; (800705c <HAL_RCC_ClockConfig+0x1bc>)
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	f023 0203 	bic.w	r2, r3, #3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	4934      	ldr	r1, [pc, #208]	; (800705c <HAL_RCC_ClockConfig+0x1bc>)
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f90:	f7fc fb8a 	bl	80036a8 <HAL_GetTick>
 8006f94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f96:	e00a      	b.n	8006fae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f98:	f7fc fb86 	bl	80036a8 <HAL_GetTick>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d901      	bls.n	8006fae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e04f      	b.n	800704e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fae:	4b2b      	ldr	r3, [pc, #172]	; (800705c <HAL_RCC_ClockConfig+0x1bc>)
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	f003 020c 	and.w	r2, r3, #12
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d1eb      	bne.n	8006f98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006fc0:	4b25      	ldr	r3, [pc, #148]	; (8007058 <HAL_RCC_ClockConfig+0x1b8>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 030f 	and.w	r3, r3, #15
 8006fc8:	683a      	ldr	r2, [r7, #0]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d20c      	bcs.n	8006fe8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fce:	4b22      	ldr	r3, [pc, #136]	; (8007058 <HAL_RCC_ClockConfig+0x1b8>)
 8006fd0:	683a      	ldr	r2, [r7, #0]
 8006fd2:	b2d2      	uxtb	r2, r2
 8006fd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fd6:	4b20      	ldr	r3, [pc, #128]	; (8007058 <HAL_RCC_ClockConfig+0x1b8>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 030f 	and.w	r3, r3, #15
 8006fde:	683a      	ldr	r2, [r7, #0]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d001      	beq.n	8006fe8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e032      	b.n	800704e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 0304 	and.w	r3, r3, #4
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d008      	beq.n	8007006 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ff4:	4b19      	ldr	r3, [pc, #100]	; (800705c <HAL_RCC_ClockConfig+0x1bc>)
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	4916      	ldr	r1, [pc, #88]	; (800705c <HAL_RCC_ClockConfig+0x1bc>)
 8007002:	4313      	orrs	r3, r2
 8007004:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 0308 	and.w	r3, r3, #8
 800700e:	2b00      	cmp	r3, #0
 8007010:	d009      	beq.n	8007026 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007012:	4b12      	ldr	r3, [pc, #72]	; (800705c <HAL_RCC_ClockConfig+0x1bc>)
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	00db      	lsls	r3, r3, #3
 8007020:	490e      	ldr	r1, [pc, #56]	; (800705c <HAL_RCC_ClockConfig+0x1bc>)
 8007022:	4313      	orrs	r3, r2
 8007024:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007026:	f000 f821 	bl	800706c <HAL_RCC_GetSysClockFreq>
 800702a:	4602      	mov	r2, r0
 800702c:	4b0b      	ldr	r3, [pc, #44]	; (800705c <HAL_RCC_ClockConfig+0x1bc>)
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	091b      	lsrs	r3, r3, #4
 8007032:	f003 030f 	and.w	r3, r3, #15
 8007036:	490a      	ldr	r1, [pc, #40]	; (8007060 <HAL_RCC_ClockConfig+0x1c0>)
 8007038:	5ccb      	ldrb	r3, [r1, r3]
 800703a:	fa22 f303 	lsr.w	r3, r2, r3
 800703e:	4a09      	ldr	r2, [pc, #36]	; (8007064 <HAL_RCC_ClockConfig+0x1c4>)
 8007040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007042:	4b09      	ldr	r3, [pc, #36]	; (8007068 <HAL_RCC_ClockConfig+0x1c8>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4618      	mov	r0, r3
 8007048:	f7fa fbfe 	bl	8001848 <HAL_InitTick>

  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	40023c00 	.word	0x40023c00
 800705c:	40023800 	.word	0x40023800
 8007060:	0801234c 	.word	0x0801234c
 8007064:	20000000 	.word	0x20000000
 8007068:	2000004c 	.word	0x2000004c

0800706c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800706c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007070:	b094      	sub	sp, #80	; 0x50
 8007072:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007074:	2300      	movs	r3, #0
 8007076:	647b      	str	r3, [r7, #68]	; 0x44
 8007078:	2300      	movs	r3, #0
 800707a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800707c:	2300      	movs	r3, #0
 800707e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007080:	2300      	movs	r3, #0
 8007082:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007084:	4b79      	ldr	r3, [pc, #484]	; (800726c <HAL_RCC_GetSysClockFreq+0x200>)
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	f003 030c 	and.w	r3, r3, #12
 800708c:	2b08      	cmp	r3, #8
 800708e:	d00d      	beq.n	80070ac <HAL_RCC_GetSysClockFreq+0x40>
 8007090:	2b08      	cmp	r3, #8
 8007092:	f200 80e1 	bhi.w	8007258 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007096:	2b00      	cmp	r3, #0
 8007098:	d002      	beq.n	80070a0 <HAL_RCC_GetSysClockFreq+0x34>
 800709a:	2b04      	cmp	r3, #4
 800709c:	d003      	beq.n	80070a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800709e:	e0db      	b.n	8007258 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80070a0:	4b73      	ldr	r3, [pc, #460]	; (8007270 <HAL_RCC_GetSysClockFreq+0x204>)
 80070a2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80070a4:	e0db      	b.n	800725e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80070a6:	4b73      	ldr	r3, [pc, #460]	; (8007274 <HAL_RCC_GetSysClockFreq+0x208>)
 80070a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80070aa:	e0d8      	b.n	800725e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80070ac:	4b6f      	ldr	r3, [pc, #444]	; (800726c <HAL_RCC_GetSysClockFreq+0x200>)
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070b4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80070b6:	4b6d      	ldr	r3, [pc, #436]	; (800726c <HAL_RCC_GetSysClockFreq+0x200>)
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d063      	beq.n	800718a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070c2:	4b6a      	ldr	r3, [pc, #424]	; (800726c <HAL_RCC_GetSysClockFreq+0x200>)
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	099b      	lsrs	r3, r3, #6
 80070c8:	2200      	movs	r2, #0
 80070ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80070cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80070ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070d4:	633b      	str	r3, [r7, #48]	; 0x30
 80070d6:	2300      	movs	r3, #0
 80070d8:	637b      	str	r3, [r7, #52]	; 0x34
 80070da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80070de:	4622      	mov	r2, r4
 80070e0:	462b      	mov	r3, r5
 80070e2:	f04f 0000 	mov.w	r0, #0
 80070e6:	f04f 0100 	mov.w	r1, #0
 80070ea:	0159      	lsls	r1, r3, #5
 80070ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80070f0:	0150      	lsls	r0, r2, #5
 80070f2:	4602      	mov	r2, r0
 80070f4:	460b      	mov	r3, r1
 80070f6:	4621      	mov	r1, r4
 80070f8:	1a51      	subs	r1, r2, r1
 80070fa:	6139      	str	r1, [r7, #16]
 80070fc:	4629      	mov	r1, r5
 80070fe:	eb63 0301 	sbc.w	r3, r3, r1
 8007102:	617b      	str	r3, [r7, #20]
 8007104:	f04f 0200 	mov.w	r2, #0
 8007108:	f04f 0300 	mov.w	r3, #0
 800710c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007110:	4659      	mov	r1, fp
 8007112:	018b      	lsls	r3, r1, #6
 8007114:	4651      	mov	r1, sl
 8007116:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800711a:	4651      	mov	r1, sl
 800711c:	018a      	lsls	r2, r1, #6
 800711e:	4651      	mov	r1, sl
 8007120:	ebb2 0801 	subs.w	r8, r2, r1
 8007124:	4659      	mov	r1, fp
 8007126:	eb63 0901 	sbc.w	r9, r3, r1
 800712a:	f04f 0200 	mov.w	r2, #0
 800712e:	f04f 0300 	mov.w	r3, #0
 8007132:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007136:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800713a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800713e:	4690      	mov	r8, r2
 8007140:	4699      	mov	r9, r3
 8007142:	4623      	mov	r3, r4
 8007144:	eb18 0303 	adds.w	r3, r8, r3
 8007148:	60bb      	str	r3, [r7, #8]
 800714a:	462b      	mov	r3, r5
 800714c:	eb49 0303 	adc.w	r3, r9, r3
 8007150:	60fb      	str	r3, [r7, #12]
 8007152:	f04f 0200 	mov.w	r2, #0
 8007156:	f04f 0300 	mov.w	r3, #0
 800715a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800715e:	4629      	mov	r1, r5
 8007160:	024b      	lsls	r3, r1, #9
 8007162:	4621      	mov	r1, r4
 8007164:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007168:	4621      	mov	r1, r4
 800716a:	024a      	lsls	r2, r1, #9
 800716c:	4610      	mov	r0, r2
 800716e:	4619      	mov	r1, r3
 8007170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007172:	2200      	movs	r2, #0
 8007174:	62bb      	str	r3, [r7, #40]	; 0x28
 8007176:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007178:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800717c:	f7f9 f888 	bl	8000290 <__aeabi_uldivmod>
 8007180:	4602      	mov	r2, r0
 8007182:	460b      	mov	r3, r1
 8007184:	4613      	mov	r3, r2
 8007186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007188:	e058      	b.n	800723c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800718a:	4b38      	ldr	r3, [pc, #224]	; (800726c <HAL_RCC_GetSysClockFreq+0x200>)
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	099b      	lsrs	r3, r3, #6
 8007190:	2200      	movs	r2, #0
 8007192:	4618      	mov	r0, r3
 8007194:	4611      	mov	r1, r2
 8007196:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800719a:	623b      	str	r3, [r7, #32]
 800719c:	2300      	movs	r3, #0
 800719e:	627b      	str	r3, [r7, #36]	; 0x24
 80071a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80071a4:	4642      	mov	r2, r8
 80071a6:	464b      	mov	r3, r9
 80071a8:	f04f 0000 	mov.w	r0, #0
 80071ac:	f04f 0100 	mov.w	r1, #0
 80071b0:	0159      	lsls	r1, r3, #5
 80071b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80071b6:	0150      	lsls	r0, r2, #5
 80071b8:	4602      	mov	r2, r0
 80071ba:	460b      	mov	r3, r1
 80071bc:	4641      	mov	r1, r8
 80071be:	ebb2 0a01 	subs.w	sl, r2, r1
 80071c2:	4649      	mov	r1, r9
 80071c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80071c8:	f04f 0200 	mov.w	r2, #0
 80071cc:	f04f 0300 	mov.w	r3, #0
 80071d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80071d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80071d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80071dc:	ebb2 040a 	subs.w	r4, r2, sl
 80071e0:	eb63 050b 	sbc.w	r5, r3, fp
 80071e4:	f04f 0200 	mov.w	r2, #0
 80071e8:	f04f 0300 	mov.w	r3, #0
 80071ec:	00eb      	lsls	r3, r5, #3
 80071ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071f2:	00e2      	lsls	r2, r4, #3
 80071f4:	4614      	mov	r4, r2
 80071f6:	461d      	mov	r5, r3
 80071f8:	4643      	mov	r3, r8
 80071fa:	18e3      	adds	r3, r4, r3
 80071fc:	603b      	str	r3, [r7, #0]
 80071fe:	464b      	mov	r3, r9
 8007200:	eb45 0303 	adc.w	r3, r5, r3
 8007204:	607b      	str	r3, [r7, #4]
 8007206:	f04f 0200 	mov.w	r2, #0
 800720a:	f04f 0300 	mov.w	r3, #0
 800720e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007212:	4629      	mov	r1, r5
 8007214:	028b      	lsls	r3, r1, #10
 8007216:	4621      	mov	r1, r4
 8007218:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800721c:	4621      	mov	r1, r4
 800721e:	028a      	lsls	r2, r1, #10
 8007220:	4610      	mov	r0, r2
 8007222:	4619      	mov	r1, r3
 8007224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007226:	2200      	movs	r2, #0
 8007228:	61bb      	str	r3, [r7, #24]
 800722a:	61fa      	str	r2, [r7, #28]
 800722c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007230:	f7f9 f82e 	bl	8000290 <__aeabi_uldivmod>
 8007234:	4602      	mov	r2, r0
 8007236:	460b      	mov	r3, r1
 8007238:	4613      	mov	r3, r2
 800723a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800723c:	4b0b      	ldr	r3, [pc, #44]	; (800726c <HAL_RCC_GetSysClockFreq+0x200>)
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	0c1b      	lsrs	r3, r3, #16
 8007242:	f003 0303 	and.w	r3, r3, #3
 8007246:	3301      	adds	r3, #1
 8007248:	005b      	lsls	r3, r3, #1
 800724a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800724c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800724e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007250:	fbb2 f3f3 	udiv	r3, r2, r3
 8007254:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007256:	e002      	b.n	800725e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007258:	4b05      	ldr	r3, [pc, #20]	; (8007270 <HAL_RCC_GetSysClockFreq+0x204>)
 800725a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800725c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800725e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007260:	4618      	mov	r0, r3
 8007262:	3750      	adds	r7, #80	; 0x50
 8007264:	46bd      	mov	sp, r7
 8007266:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800726a:	bf00      	nop
 800726c:	40023800 	.word	0x40023800
 8007270:	00f42400 	.word	0x00f42400
 8007274:	007a1200 	.word	0x007a1200

08007278 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007278:	b480      	push	{r7}
 800727a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800727c:	4b03      	ldr	r3, [pc, #12]	; (800728c <HAL_RCC_GetHCLKFreq+0x14>)
 800727e:	681b      	ldr	r3, [r3, #0]
}
 8007280:	4618      	mov	r0, r3
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
 800728a:	bf00      	nop
 800728c:	20000000 	.word	0x20000000

08007290 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007294:	f7ff fff0 	bl	8007278 <HAL_RCC_GetHCLKFreq>
 8007298:	4602      	mov	r2, r0
 800729a:	4b05      	ldr	r3, [pc, #20]	; (80072b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	0a9b      	lsrs	r3, r3, #10
 80072a0:	f003 0307 	and.w	r3, r3, #7
 80072a4:	4903      	ldr	r1, [pc, #12]	; (80072b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80072a6:	5ccb      	ldrb	r3, [r1, r3]
 80072a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	40023800 	.word	0x40023800
 80072b4:	0801235c 	.word	0x0801235c

080072b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80072bc:	f7ff ffdc 	bl	8007278 <HAL_RCC_GetHCLKFreq>
 80072c0:	4602      	mov	r2, r0
 80072c2:	4b05      	ldr	r3, [pc, #20]	; (80072d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	0b5b      	lsrs	r3, r3, #13
 80072c8:	f003 0307 	and.w	r3, r3, #7
 80072cc:	4903      	ldr	r1, [pc, #12]	; (80072dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80072ce:	5ccb      	ldrb	r3, [r1, r3]
 80072d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	40023800 	.word	0x40023800
 80072dc:	0801235c 	.word	0x0801235c

080072e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	220f      	movs	r2, #15
 80072ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80072f0:	4b12      	ldr	r3, [pc, #72]	; (800733c <HAL_RCC_GetClockConfig+0x5c>)
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	f003 0203 	and.w	r2, r3, #3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80072fc:	4b0f      	ldr	r3, [pc, #60]	; (800733c <HAL_RCC_GetClockConfig+0x5c>)
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007308:	4b0c      	ldr	r3, [pc, #48]	; (800733c <HAL_RCC_GetClockConfig+0x5c>)
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007314:	4b09      	ldr	r3, [pc, #36]	; (800733c <HAL_RCC_GetClockConfig+0x5c>)
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	08db      	lsrs	r3, r3, #3
 800731a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007322:	4b07      	ldr	r3, [pc, #28]	; (8007340 <HAL_RCC_GetClockConfig+0x60>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f003 020f 	and.w	r2, r3, #15
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	601a      	str	r2, [r3, #0]
}
 800732e:	bf00      	nop
 8007330:	370c      	adds	r7, #12
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop
 800733c:	40023800 	.word	0x40023800
 8007340:	40023c00 	.word	0x40023c00

08007344 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b086      	sub	sp, #24
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800734c:	2300      	movs	r3, #0
 800734e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007350:	2300      	movs	r3, #0
 8007352:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0301 	and.w	r3, r3, #1
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10b      	bne.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007368:	2b00      	cmp	r3, #0
 800736a:	d105      	bne.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007374:	2b00      	cmp	r3, #0
 8007376:	d075      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007378:	4b91      	ldr	r3, [pc, #580]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800737a:	2200      	movs	r2, #0
 800737c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800737e:	f7fc f993 	bl	80036a8 <HAL_GetTick>
 8007382:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007384:	e008      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007386:	f7fc f98f 	bl	80036a8 <HAL_GetTick>
 800738a:	4602      	mov	r2, r0
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	1ad3      	subs	r3, r2, r3
 8007390:	2b02      	cmp	r3, #2
 8007392:	d901      	bls.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007394:	2303      	movs	r3, #3
 8007396:	e189      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007398:	4b8a      	ldr	r3, [pc, #552]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d1f0      	bne.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 0301 	and.w	r3, r3, #1
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d009      	beq.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	019a      	lsls	r2, r3, #6
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	071b      	lsls	r3, r3, #28
 80073bc:	4981      	ldr	r1, [pc, #516]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80073be:	4313      	orrs	r3, r2
 80073c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 0302 	and.w	r3, r3, #2
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d01f      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80073d0:	4b7c      	ldr	r3, [pc, #496]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80073d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073d6:	0f1b      	lsrs	r3, r3, #28
 80073d8:	f003 0307 	and.w	r3, r3, #7
 80073dc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	019a      	lsls	r2, r3, #6
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	061b      	lsls	r3, r3, #24
 80073ea:	431a      	orrs	r2, r3
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	071b      	lsls	r3, r3, #28
 80073f0:	4974      	ldr	r1, [pc, #464]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80073f2:	4313      	orrs	r3, r2
 80073f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80073f8:	4b72      	ldr	r3, [pc, #456]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80073fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073fe:	f023 021f 	bic.w	r2, r3, #31
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	69db      	ldr	r3, [r3, #28]
 8007406:	3b01      	subs	r3, #1
 8007408:	496e      	ldr	r1, [pc, #440]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800740a:	4313      	orrs	r3, r2
 800740c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007418:	2b00      	cmp	r3, #0
 800741a:	d00d      	beq.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	019a      	lsls	r2, r3, #6
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	061b      	lsls	r3, r3, #24
 8007428:	431a      	orrs	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	071b      	lsls	r3, r3, #28
 8007430:	4964      	ldr	r1, [pc, #400]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007432:	4313      	orrs	r3, r2
 8007434:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007438:	4b61      	ldr	r3, [pc, #388]	; (80075c0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800743a:	2201      	movs	r2, #1
 800743c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800743e:	f7fc f933 	bl	80036a8 <HAL_GetTick>
 8007442:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007444:	e008      	b.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007446:	f7fc f92f 	bl	80036a8 <HAL_GetTick>
 800744a:	4602      	mov	r2, r0
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	1ad3      	subs	r3, r2, r3
 8007450:	2b02      	cmp	r3, #2
 8007452:	d901      	bls.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007454:	2303      	movs	r3, #3
 8007456:	e129      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007458:	4b5a      	ldr	r3, [pc, #360]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007460:	2b00      	cmp	r3, #0
 8007462:	d0f0      	beq.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 0304 	and.w	r3, r3, #4
 800746c:	2b00      	cmp	r3, #0
 800746e:	d105      	bne.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007478:	2b00      	cmp	r3, #0
 800747a:	d079      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800747c:	4b52      	ldr	r3, [pc, #328]	; (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800747e:	2200      	movs	r2, #0
 8007480:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007482:	f7fc f911 	bl	80036a8 <HAL_GetTick>
 8007486:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007488:	e008      	b.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800748a:	f7fc f90d 	bl	80036a8 <HAL_GetTick>
 800748e:	4602      	mov	r2, r0
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	1ad3      	subs	r3, r2, r3
 8007494:	2b02      	cmp	r3, #2
 8007496:	d901      	bls.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007498:	2303      	movs	r3, #3
 800749a:	e107      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800749c:	4b49      	ldr	r3, [pc, #292]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074a8:	d0ef      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f003 0304 	and.w	r3, r3, #4
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d020      	beq.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80074b6:	4b43      	ldr	r3, [pc, #268]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80074b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074bc:	0f1b      	lsrs	r3, r3, #28
 80074be:	f003 0307 	and.w	r3, r3, #7
 80074c2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	691b      	ldr	r3, [r3, #16]
 80074c8:	019a      	lsls	r2, r3, #6
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	695b      	ldr	r3, [r3, #20]
 80074ce:	061b      	lsls	r3, r3, #24
 80074d0:	431a      	orrs	r2, r3
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	071b      	lsls	r3, r3, #28
 80074d6:	493b      	ldr	r1, [pc, #236]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80074d8:	4313      	orrs	r3, r2
 80074da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80074de:	4b39      	ldr	r3, [pc, #228]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80074e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074e4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6a1b      	ldr	r3, [r3, #32]
 80074ec:	3b01      	subs	r3, #1
 80074ee:	021b      	lsls	r3, r3, #8
 80074f0:	4934      	ldr	r1, [pc, #208]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80074f2:	4313      	orrs	r3, r2
 80074f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 0308 	and.w	r3, r3, #8
 8007500:	2b00      	cmp	r3, #0
 8007502:	d01e      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007504:	4b2f      	ldr	r3, [pc, #188]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800750a:	0e1b      	lsrs	r3, r3, #24
 800750c:	f003 030f 	and.w	r3, r3, #15
 8007510:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	019a      	lsls	r2, r3, #6
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	061b      	lsls	r3, r3, #24
 800751c:	431a      	orrs	r2, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	071b      	lsls	r3, r3, #28
 8007524:	4927      	ldr	r1, [pc, #156]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007526:	4313      	orrs	r3, r2
 8007528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800752c:	4b25      	ldr	r3, [pc, #148]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800752e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007532:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753a:	4922      	ldr	r1, [pc, #136]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800753c:	4313      	orrs	r3, r2
 800753e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007542:	4b21      	ldr	r3, [pc, #132]	; (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007544:	2201      	movs	r2, #1
 8007546:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007548:	f7fc f8ae 	bl	80036a8 <HAL_GetTick>
 800754c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800754e:	e008      	b.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007550:	f7fc f8aa 	bl	80036a8 <HAL_GetTick>
 8007554:	4602      	mov	r2, r0
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	2b02      	cmp	r3, #2
 800755c:	d901      	bls.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e0a4      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007562:	4b18      	ldr	r3, [pc, #96]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800756a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800756e:	d1ef      	bne.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 0320 	and.w	r3, r3, #32
 8007578:	2b00      	cmp	r3, #0
 800757a:	f000 808b 	beq.w	8007694 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800757e:	2300      	movs	r3, #0
 8007580:	60fb      	str	r3, [r7, #12]
 8007582:	4b10      	ldr	r3, [pc, #64]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007586:	4a0f      	ldr	r2, [pc, #60]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800758c:	6413      	str	r3, [r2, #64]	; 0x40
 800758e:	4b0d      	ldr	r3, [pc, #52]	; (80075c4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007596:	60fb      	str	r3, [r7, #12]
 8007598:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800759a:	4b0c      	ldr	r3, [pc, #48]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a0b      	ldr	r2, [pc, #44]	; (80075cc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80075a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075a4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80075a6:	f7fc f87f 	bl	80036a8 <HAL_GetTick>
 80075aa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80075ac:	e010      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80075ae:	f7fc f87b 	bl	80036a8 <HAL_GetTick>
 80075b2:	4602      	mov	r2, r0
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	1ad3      	subs	r3, r2, r3
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	d909      	bls.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80075bc:	2303      	movs	r3, #3
 80075be:	e075      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x368>
 80075c0:	42470068 	.word	0x42470068
 80075c4:	40023800 	.word	0x40023800
 80075c8:	42470070 	.word	0x42470070
 80075cc:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80075d0:	4b38      	ldr	r3, [pc, #224]	; (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d0e8      	beq.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80075dc:	4b36      	ldr	r3, [pc, #216]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80075de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075e4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d02f      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075f4:	693a      	ldr	r2, [r7, #16]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d028      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80075fa:	4b2f      	ldr	r3, [pc, #188]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80075fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007602:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007604:	4b2d      	ldr	r3, [pc, #180]	; (80076bc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007606:	2201      	movs	r2, #1
 8007608:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800760a:	4b2c      	ldr	r3, [pc, #176]	; (80076bc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800760c:	2200      	movs	r2, #0
 800760e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007610:	4a29      	ldr	r2, [pc, #164]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007616:	4b28      	ldr	r3, [pc, #160]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800761a:	f003 0301 	and.w	r3, r3, #1
 800761e:	2b01      	cmp	r3, #1
 8007620:	d114      	bne.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007622:	f7fc f841 	bl	80036a8 <HAL_GetTick>
 8007626:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007628:	e00a      	b.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800762a:	f7fc f83d 	bl	80036a8 <HAL_GetTick>
 800762e:	4602      	mov	r2, r0
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	f241 3288 	movw	r2, #5000	; 0x1388
 8007638:	4293      	cmp	r3, r2
 800763a:	d901      	bls.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800763c:	2303      	movs	r3, #3
 800763e:	e035      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007640:	4b1d      	ldr	r3, [pc, #116]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007644:	f003 0302 	and.w	r3, r3, #2
 8007648:	2b00      	cmp	r3, #0
 800764a:	d0ee      	beq.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007650:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007654:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007658:	d10d      	bne.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800765a:	4b17      	ldr	r3, [pc, #92]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007666:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800766a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800766e:	4912      	ldr	r1, [pc, #72]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007670:	4313      	orrs	r3, r2
 8007672:	608b      	str	r3, [r1, #8]
 8007674:	e005      	b.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8007676:	4b10      	ldr	r3, [pc, #64]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	4a0f      	ldr	r2, [pc, #60]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800767c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007680:	6093      	str	r3, [r2, #8]
 8007682:	4b0d      	ldr	r3, [pc, #52]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007684:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800768a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800768e:	490a      	ldr	r1, [pc, #40]	; (80076b8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007690:	4313      	orrs	r3, r2
 8007692:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f003 0310 	and.w	r3, r3, #16
 800769c:	2b00      	cmp	r3, #0
 800769e:	d004      	beq.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80076a6:	4b06      	ldr	r3, [pc, #24]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80076a8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3718      	adds	r7, #24
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	40007000 	.word	0x40007000
 80076b8:	40023800 	.word	0x40023800
 80076bc:	42470e40 	.word	0x42470e40
 80076c0:	424711e0 	.word	0x424711e0

080076c4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d101      	bne.n	80076d8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e025      	b.n	8007724 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d106      	bne.n	80076f2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f7f9 fa1d 	bl	8000b2c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2202      	movs	r2, #2
 80076f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	3304      	adds	r3, #4
 8007702:	4619      	mov	r1, r3
 8007704:	4610      	mov	r0, r2
 8007706:	f002 fa1d 	bl	8009b44 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6818      	ldr	r0, [r3, #0]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	461a      	mov	r2, r3
 8007714:	6839      	ldr	r1, [r7, #0]
 8007716:	f002 fa72 	bl	8009bfe <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2201      	movs	r2, #1
 800771e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	3708      	adds	r7, #8
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b086      	sub	sp, #24
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800773e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8007740:	7dfb      	ldrb	r3, [r7, #23]
 8007742:	2b02      	cmp	r3, #2
 8007744:	d101      	bne.n	800774a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8007746:	2302      	movs	r3, #2
 8007748:	e021      	b.n	800778e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800774a:	7dfb      	ldrb	r3, [r7, #23]
 800774c:	2b01      	cmp	r3, #1
 800774e:	d002      	beq.n	8007756 <HAL_SDRAM_SendCommand+0x2a>
 8007750:	7dfb      	ldrb	r3, [r7, #23]
 8007752:	2b05      	cmp	r3, #5
 8007754:	d118      	bne.n	8007788 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2202      	movs	r2, #2
 800775a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	68b9      	ldr	r1, [r7, #8]
 8007766:	4618      	mov	r0, r3
 8007768:	f002 fab2 	bl	8009cd0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2b02      	cmp	r3, #2
 8007772:	d104      	bne.n	800777e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2205      	movs	r2, #5
 8007778:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800777c:	e006      	b.n	800778c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2201      	movs	r2, #1
 8007782:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007786:	e001      	b.n	800778c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	e000      	b.n	800778e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3718      	adds	r7, #24
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}

08007796 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007796:	b580      	push	{r7, lr}
 8007798:	b082      	sub	sp, #8
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
 800779e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d101      	bne.n	80077b0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80077ac:	2302      	movs	r3, #2
 80077ae:	e016      	b.n	80077de <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d10f      	bne.n	80077dc <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2202      	movs	r2, #2
 80077c0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	6839      	ldr	r1, [r7, #0]
 80077ca:	4618      	mov	r0, r3
 80077cc:	f002 fabd 	bl	8009d4a <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
 80077da:	e000      	b.n	80077de <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3708      	adds	r7, #8
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b082      	sub	sp, #8
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d101      	bne.n	80077f8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	e07b      	b.n	80078f0 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d108      	bne.n	8007812 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007808:	d009      	beq.n	800781e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	61da      	str	r2, [r3, #28]
 8007810:	e005      	b.n	800781e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800782a:	b2db      	uxtb	r3, r3
 800782c:	2b00      	cmp	r3, #0
 800782e:	d106      	bne.n	800783e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f7f9 ff29 	bl	8001690 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2202      	movs	r2, #2
 8007842:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007854:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007866:	431a      	orrs	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007870:	431a      	orrs	r2, r3
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	f003 0302 	and.w	r3, r3, #2
 800787a:	431a      	orrs	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	695b      	ldr	r3, [r3, #20]
 8007880:	f003 0301 	and.w	r3, r3, #1
 8007884:	431a      	orrs	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	699b      	ldr	r3, [r3, #24]
 800788a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800788e:	431a      	orrs	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	69db      	ldr	r3, [r3, #28]
 8007894:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007898:	431a      	orrs	r2, r3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078a2:	ea42 0103 	orr.w	r1, r2, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078aa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	430a      	orrs	r2, r1
 80078b4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	699b      	ldr	r3, [r3, #24]
 80078ba:	0c1b      	lsrs	r3, r3, #16
 80078bc:	f003 0104 	and.w	r1, r3, #4
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c4:	f003 0210 	and.w	r2, r3, #16
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	430a      	orrs	r2, r1
 80078ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	69da      	ldr	r2, [r3, #28]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2201      	movs	r2, #1
 80078ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3708      	adds	r7, #8
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}

080078f8 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d101      	bne.n	800790a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e01a      	b.n	8007940 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2202      	movs	r2, #2
 800790e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007920:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f7f9 ff32 	bl	800178c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3708      	adds	r7, #8
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}

08007948 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b088      	sub	sp, #32
 800794c:	af00      	add	r7, sp, #0
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	603b      	str	r3, [r7, #0]
 8007954:	4613      	mov	r3, r2
 8007956:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007958:	2300      	movs	r3, #0
 800795a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007962:	2b01      	cmp	r3, #1
 8007964:	d101      	bne.n	800796a <HAL_SPI_Transmit+0x22>
 8007966:	2302      	movs	r3, #2
 8007968:	e126      	b.n	8007bb8 <HAL_SPI_Transmit+0x270>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2201      	movs	r2, #1
 800796e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007972:	f7fb fe99 	bl	80036a8 <HAL_GetTick>
 8007976:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007978:	88fb      	ldrh	r3, [r7, #6]
 800797a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007982:	b2db      	uxtb	r3, r3
 8007984:	2b01      	cmp	r3, #1
 8007986:	d002      	beq.n	800798e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007988:	2302      	movs	r3, #2
 800798a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800798c:	e10b      	b.n	8007ba6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d002      	beq.n	800799a <HAL_SPI_Transmit+0x52>
 8007994:	88fb      	ldrh	r3, [r7, #6]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d102      	bne.n	80079a0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800799e:	e102      	b.n	8007ba6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2203      	movs	r2, #3
 80079a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2200      	movs	r2, #0
 80079ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	68ba      	ldr	r2, [r7, #8]
 80079b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	88fa      	ldrh	r2, [r7, #6]
 80079b8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	88fa      	ldrh	r2, [r7, #6]
 80079be:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2200      	movs	r2, #0
 80079c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2200      	movs	r2, #0
 80079ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2200      	movs	r2, #0
 80079d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2200      	movs	r2, #0
 80079d6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2200      	movs	r2, #0
 80079dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079e6:	d10f      	bne.n	8007a08 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079f6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a06:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a12:	2b40      	cmp	r3, #64	; 0x40
 8007a14:	d007      	beq.n	8007a26 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a2e:	d14b      	bne.n	8007ac8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d002      	beq.n	8007a3e <HAL_SPI_Transmit+0xf6>
 8007a38:	8afb      	ldrh	r3, [r7, #22]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d13e      	bne.n	8007abc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a42:	881a      	ldrh	r2, [r3, #0]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a4e:	1c9a      	adds	r2, r3, #2
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007a62:	e02b      	b.n	8007abc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	f003 0302 	and.w	r3, r3, #2
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	d112      	bne.n	8007a98 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a76:	881a      	ldrh	r2, [r3, #0]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a82:	1c9a      	adds	r2, r3, #2
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	86da      	strh	r2, [r3, #54]	; 0x36
 8007a96:	e011      	b.n	8007abc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a98:	f7fb fe06 	bl	80036a8 <HAL_GetTick>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	683a      	ldr	r2, [r7, #0]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d803      	bhi.n	8007ab0 <HAL_SPI_Transmit+0x168>
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aae:	d102      	bne.n	8007ab6 <HAL_SPI_Transmit+0x16e>
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d102      	bne.n	8007abc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007aba:	e074      	b.n	8007ba6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1ce      	bne.n	8007a64 <HAL_SPI_Transmit+0x11c>
 8007ac6:	e04c      	b.n	8007b62 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d002      	beq.n	8007ad6 <HAL_SPI_Transmit+0x18e>
 8007ad0:	8afb      	ldrh	r3, [r7, #22]
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d140      	bne.n	8007b58 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	330c      	adds	r3, #12
 8007ae0:	7812      	ldrb	r2, [r2, #0]
 8007ae2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae8:	1c5a      	adds	r2, r3, #1
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	3b01      	subs	r3, #1
 8007af6:	b29a      	uxth	r2, r3
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007afc:	e02c      	b.n	8007b58 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	f003 0302 	and.w	r3, r3, #2
 8007b08:	2b02      	cmp	r3, #2
 8007b0a:	d113      	bne.n	8007b34 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	330c      	adds	r3, #12
 8007b16:	7812      	ldrb	r2, [r2, #0]
 8007b18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b1e:	1c5a      	adds	r2, r3, #1
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	86da      	strh	r2, [r3, #54]	; 0x36
 8007b32:	e011      	b.n	8007b58 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b34:	f7fb fdb8 	bl	80036a8 <HAL_GetTick>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	1ad3      	subs	r3, r2, r3
 8007b3e:	683a      	ldr	r2, [r7, #0]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d803      	bhi.n	8007b4c <HAL_SPI_Transmit+0x204>
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b4a:	d102      	bne.n	8007b52 <HAL_SPI_Transmit+0x20a>
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d102      	bne.n	8007b58 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007b52:	2303      	movs	r3, #3
 8007b54:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007b56:	e026      	b.n	8007ba6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d1cd      	bne.n	8007afe <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b62:	69ba      	ldr	r2, [r7, #24]
 8007b64:	6839      	ldr	r1, [r7, #0]
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	f000 fbda 	bl	8008320 <SPI_EndRxTxTransaction>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d002      	beq.n	8007b78 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2220      	movs	r2, #32
 8007b76:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d10a      	bne.n	8007b96 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b80:	2300      	movs	r3, #0
 8007b82:	613b      	str	r3, [r7, #16]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	613b      	str	r3, [r7, #16]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	613b      	str	r3, [r7, #16]
 8007b94:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d002      	beq.n	8007ba4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	77fb      	strb	r3, [r7, #31]
 8007ba2:	e000      	b.n	8007ba6 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007ba4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007bb6:	7ffb      	ldrb	r3, [r7, #31]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3720      	adds	r7, #32
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b088      	sub	sp, #32
 8007bc4:	af02      	add	r7, sp, #8
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	603b      	str	r3, [r7, #0]
 8007bcc:	4613      	mov	r3, r2
 8007bce:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bdc:	d112      	bne.n	8007c04 <HAL_SPI_Receive+0x44>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d10e      	bne.n	8007c04 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2204      	movs	r2, #4
 8007bea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007bee:	88fa      	ldrh	r2, [r7, #6]
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	9300      	str	r3, [sp, #0]
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	68ba      	ldr	r2, [r7, #8]
 8007bf8:	68b9      	ldr	r1, [r7, #8]
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f000 f8f1 	bl	8007de2 <HAL_SPI_TransmitReceive>
 8007c00:	4603      	mov	r3, r0
 8007c02:	e0ea      	b.n	8007dda <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d101      	bne.n	8007c12 <HAL_SPI_Receive+0x52>
 8007c0e:	2302      	movs	r3, #2
 8007c10:	e0e3      	b.n	8007dda <HAL_SPI_Receive+0x21a>
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2201      	movs	r2, #1
 8007c16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c1a:	f7fb fd45 	bl	80036a8 <HAL_GetTick>
 8007c1e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d002      	beq.n	8007c32 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007c2c:	2302      	movs	r3, #2
 8007c2e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007c30:	e0ca      	b.n	8007dc8 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d002      	beq.n	8007c3e <HAL_SPI_Receive+0x7e>
 8007c38:	88fb      	ldrh	r3, [r7, #6]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d102      	bne.n	8007c44 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007c42:	e0c1      	b.n	8007dc8 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2204      	movs	r2, #4
 8007c48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	68ba      	ldr	r2, [r7, #8]
 8007c56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	88fa      	ldrh	r2, [r7, #6]
 8007c5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	88fa      	ldrh	r2, [r7, #6]
 8007c62:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2200      	movs	r2, #0
 8007c68:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2200      	movs	r2, #0
 8007c74:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c8a:	d10f      	bne.n	8007cac <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c9a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007caa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cb6:	2b40      	cmp	r3, #64	; 0x40
 8007cb8:	d007      	beq.n	8007cca <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cc8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d162      	bne.n	8007d98 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007cd2:	e02e      	b.n	8007d32 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	f003 0301 	and.w	r3, r3, #1
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d115      	bne.n	8007d0e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f103 020c 	add.w	r2, r3, #12
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cee:	7812      	ldrb	r2, [r2, #0]
 8007cf0:	b2d2      	uxtb	r2, r2
 8007cf2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf8:	1c5a      	adds	r2, r3, #1
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	3b01      	subs	r3, #1
 8007d06:	b29a      	uxth	r2, r3
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007d0c:	e011      	b.n	8007d32 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d0e:	f7fb fccb 	bl	80036a8 <HAL_GetTick>
 8007d12:	4602      	mov	r2, r0
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	1ad3      	subs	r3, r2, r3
 8007d18:	683a      	ldr	r2, [r7, #0]
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d803      	bhi.n	8007d26 <HAL_SPI_Receive+0x166>
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d24:	d102      	bne.n	8007d2c <HAL_SPI_Receive+0x16c>
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d102      	bne.n	8007d32 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007d2c:	2303      	movs	r3, #3
 8007d2e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007d30:	e04a      	b.n	8007dc8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d1cb      	bne.n	8007cd4 <HAL_SPI_Receive+0x114>
 8007d3c:	e031      	b.n	8007da2 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	f003 0301 	and.w	r3, r3, #1
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d113      	bne.n	8007d74 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	68da      	ldr	r2, [r3, #12]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d56:	b292      	uxth	r2, r2
 8007d58:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d5e:	1c9a      	adds	r2, r3, #2
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	b29a      	uxth	r2, r3
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007d72:	e011      	b.n	8007d98 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d74:	f7fb fc98 	bl	80036a8 <HAL_GetTick>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	1ad3      	subs	r3, r2, r3
 8007d7e:	683a      	ldr	r2, [r7, #0]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d803      	bhi.n	8007d8c <HAL_SPI_Receive+0x1cc>
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d8a:	d102      	bne.n	8007d92 <HAL_SPI_Receive+0x1d2>
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d102      	bne.n	8007d98 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007d92:	2303      	movs	r3, #3
 8007d94:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007d96:	e017      	b.n	8007dc8 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1cd      	bne.n	8007d3e <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007da2:	693a      	ldr	r2, [r7, #16]
 8007da4:	6839      	ldr	r1, [r7, #0]
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	f000 fa54 	bl	8008254 <SPI_EndRxTransaction>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d002      	beq.n	8007db8 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2220      	movs	r2, #32
 8007db6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d002      	beq.n	8007dc6 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	75fb      	strb	r3, [r7, #23]
 8007dc4:	e000      	b.n	8007dc8 <HAL_SPI_Receive+0x208>
  }

error :
 8007dc6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3718      	adds	r7, #24
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}

08007de2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007de2:	b580      	push	{r7, lr}
 8007de4:	b08c      	sub	sp, #48	; 0x30
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	60f8      	str	r0, [r7, #12]
 8007dea:	60b9      	str	r1, [r7, #8]
 8007dec:	607a      	str	r2, [r7, #4]
 8007dee:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007df0:	2301      	movs	r3, #1
 8007df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007df4:	2300      	movs	r3, #0
 8007df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d101      	bne.n	8007e08 <HAL_SPI_TransmitReceive+0x26>
 8007e04:	2302      	movs	r3, #2
 8007e06:	e18a      	b.n	800811e <HAL_SPI_TransmitReceive+0x33c>
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e10:	f7fb fc4a 	bl	80036a8 <HAL_GetTick>
 8007e14:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007e26:	887b      	ldrh	r3, [r7, #2]
 8007e28:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007e2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d00f      	beq.n	8007e52 <HAL_SPI_TransmitReceive+0x70>
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e38:	d107      	bne.n	8007e4a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d103      	bne.n	8007e4a <HAL_SPI_TransmitReceive+0x68>
 8007e42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e46:	2b04      	cmp	r3, #4
 8007e48:	d003      	beq.n	8007e52 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007e4a:	2302      	movs	r3, #2
 8007e4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007e50:	e15b      	b.n	800810a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d005      	beq.n	8007e64 <HAL_SPI_TransmitReceive+0x82>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d002      	beq.n	8007e64 <HAL_SPI_TransmitReceive+0x82>
 8007e5e:	887b      	ldrh	r3, [r7, #2]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d103      	bne.n	8007e6c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007e6a:	e14e      	b.n	800810a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	2b04      	cmp	r3, #4
 8007e76:	d003      	beq.n	8007e80 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2205      	movs	r2, #5
 8007e7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2200      	movs	r2, #0
 8007e84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	887a      	ldrh	r2, [r7, #2]
 8007e90:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	887a      	ldrh	r2, [r7, #2]
 8007e96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	68ba      	ldr	r2, [r7, #8]
 8007e9c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	887a      	ldrh	r2, [r7, #2]
 8007ea2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	887a      	ldrh	r2, [r7, #2]
 8007ea8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2200      	movs	r2, #0
 8007eae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ec0:	2b40      	cmp	r3, #64	; 0x40
 8007ec2:	d007      	beq.n	8007ed4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ed2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007edc:	d178      	bne.n	8007fd0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d002      	beq.n	8007eec <HAL_SPI_TransmitReceive+0x10a>
 8007ee6:	8b7b      	ldrh	r3, [r7, #26]
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d166      	bne.n	8007fba <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef0:	881a      	ldrh	r2, [r3, #0]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007efc:	1c9a      	adds	r2, r3, #2
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	3b01      	subs	r3, #1
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f10:	e053      	b.n	8007fba <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	f003 0302 	and.w	r3, r3, #2
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	d11b      	bne.n	8007f58 <HAL_SPI_TransmitReceive+0x176>
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d016      	beq.n	8007f58 <HAL_SPI_TransmitReceive+0x176>
 8007f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d113      	bne.n	8007f58 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f34:	881a      	ldrh	r2, [r3, #0]
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f40:	1c9a      	adds	r2, r3, #2
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	b29a      	uxth	r2, r3
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f54:	2300      	movs	r3, #0
 8007f56:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	f003 0301 	and.w	r3, r3, #1
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d119      	bne.n	8007f9a <HAL_SPI_TransmitReceive+0x1b8>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d014      	beq.n	8007f9a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	68da      	ldr	r2, [r3, #12]
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f7a:	b292      	uxth	r2, r2
 8007f7c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f82:	1c9a      	adds	r2, r3, #2
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	3b01      	subs	r3, #1
 8007f90:	b29a      	uxth	r2, r3
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f96:	2301      	movs	r3, #1
 8007f98:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007f9a:	f7fb fb85 	bl	80036a8 <HAL_GetTick>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa2:	1ad3      	subs	r3, r2, r3
 8007fa4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d807      	bhi.n	8007fba <HAL_SPI_TransmitReceive+0x1d8>
 8007faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fb0:	d003      	beq.n	8007fba <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007fb8:	e0a7      	b.n	800810a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1a6      	bne.n	8007f12 <HAL_SPI_TransmitReceive+0x130>
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d1a1      	bne.n	8007f12 <HAL_SPI_TransmitReceive+0x130>
 8007fce:	e07c      	b.n	80080ca <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d002      	beq.n	8007fde <HAL_SPI_TransmitReceive+0x1fc>
 8007fd8:	8b7b      	ldrh	r3, [r7, #26]
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d16b      	bne.n	80080b6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	330c      	adds	r3, #12
 8007fe8:	7812      	ldrb	r2, [r2, #0]
 8007fea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff0:	1c5a      	adds	r2, r3, #1
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	3b01      	subs	r3, #1
 8007ffe:	b29a      	uxth	r2, r3
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008004:	e057      	b.n	80080b6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	f003 0302 	and.w	r3, r3, #2
 8008010:	2b02      	cmp	r3, #2
 8008012:	d11c      	bne.n	800804e <HAL_SPI_TransmitReceive+0x26c>
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008018:	b29b      	uxth	r3, r3
 800801a:	2b00      	cmp	r3, #0
 800801c:	d017      	beq.n	800804e <HAL_SPI_TransmitReceive+0x26c>
 800801e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008020:	2b01      	cmp	r3, #1
 8008022:	d114      	bne.n	800804e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	330c      	adds	r3, #12
 800802e:	7812      	ldrb	r2, [r2, #0]
 8008030:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008036:	1c5a      	adds	r2, r3, #1
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008040:	b29b      	uxth	r3, r3
 8008042:	3b01      	subs	r3, #1
 8008044:	b29a      	uxth	r2, r3
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800804a:	2300      	movs	r3, #0
 800804c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	f003 0301 	and.w	r3, r3, #1
 8008058:	2b01      	cmp	r3, #1
 800805a:	d119      	bne.n	8008090 <HAL_SPI_TransmitReceive+0x2ae>
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008060:	b29b      	uxth	r3, r3
 8008062:	2b00      	cmp	r3, #0
 8008064:	d014      	beq.n	8008090 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	68da      	ldr	r2, [r3, #12]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008070:	b2d2      	uxtb	r2, r2
 8008072:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008078:	1c5a      	adds	r2, r3, #1
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008082:	b29b      	uxth	r3, r3
 8008084:	3b01      	subs	r3, #1
 8008086:	b29a      	uxth	r2, r3
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800808c:	2301      	movs	r3, #1
 800808e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008090:	f7fb fb0a 	bl	80036a8 <HAL_GetTick>
 8008094:	4602      	mov	r2, r0
 8008096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008098:	1ad3      	subs	r3, r2, r3
 800809a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800809c:	429a      	cmp	r2, r3
 800809e:	d803      	bhi.n	80080a8 <HAL_SPI_TransmitReceive+0x2c6>
 80080a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080a6:	d102      	bne.n	80080ae <HAL_SPI_TransmitReceive+0x2cc>
 80080a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d103      	bne.n	80080b6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80080ae:	2303      	movs	r3, #3
 80080b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80080b4:	e029      	b.n	800810a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d1a2      	bne.n	8008006 <HAL_SPI_TransmitReceive+0x224>
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d19d      	bne.n	8008006 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80080ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80080ce:	68f8      	ldr	r0, [r7, #12]
 80080d0:	f000 f926 	bl	8008320 <SPI_EndRxTxTransaction>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d006      	beq.n	80080e8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2220      	movs	r2, #32
 80080e4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80080e6:	e010      	b.n	800810a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d10b      	bne.n	8008108 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80080f0:	2300      	movs	r3, #0
 80080f2:	617b      	str	r3, [r7, #20]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	617b      	str	r3, [r7, #20]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	617b      	str	r3, [r7, #20]
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	e000      	b.n	800810a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008108:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2201      	movs	r2, #1
 800810e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2200      	movs	r2, #0
 8008116:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800811a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800811e:	4618      	mov	r0, r3
 8008120:	3730      	adds	r7, #48	; 0x30
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008126:	b480      	push	{r7}
 8008128:	b083      	sub	sp, #12
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008134:	b2db      	uxtb	r3, r3
}
 8008136:	4618      	mov	r0, r3
 8008138:	370c      	adds	r7, #12
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr
	...

08008144 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b088      	sub	sp, #32
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	603b      	str	r3, [r7, #0]
 8008150:	4613      	mov	r3, r2
 8008152:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008154:	f7fb faa8 	bl	80036a8 <HAL_GetTick>
 8008158:	4602      	mov	r2, r0
 800815a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815c:	1a9b      	subs	r3, r3, r2
 800815e:	683a      	ldr	r2, [r7, #0]
 8008160:	4413      	add	r3, r2
 8008162:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008164:	f7fb faa0 	bl	80036a8 <HAL_GetTick>
 8008168:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800816a:	4b39      	ldr	r3, [pc, #228]	; (8008250 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	015b      	lsls	r3, r3, #5
 8008170:	0d1b      	lsrs	r3, r3, #20
 8008172:	69fa      	ldr	r2, [r7, #28]
 8008174:	fb02 f303 	mul.w	r3, r2, r3
 8008178:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800817a:	e054      	b.n	8008226 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008182:	d050      	beq.n	8008226 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008184:	f7fb fa90 	bl	80036a8 <HAL_GetTick>
 8008188:	4602      	mov	r2, r0
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	1ad3      	subs	r3, r2, r3
 800818e:	69fa      	ldr	r2, [r7, #28]
 8008190:	429a      	cmp	r2, r3
 8008192:	d902      	bls.n	800819a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d13d      	bne.n	8008216 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	685a      	ldr	r2, [r3, #4]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80081a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081b2:	d111      	bne.n	80081d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081bc:	d004      	beq.n	80081c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081c6:	d107      	bne.n	80081d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081e0:	d10f      	bne.n	8008202 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081f0:	601a      	str	r2, [r3, #0]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008200:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2201      	movs	r2, #1
 8008206:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008212:	2303      	movs	r3, #3
 8008214:	e017      	b.n	8008246 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d101      	bne.n	8008220 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800821c:	2300      	movs	r3, #0
 800821e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	3b01      	subs	r3, #1
 8008224:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	689a      	ldr	r2, [r3, #8]
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	4013      	ands	r3, r2
 8008230:	68ba      	ldr	r2, [r7, #8]
 8008232:	429a      	cmp	r2, r3
 8008234:	bf0c      	ite	eq
 8008236:	2301      	moveq	r3, #1
 8008238:	2300      	movne	r3, #0
 800823a:	b2db      	uxtb	r3, r3
 800823c:	461a      	mov	r2, r3
 800823e:	79fb      	ldrb	r3, [r7, #7]
 8008240:	429a      	cmp	r2, r3
 8008242:	d19b      	bne.n	800817c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3720      	adds	r7, #32
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	20000000 	.word	0x20000000

08008254 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b086      	sub	sp, #24
 8008258:	af02      	add	r7, sp, #8
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008268:	d111      	bne.n	800828e <SPI_EndRxTransaction+0x3a>
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008272:	d004      	beq.n	800827e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800827c:	d107      	bne.n	800828e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800828c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008296:	d12a      	bne.n	80082ee <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082a0:	d012      	beq.n	80082c8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	9300      	str	r3, [sp, #0]
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	2200      	movs	r2, #0
 80082aa:	2180      	movs	r1, #128	; 0x80
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	f7ff ff49 	bl	8008144 <SPI_WaitFlagStateUntilTimeout>
 80082b2:	4603      	mov	r3, r0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d02d      	beq.n	8008314 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082bc:	f043 0220 	orr.w	r2, r3, #32
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e026      	b.n	8008316 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	2200      	movs	r2, #0
 80082d0:	2101      	movs	r1, #1
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f7ff ff36 	bl	8008144 <SPI_WaitFlagStateUntilTimeout>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d01a      	beq.n	8008314 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082e2:	f043 0220 	orr.w	r2, r3, #32
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80082ea:	2303      	movs	r3, #3
 80082ec:	e013      	b.n	8008316 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	9300      	str	r3, [sp, #0]
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	2200      	movs	r2, #0
 80082f6:	2101      	movs	r1, #1
 80082f8:	68f8      	ldr	r0, [r7, #12]
 80082fa:	f7ff ff23 	bl	8008144 <SPI_WaitFlagStateUntilTimeout>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d007      	beq.n	8008314 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008308:	f043 0220 	orr.w	r2, r3, #32
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008310:	2303      	movs	r3, #3
 8008312:	e000      	b.n	8008316 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3710      	adds	r7, #16
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
	...

08008320 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b088      	sub	sp, #32
 8008324:	af02      	add	r7, sp, #8
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800832c:	4b1b      	ldr	r3, [pc, #108]	; (800839c <SPI_EndRxTxTransaction+0x7c>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a1b      	ldr	r2, [pc, #108]	; (80083a0 <SPI_EndRxTxTransaction+0x80>)
 8008332:	fba2 2303 	umull	r2, r3, r2, r3
 8008336:	0d5b      	lsrs	r3, r3, #21
 8008338:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800833c:	fb02 f303 	mul.w	r3, r2, r3
 8008340:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800834a:	d112      	bne.n	8008372 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	9300      	str	r3, [sp, #0]
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	2200      	movs	r2, #0
 8008354:	2180      	movs	r1, #128	; 0x80
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	f7ff fef4 	bl	8008144 <SPI_WaitFlagStateUntilTimeout>
 800835c:	4603      	mov	r3, r0
 800835e:	2b00      	cmp	r3, #0
 8008360:	d016      	beq.n	8008390 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008366:	f043 0220 	orr.w	r2, r3, #32
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800836e:	2303      	movs	r3, #3
 8008370:	e00f      	b.n	8008392 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00a      	beq.n	800838e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	3b01      	subs	r3, #1
 800837c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008388:	2b80      	cmp	r3, #128	; 0x80
 800838a:	d0f2      	beq.n	8008372 <SPI_EndRxTxTransaction+0x52>
 800838c:	e000      	b.n	8008390 <SPI_EndRxTxTransaction+0x70>
        break;
 800838e:	bf00      	nop
  }

  return HAL_OK;
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	3718      	adds	r7, #24
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	20000000 	.word	0x20000000
 80083a0:	165e9f81 	.word	0x165e9f81

080083a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d101      	bne.n	80083b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e041      	b.n	800843a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d106      	bne.n	80083d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f7f9 fc28 	bl	8001c20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2202      	movs	r2, #2
 80083d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	3304      	adds	r3, #4
 80083e0:	4619      	mov	r1, r3
 80083e2:	4610      	mov	r0, r2
 80083e4:	f000 fa96 	bl	8008914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2201      	movs	r2, #1
 8008404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2201      	movs	r2, #1
 800840c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2201      	movs	r2, #1
 8008414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2201      	movs	r2, #1
 800841c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2201      	movs	r2, #1
 800842c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008438:	2300      	movs	r3, #0
}
 800843a:	4618      	mov	r0, r3
 800843c:	3708      	adds	r7, #8
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
	...

08008444 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008444:	b480      	push	{r7}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008452:	b2db      	uxtb	r3, r3
 8008454:	2b01      	cmp	r3, #1
 8008456:	d001      	beq.n	800845c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	e04e      	b.n	80084fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2202      	movs	r2, #2
 8008460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	68da      	ldr	r2, [r3, #12]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f042 0201 	orr.w	r2, r2, #1
 8008472:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a23      	ldr	r2, [pc, #140]	; (8008508 <HAL_TIM_Base_Start_IT+0xc4>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d022      	beq.n	80084c4 <HAL_TIM_Base_Start_IT+0x80>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008486:	d01d      	beq.n	80084c4 <HAL_TIM_Base_Start_IT+0x80>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a1f      	ldr	r2, [pc, #124]	; (800850c <HAL_TIM_Base_Start_IT+0xc8>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d018      	beq.n	80084c4 <HAL_TIM_Base_Start_IT+0x80>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a1e      	ldr	r2, [pc, #120]	; (8008510 <HAL_TIM_Base_Start_IT+0xcc>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d013      	beq.n	80084c4 <HAL_TIM_Base_Start_IT+0x80>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a1c      	ldr	r2, [pc, #112]	; (8008514 <HAL_TIM_Base_Start_IT+0xd0>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d00e      	beq.n	80084c4 <HAL_TIM_Base_Start_IT+0x80>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a1b      	ldr	r2, [pc, #108]	; (8008518 <HAL_TIM_Base_Start_IT+0xd4>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d009      	beq.n	80084c4 <HAL_TIM_Base_Start_IT+0x80>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a19      	ldr	r2, [pc, #100]	; (800851c <HAL_TIM_Base_Start_IT+0xd8>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d004      	beq.n	80084c4 <HAL_TIM_Base_Start_IT+0x80>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a18      	ldr	r2, [pc, #96]	; (8008520 <HAL_TIM_Base_Start_IT+0xdc>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d111      	bne.n	80084e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	f003 0307 	and.w	r3, r3, #7
 80084ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2b06      	cmp	r3, #6
 80084d4:	d010      	beq.n	80084f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f042 0201 	orr.w	r2, r2, #1
 80084e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084e6:	e007      	b.n	80084f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f042 0201 	orr.w	r2, r2, #1
 80084f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80084f8:	2300      	movs	r3, #0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3714      	adds	r7, #20
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr
 8008506:	bf00      	nop
 8008508:	40010000 	.word	0x40010000
 800850c:	40000400 	.word	0x40000400
 8008510:	40000800 	.word	0x40000800
 8008514:	40000c00 	.word	0x40000c00
 8008518:	40010400 	.word	0x40010400
 800851c:	40014000 	.word	0x40014000
 8008520:	40001800 	.word	0x40001800

08008524 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	f003 0302 	and.w	r3, r3, #2
 8008536:	2b02      	cmp	r3, #2
 8008538:	d122      	bne.n	8008580 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	f003 0302 	and.w	r3, r3, #2
 8008544:	2b02      	cmp	r3, #2
 8008546:	d11b      	bne.n	8008580 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f06f 0202 	mvn.w	r2, #2
 8008550:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2201      	movs	r2, #1
 8008556:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	699b      	ldr	r3, [r3, #24]
 800855e:	f003 0303 	and.w	r3, r3, #3
 8008562:	2b00      	cmp	r3, #0
 8008564:	d003      	beq.n	800856e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 f9b5 	bl	80088d6 <HAL_TIM_IC_CaptureCallback>
 800856c:	e005      	b.n	800857a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 f9a7 	bl	80088c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 f9b8 	bl	80088ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2200      	movs	r2, #0
 800857e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	691b      	ldr	r3, [r3, #16]
 8008586:	f003 0304 	and.w	r3, r3, #4
 800858a:	2b04      	cmp	r3, #4
 800858c:	d122      	bne.n	80085d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	68db      	ldr	r3, [r3, #12]
 8008594:	f003 0304 	and.w	r3, r3, #4
 8008598:	2b04      	cmp	r3, #4
 800859a:	d11b      	bne.n	80085d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f06f 0204 	mvn.w	r2, #4
 80085a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2202      	movs	r2, #2
 80085aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	699b      	ldr	r3, [r3, #24]
 80085b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d003      	beq.n	80085c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f000 f98b 	bl	80088d6 <HAL_TIM_IC_CaptureCallback>
 80085c0:	e005      	b.n	80085ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 f97d 	bl	80088c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 f98e 	bl	80088ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2200      	movs	r2, #0
 80085d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	f003 0308 	and.w	r3, r3, #8
 80085de:	2b08      	cmp	r3, #8
 80085e0:	d122      	bne.n	8008628 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	f003 0308 	and.w	r3, r3, #8
 80085ec:	2b08      	cmp	r3, #8
 80085ee:	d11b      	bne.n	8008628 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f06f 0208 	mvn.w	r2, #8
 80085f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2204      	movs	r2, #4
 80085fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	69db      	ldr	r3, [r3, #28]
 8008606:	f003 0303 	and.w	r3, r3, #3
 800860a:	2b00      	cmp	r3, #0
 800860c:	d003      	beq.n	8008616 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 f961 	bl	80088d6 <HAL_TIM_IC_CaptureCallback>
 8008614:	e005      	b.n	8008622 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 f953 	bl	80088c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 f964 	bl	80088ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	691b      	ldr	r3, [r3, #16]
 800862e:	f003 0310 	and.w	r3, r3, #16
 8008632:	2b10      	cmp	r3, #16
 8008634:	d122      	bne.n	800867c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	f003 0310 	and.w	r3, r3, #16
 8008640:	2b10      	cmp	r3, #16
 8008642:	d11b      	bne.n	800867c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f06f 0210 	mvn.w	r2, #16
 800864c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2208      	movs	r2, #8
 8008652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	69db      	ldr	r3, [r3, #28]
 800865a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800865e:	2b00      	cmp	r3, #0
 8008660:	d003      	beq.n	800866a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 f937 	bl	80088d6 <HAL_TIM_IC_CaptureCallback>
 8008668:	e005      	b.n	8008676 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 f929 	bl	80088c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 f93a 	bl	80088ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	691b      	ldr	r3, [r3, #16]
 8008682:	f003 0301 	and.w	r3, r3, #1
 8008686:	2b01      	cmp	r3, #1
 8008688:	d10e      	bne.n	80086a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	f003 0301 	and.w	r3, r3, #1
 8008694:	2b01      	cmp	r3, #1
 8008696:	d107      	bne.n	80086a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f06f 0201 	mvn.w	r2, #1
 80086a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f7f8 ffa6 	bl	80015f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	691b      	ldr	r3, [r3, #16]
 80086ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086b2:	2b80      	cmp	r3, #128	; 0x80
 80086b4:	d10e      	bne.n	80086d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086c0:	2b80      	cmp	r3, #128	; 0x80
 80086c2:	d107      	bne.n	80086d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80086cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 fae0 	bl	8008c94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086de:	2b40      	cmp	r3, #64	; 0x40
 80086e0:	d10e      	bne.n	8008700 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ec:	2b40      	cmp	r3, #64	; 0x40
 80086ee:	d107      	bne.n	8008700 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80086f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 f8ff 	bl	80088fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	691b      	ldr	r3, [r3, #16]
 8008706:	f003 0320 	and.w	r3, r3, #32
 800870a:	2b20      	cmp	r3, #32
 800870c:	d10e      	bne.n	800872c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	f003 0320 	and.w	r3, r3, #32
 8008718:	2b20      	cmp	r3, #32
 800871a:	d107      	bne.n	800872c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f06f 0220 	mvn.w	r2, #32
 8008724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 faaa 	bl	8008c80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800872c:	bf00      	nop
 800872e:	3708      	adds	r7, #8
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800873e:	2300      	movs	r3, #0
 8008740:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008748:	2b01      	cmp	r3, #1
 800874a:	d101      	bne.n	8008750 <HAL_TIM_ConfigClockSource+0x1c>
 800874c:	2302      	movs	r3, #2
 800874e:	e0b4      	b.n	80088ba <HAL_TIM_ConfigClockSource+0x186>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2201      	movs	r2, #1
 8008754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2202      	movs	r2, #2
 800875c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800876e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008776:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	68ba      	ldr	r2, [r7, #8]
 800877e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008788:	d03e      	beq.n	8008808 <HAL_TIM_ConfigClockSource+0xd4>
 800878a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800878e:	f200 8087 	bhi.w	80088a0 <HAL_TIM_ConfigClockSource+0x16c>
 8008792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008796:	f000 8086 	beq.w	80088a6 <HAL_TIM_ConfigClockSource+0x172>
 800879a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800879e:	d87f      	bhi.n	80088a0 <HAL_TIM_ConfigClockSource+0x16c>
 80087a0:	2b70      	cmp	r3, #112	; 0x70
 80087a2:	d01a      	beq.n	80087da <HAL_TIM_ConfigClockSource+0xa6>
 80087a4:	2b70      	cmp	r3, #112	; 0x70
 80087a6:	d87b      	bhi.n	80088a0 <HAL_TIM_ConfigClockSource+0x16c>
 80087a8:	2b60      	cmp	r3, #96	; 0x60
 80087aa:	d050      	beq.n	800884e <HAL_TIM_ConfigClockSource+0x11a>
 80087ac:	2b60      	cmp	r3, #96	; 0x60
 80087ae:	d877      	bhi.n	80088a0 <HAL_TIM_ConfigClockSource+0x16c>
 80087b0:	2b50      	cmp	r3, #80	; 0x50
 80087b2:	d03c      	beq.n	800882e <HAL_TIM_ConfigClockSource+0xfa>
 80087b4:	2b50      	cmp	r3, #80	; 0x50
 80087b6:	d873      	bhi.n	80088a0 <HAL_TIM_ConfigClockSource+0x16c>
 80087b8:	2b40      	cmp	r3, #64	; 0x40
 80087ba:	d058      	beq.n	800886e <HAL_TIM_ConfigClockSource+0x13a>
 80087bc:	2b40      	cmp	r3, #64	; 0x40
 80087be:	d86f      	bhi.n	80088a0 <HAL_TIM_ConfigClockSource+0x16c>
 80087c0:	2b30      	cmp	r3, #48	; 0x30
 80087c2:	d064      	beq.n	800888e <HAL_TIM_ConfigClockSource+0x15a>
 80087c4:	2b30      	cmp	r3, #48	; 0x30
 80087c6:	d86b      	bhi.n	80088a0 <HAL_TIM_ConfigClockSource+0x16c>
 80087c8:	2b20      	cmp	r3, #32
 80087ca:	d060      	beq.n	800888e <HAL_TIM_ConfigClockSource+0x15a>
 80087cc:	2b20      	cmp	r3, #32
 80087ce:	d867      	bhi.n	80088a0 <HAL_TIM_ConfigClockSource+0x16c>
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d05c      	beq.n	800888e <HAL_TIM_ConfigClockSource+0x15a>
 80087d4:	2b10      	cmp	r3, #16
 80087d6:	d05a      	beq.n	800888e <HAL_TIM_ConfigClockSource+0x15a>
 80087d8:	e062      	b.n	80088a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6818      	ldr	r0, [r3, #0]
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	6899      	ldr	r1, [r3, #8]
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	685a      	ldr	r2, [r3, #4]
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	f000 f9ad 	bl	8008b48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80087fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	68ba      	ldr	r2, [r7, #8]
 8008804:	609a      	str	r2, [r3, #8]
      break;
 8008806:	e04f      	b.n	80088a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6818      	ldr	r0, [r3, #0]
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	6899      	ldr	r1, [r3, #8]
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	685a      	ldr	r2, [r3, #4]
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	f000 f996 	bl	8008b48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	689a      	ldr	r2, [r3, #8]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800882a:	609a      	str	r2, [r3, #8]
      break;
 800882c:	e03c      	b.n	80088a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6818      	ldr	r0, [r3, #0]
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	6859      	ldr	r1, [r3, #4]
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	68db      	ldr	r3, [r3, #12]
 800883a:	461a      	mov	r2, r3
 800883c:	f000 f90a 	bl	8008a54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2150      	movs	r1, #80	; 0x50
 8008846:	4618      	mov	r0, r3
 8008848:	f000 f963 	bl	8008b12 <TIM_ITRx_SetConfig>
      break;
 800884c:	e02c      	b.n	80088a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6818      	ldr	r0, [r3, #0]
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	6859      	ldr	r1, [r3, #4]
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	461a      	mov	r2, r3
 800885c:	f000 f929 	bl	8008ab2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2160      	movs	r1, #96	; 0x60
 8008866:	4618      	mov	r0, r3
 8008868:	f000 f953 	bl	8008b12 <TIM_ITRx_SetConfig>
      break;
 800886c:	e01c      	b.n	80088a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6818      	ldr	r0, [r3, #0]
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	6859      	ldr	r1, [r3, #4]
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	461a      	mov	r2, r3
 800887c:	f000 f8ea 	bl	8008a54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2140      	movs	r1, #64	; 0x40
 8008886:	4618      	mov	r0, r3
 8008888:	f000 f943 	bl	8008b12 <TIM_ITRx_SetConfig>
      break;
 800888c:	e00c      	b.n	80088a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4619      	mov	r1, r3
 8008898:	4610      	mov	r0, r2
 800889a:	f000 f93a 	bl	8008b12 <TIM_ITRx_SetConfig>
      break;
 800889e:	e003      	b.n	80088a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	73fb      	strb	r3, [r7, #15]
      break;
 80088a4:	e000      	b.n	80088a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80088a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80088b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3710      	adds	r7, #16
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80088c2:	b480      	push	{r7}
 80088c4:	b083      	sub	sp, #12
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80088ca:	bf00      	nop
 80088cc:	370c      	adds	r7, #12
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr

080088d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80088d6:	b480      	push	{r7}
 80088d8:	b083      	sub	sp, #12
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80088de:	bf00      	nop
 80088e0:	370c      	adds	r7, #12
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr

080088ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80088ea:	b480      	push	{r7}
 80088ec:	b083      	sub	sp, #12
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80088f2:	bf00      	nop
 80088f4:	370c      	adds	r7, #12
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr

080088fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80088fe:	b480      	push	{r7}
 8008900:	b083      	sub	sp, #12
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008906:	bf00      	nop
 8008908:	370c      	adds	r7, #12
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr
	...

08008914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008914:	b480      	push	{r7}
 8008916:	b085      	sub	sp, #20
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4a40      	ldr	r2, [pc, #256]	; (8008a28 <TIM_Base_SetConfig+0x114>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d013      	beq.n	8008954 <TIM_Base_SetConfig+0x40>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008932:	d00f      	beq.n	8008954 <TIM_Base_SetConfig+0x40>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	4a3d      	ldr	r2, [pc, #244]	; (8008a2c <TIM_Base_SetConfig+0x118>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d00b      	beq.n	8008954 <TIM_Base_SetConfig+0x40>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	4a3c      	ldr	r2, [pc, #240]	; (8008a30 <TIM_Base_SetConfig+0x11c>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d007      	beq.n	8008954 <TIM_Base_SetConfig+0x40>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	4a3b      	ldr	r2, [pc, #236]	; (8008a34 <TIM_Base_SetConfig+0x120>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d003      	beq.n	8008954 <TIM_Base_SetConfig+0x40>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	4a3a      	ldr	r2, [pc, #232]	; (8008a38 <TIM_Base_SetConfig+0x124>)
 8008950:	4293      	cmp	r3, r2
 8008952:	d108      	bne.n	8008966 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800895a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	68fa      	ldr	r2, [r7, #12]
 8008962:	4313      	orrs	r3, r2
 8008964:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	4a2f      	ldr	r2, [pc, #188]	; (8008a28 <TIM_Base_SetConfig+0x114>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d02b      	beq.n	80089c6 <TIM_Base_SetConfig+0xb2>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008974:	d027      	beq.n	80089c6 <TIM_Base_SetConfig+0xb2>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	4a2c      	ldr	r2, [pc, #176]	; (8008a2c <TIM_Base_SetConfig+0x118>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d023      	beq.n	80089c6 <TIM_Base_SetConfig+0xb2>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	4a2b      	ldr	r2, [pc, #172]	; (8008a30 <TIM_Base_SetConfig+0x11c>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d01f      	beq.n	80089c6 <TIM_Base_SetConfig+0xb2>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	4a2a      	ldr	r2, [pc, #168]	; (8008a34 <TIM_Base_SetConfig+0x120>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d01b      	beq.n	80089c6 <TIM_Base_SetConfig+0xb2>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4a29      	ldr	r2, [pc, #164]	; (8008a38 <TIM_Base_SetConfig+0x124>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d017      	beq.n	80089c6 <TIM_Base_SetConfig+0xb2>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4a28      	ldr	r2, [pc, #160]	; (8008a3c <TIM_Base_SetConfig+0x128>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d013      	beq.n	80089c6 <TIM_Base_SetConfig+0xb2>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	4a27      	ldr	r2, [pc, #156]	; (8008a40 <TIM_Base_SetConfig+0x12c>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d00f      	beq.n	80089c6 <TIM_Base_SetConfig+0xb2>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4a26      	ldr	r2, [pc, #152]	; (8008a44 <TIM_Base_SetConfig+0x130>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d00b      	beq.n	80089c6 <TIM_Base_SetConfig+0xb2>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4a25      	ldr	r2, [pc, #148]	; (8008a48 <TIM_Base_SetConfig+0x134>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d007      	beq.n	80089c6 <TIM_Base_SetConfig+0xb2>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	4a24      	ldr	r2, [pc, #144]	; (8008a4c <TIM_Base_SetConfig+0x138>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d003      	beq.n	80089c6 <TIM_Base_SetConfig+0xb2>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	4a23      	ldr	r2, [pc, #140]	; (8008a50 <TIM_Base_SetConfig+0x13c>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d108      	bne.n	80089d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	68db      	ldr	r3, [r3, #12]
 80089d2:	68fa      	ldr	r2, [r7, #12]
 80089d4:	4313      	orrs	r3, r2
 80089d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	695b      	ldr	r3, [r3, #20]
 80089e2:	4313      	orrs	r3, r2
 80089e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	68fa      	ldr	r2, [r7, #12]
 80089ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	689a      	ldr	r2, [r3, #8]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	4a0a      	ldr	r2, [pc, #40]	; (8008a28 <TIM_Base_SetConfig+0x114>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d003      	beq.n	8008a0c <TIM_Base_SetConfig+0xf8>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	4a0c      	ldr	r2, [pc, #48]	; (8008a38 <TIM_Base_SetConfig+0x124>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d103      	bne.n	8008a14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	691a      	ldr	r2, [r3, #16]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	615a      	str	r2, [r3, #20]
}
 8008a1a:	bf00      	nop
 8008a1c:	3714      	adds	r7, #20
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop
 8008a28:	40010000 	.word	0x40010000
 8008a2c:	40000400 	.word	0x40000400
 8008a30:	40000800 	.word	0x40000800
 8008a34:	40000c00 	.word	0x40000c00
 8008a38:	40010400 	.word	0x40010400
 8008a3c:	40014000 	.word	0x40014000
 8008a40:	40014400 	.word	0x40014400
 8008a44:	40014800 	.word	0x40014800
 8008a48:	40001800 	.word	0x40001800
 8008a4c:	40001c00 	.word	0x40001c00
 8008a50:	40002000 	.word	0x40002000

08008a54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b087      	sub	sp, #28
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	6a1b      	ldr	r3, [r3, #32]
 8008a64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6a1b      	ldr	r3, [r3, #32]
 8008a6a:	f023 0201 	bic.w	r2, r3, #1
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	699b      	ldr	r3, [r3, #24]
 8008a76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	011b      	lsls	r3, r3, #4
 8008a84:	693a      	ldr	r2, [r7, #16]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	f023 030a 	bic.w	r3, r3, #10
 8008a90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008a92:	697a      	ldr	r2, [r7, #20]
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	693a      	ldr	r2, [r7, #16]
 8008a9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	697a      	ldr	r2, [r7, #20]
 8008aa4:	621a      	str	r2, [r3, #32]
}
 8008aa6:	bf00      	nop
 8008aa8:	371c      	adds	r7, #28
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr

08008ab2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ab2:	b480      	push	{r7}
 8008ab4:	b087      	sub	sp, #28
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	60f8      	str	r0, [r7, #12]
 8008aba:	60b9      	str	r1, [r7, #8]
 8008abc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	6a1b      	ldr	r3, [r3, #32]
 8008ac2:	f023 0210 	bic.w	r2, r3, #16
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	699b      	ldr	r3, [r3, #24]
 8008ace:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	6a1b      	ldr	r3, [r3, #32]
 8008ad4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008adc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	031b      	lsls	r3, r3, #12
 8008ae2:	697a      	ldr	r2, [r7, #20]
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008aee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	011b      	lsls	r3, r3, #4
 8008af4:	693a      	ldr	r2, [r7, #16]
 8008af6:	4313      	orrs	r3, r2
 8008af8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	697a      	ldr	r2, [r7, #20]
 8008afe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	693a      	ldr	r2, [r7, #16]
 8008b04:	621a      	str	r2, [r3, #32]
}
 8008b06:	bf00      	nop
 8008b08:	371c      	adds	r7, #28
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr

08008b12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008b12:	b480      	push	{r7}
 8008b14:	b085      	sub	sp, #20
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
 8008b1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b2a:	683a      	ldr	r2, [r7, #0]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	f043 0307 	orr.w	r3, r3, #7
 8008b34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	68fa      	ldr	r2, [r7, #12]
 8008b3a:	609a      	str	r2, [r3, #8]
}
 8008b3c:	bf00      	nop
 8008b3e:	3714      	adds	r7, #20
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b087      	sub	sp, #28
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	607a      	str	r2, [r7, #4]
 8008b54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	021a      	lsls	r2, r3, #8
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	431a      	orrs	r2, r3
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	697a      	ldr	r2, [r7, #20]
 8008b72:	4313      	orrs	r3, r2
 8008b74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	697a      	ldr	r2, [r7, #20]
 8008b7a:	609a      	str	r2, [r3, #8]
}
 8008b7c:	bf00      	nop
 8008b7e:	371c      	adds	r7, #28
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b085      	sub	sp, #20
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d101      	bne.n	8008ba0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b9c:	2302      	movs	r3, #2
 8008b9e:	e05a      	b.n	8008c56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2202      	movs	r2, #2
 8008bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	68fa      	ldr	r2, [r7, #12]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	68fa      	ldr	r2, [r7, #12]
 8008bd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a21      	ldr	r2, [pc, #132]	; (8008c64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d022      	beq.n	8008c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bec:	d01d      	beq.n	8008c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a1d      	ldr	r2, [pc, #116]	; (8008c68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d018      	beq.n	8008c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a1b      	ldr	r2, [pc, #108]	; (8008c6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d013      	beq.n	8008c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a1a      	ldr	r2, [pc, #104]	; (8008c70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d00e      	beq.n	8008c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a18      	ldr	r2, [pc, #96]	; (8008c74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d009      	beq.n	8008c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a17      	ldr	r2, [pc, #92]	; (8008c78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d004      	beq.n	8008c2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a15      	ldr	r2, [pc, #84]	; (8008c7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d10c      	bne.n	8008c44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	68ba      	ldr	r2, [r7, #8]
 8008c38:	4313      	orrs	r3, r2
 8008c3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	68ba      	ldr	r2, [r7, #8]
 8008c42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3714      	adds	r7, #20
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr
 8008c62:	bf00      	nop
 8008c64:	40010000 	.word	0x40010000
 8008c68:	40000400 	.word	0x40000400
 8008c6c:	40000800 	.word	0x40000800
 8008c70:	40000c00 	.word	0x40000c00
 8008c74:	40010400 	.word	0x40010400
 8008c78:	40014000 	.word	0x40014000
 8008c7c:	40001800 	.word	0x40001800

08008c80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c88:	bf00      	nop
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c9c:	bf00      	nop
 8008c9e:	370c      	adds	r7, #12
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d101      	bne.n	8008cba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e03f      	b.n	8008d3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d106      	bne.n	8008cd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f7f8 fff2 	bl	8001cb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2224      	movs	r2, #36	; 0x24
 8008cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	68da      	ldr	r2, [r3, #12]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008cea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 fcb5 	bl	800965c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	691a      	ldr	r2, [r3, #16]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	695a      	ldr	r2, [r3, #20]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	68da      	ldr	r2, [r3, #12]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008d20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2200      	movs	r2, #0
 8008d26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2220      	movs	r2, #32
 8008d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2220      	movs	r2, #32
 8008d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008d38:	2300      	movs	r3, #0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3708      	adds	r7, #8
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}

08008d42 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008d42:	b480      	push	{r7}
 8008d44:	b085      	sub	sp, #20
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	60f8      	str	r0, [r7, #12]
 8008d4a:	60b9      	str	r1, [r7, #8]
 8008d4c:	4613      	mov	r3, r2
 8008d4e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	2b20      	cmp	r3, #32
 8008d5a:	d130      	bne.n	8008dbe <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d002      	beq.n	8008d68 <HAL_UART_Transmit_IT+0x26>
 8008d62:	88fb      	ldrh	r3, [r7, #6]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d101      	bne.n	8008d6c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	e029      	b.n	8008dc0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d101      	bne.n	8008d7a <HAL_UART_Transmit_IT+0x38>
 8008d76:	2302      	movs	r3, #2
 8008d78:	e022      	b.n	8008dc0 <HAL_UART_Transmit_IT+0x7e>
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	68ba      	ldr	r2, [r7, #8]
 8008d86:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	88fa      	ldrh	r2, [r7, #6]
 8008d8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	88fa      	ldrh	r2, [r7, #6]
 8008d92:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2200      	movs	r2, #0
 8008d98:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2221      	movs	r2, #33	; 0x21
 8008d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	68da      	ldr	r2, [r3, #12]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008db8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	e000      	b.n	8008dc0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008dbe:	2302      	movs	r3, #2
  }
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3714      	adds	r7, #20
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b0ba      	sub	sp, #232	; 0xe8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	68db      	ldr	r3, [r3, #12]
 8008de4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	695b      	ldr	r3, [r3, #20]
 8008dee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008df2:	2300      	movs	r3, #0
 8008df4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e02:	f003 030f 	and.w	r3, r3, #15
 8008e06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008e0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d10f      	bne.n	8008e32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e16:	f003 0320 	and.w	r3, r3, #32
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d009      	beq.n	8008e32 <HAL_UART_IRQHandler+0x66>
 8008e1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e22:	f003 0320 	and.w	r3, r3, #32
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d003      	beq.n	8008e32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 fb5b 	bl	80094e6 <UART_Receive_IT>
      return;
 8008e30:	e256      	b.n	80092e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008e32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	f000 80de 	beq.w	8008ff8 <HAL_UART_IRQHandler+0x22c>
 8008e3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e40:	f003 0301 	and.w	r3, r3, #1
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d106      	bne.n	8008e56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e4c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	f000 80d1 	beq.w	8008ff8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e5a:	f003 0301 	and.w	r3, r3, #1
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d00b      	beq.n	8008e7a <HAL_UART_IRQHandler+0xae>
 8008e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d005      	beq.n	8008e7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e72:	f043 0201 	orr.w	r2, r3, #1
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e7e:	f003 0304 	and.w	r3, r3, #4
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d00b      	beq.n	8008e9e <HAL_UART_IRQHandler+0xd2>
 8008e86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e8a:	f003 0301 	and.w	r3, r3, #1
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d005      	beq.n	8008e9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e96:	f043 0202 	orr.w	r2, r3, #2
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ea2:	f003 0302 	and.w	r3, r3, #2
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d00b      	beq.n	8008ec2 <HAL_UART_IRQHandler+0xf6>
 8008eaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008eae:	f003 0301 	and.w	r3, r3, #1
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d005      	beq.n	8008ec2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eba:	f043 0204 	orr.w	r2, r3, #4
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ec6:	f003 0308 	and.w	r3, r3, #8
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d011      	beq.n	8008ef2 <HAL_UART_IRQHandler+0x126>
 8008ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ed2:	f003 0320 	and.w	r3, r3, #32
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d105      	bne.n	8008ee6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008eda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ede:	f003 0301 	and.w	r3, r3, #1
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d005      	beq.n	8008ef2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eea:	f043 0208 	orr.w	r2, r3, #8
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	f000 81ed 	beq.w	80092d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f00:	f003 0320 	and.w	r3, r3, #32
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d008      	beq.n	8008f1a <HAL_UART_IRQHandler+0x14e>
 8008f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f0c:	f003 0320 	and.w	r3, r3, #32
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d002      	beq.n	8008f1a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 fae6 	bl	80094e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	695b      	ldr	r3, [r3, #20]
 8008f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f24:	2b40      	cmp	r3, #64	; 0x40
 8008f26:	bf0c      	ite	eq
 8008f28:	2301      	moveq	r3, #1
 8008f2a:	2300      	movne	r3, #0
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f36:	f003 0308 	and.w	r3, r3, #8
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d103      	bne.n	8008f46 <HAL_UART_IRQHandler+0x17a>
 8008f3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d04f      	beq.n	8008fe6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 f9ee 	bl	8009328 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	695b      	ldr	r3, [r3, #20]
 8008f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f56:	2b40      	cmp	r3, #64	; 0x40
 8008f58:	d141      	bne.n	8008fde <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	3314      	adds	r3, #20
 8008f60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f68:	e853 3f00 	ldrex	r3, [r3]
 8008f6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008f70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	3314      	adds	r3, #20
 8008f82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008f86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008f8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008f92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008f96:	e841 2300 	strex	r3, r2, [r1]
 8008f9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008f9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d1d9      	bne.n	8008f5a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d013      	beq.n	8008fd6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb2:	4a7d      	ldr	r2, [pc, #500]	; (80091a8 <HAL_UART_IRQHandler+0x3dc>)
 8008fb4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7fa fe02 	bl	8003bc4 <HAL_DMA_Abort_IT>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d016      	beq.n	8008ff4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fcc:	687a      	ldr	r2, [r7, #4]
 8008fce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008fd0:	4610      	mov	r0, r2
 8008fd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fd4:	e00e      	b.n	8008ff4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 f990 	bl	80092fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fdc:	e00a      	b.n	8008ff4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 f98c 	bl	80092fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fe4:	e006      	b.n	8008ff4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 f988 	bl	80092fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008ff2:	e170      	b.n	80092d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ff4:	bf00      	nop
    return;
 8008ff6:	e16e      	b.n	80092d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	f040 814a 	bne.w	8009296 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009006:	f003 0310 	and.w	r3, r3, #16
 800900a:	2b00      	cmp	r3, #0
 800900c:	f000 8143 	beq.w	8009296 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009014:	f003 0310 	and.w	r3, r3, #16
 8009018:	2b00      	cmp	r3, #0
 800901a:	f000 813c 	beq.w	8009296 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800901e:	2300      	movs	r3, #0
 8009020:	60bb      	str	r3, [r7, #8]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	60bb      	str	r3, [r7, #8]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	60bb      	str	r3, [r7, #8]
 8009032:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	695b      	ldr	r3, [r3, #20]
 800903a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800903e:	2b40      	cmp	r3, #64	; 0x40
 8009040:	f040 80b4 	bne.w	80091ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009050:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009054:	2b00      	cmp	r3, #0
 8009056:	f000 8140 	beq.w	80092da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800905e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009062:	429a      	cmp	r2, r3
 8009064:	f080 8139 	bcs.w	80092da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800906e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009074:	69db      	ldr	r3, [r3, #28]
 8009076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800907a:	f000 8088 	beq.w	800918e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	330c      	adds	r3, #12
 8009084:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009088:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800908c:	e853 3f00 	ldrex	r3, [r3]
 8009090:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009094:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800909c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	330c      	adds	r3, #12
 80090a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80090aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80090ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80090b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80090ba:	e841 2300 	strex	r3, r2, [r1]
 80090be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80090c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1d9      	bne.n	800907e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	3314      	adds	r3, #20
 80090d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090d4:	e853 3f00 	ldrex	r3, [r3]
 80090d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80090da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090dc:	f023 0301 	bic.w	r3, r3, #1
 80090e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	3314      	adds	r3, #20
 80090ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80090ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80090f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80090f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80090fa:	e841 2300 	strex	r3, r2, [r1]
 80090fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009100:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009102:	2b00      	cmp	r3, #0
 8009104:	d1e1      	bne.n	80090ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	3314      	adds	r3, #20
 800910c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800910e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009110:	e853 3f00 	ldrex	r3, [r3]
 8009114:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009116:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009118:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800911c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	3314      	adds	r3, #20
 8009126:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800912a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800912c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009130:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009132:	e841 2300 	strex	r3, r2, [r1]
 8009136:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009138:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800913a:	2b00      	cmp	r3, #0
 800913c:	d1e3      	bne.n	8009106 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2220      	movs	r2, #32
 8009142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2200      	movs	r2, #0
 800914a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	330c      	adds	r3, #12
 8009152:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009156:	e853 3f00 	ldrex	r3, [r3]
 800915a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800915c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800915e:	f023 0310 	bic.w	r3, r3, #16
 8009162:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	330c      	adds	r3, #12
 800916c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009170:	65ba      	str	r2, [r7, #88]	; 0x58
 8009172:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009174:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009176:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009178:	e841 2300 	strex	r3, r2, [r1]
 800917c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800917e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009180:	2b00      	cmp	r3, #0
 8009182:	d1e3      	bne.n	800914c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009188:	4618      	mov	r0, r3
 800918a:	f7fa fcab 	bl	8003ae4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009196:	b29b      	uxth	r3, r3
 8009198:	1ad3      	subs	r3, r2, r3
 800919a:	b29b      	uxth	r3, r3
 800919c:	4619      	mov	r1, r3
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 f8b6 	bl	8009310 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80091a4:	e099      	b.n	80092da <HAL_UART_IRQHandler+0x50e>
 80091a6:	bf00      	nop
 80091a8:	080093ef 	.word	0x080093ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	1ad3      	subs	r3, r2, r3
 80091b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f000 808b 	beq.w	80092de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80091c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	f000 8086 	beq.w	80092de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	330c      	adds	r3, #12
 80091d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091dc:	e853 3f00 	ldrex	r3, [r3]
 80091e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80091e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80091e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	330c      	adds	r3, #12
 80091f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80091f6:	647a      	str	r2, [r7, #68]	; 0x44
 80091f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80091fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091fe:	e841 2300 	strex	r3, r2, [r1]
 8009202:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009206:	2b00      	cmp	r3, #0
 8009208:	d1e3      	bne.n	80091d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	3314      	adds	r3, #20
 8009210:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009214:	e853 3f00 	ldrex	r3, [r3]
 8009218:	623b      	str	r3, [r7, #32]
   return(result);
 800921a:	6a3b      	ldr	r3, [r7, #32]
 800921c:	f023 0301 	bic.w	r3, r3, #1
 8009220:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	3314      	adds	r3, #20
 800922a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800922e:	633a      	str	r2, [r7, #48]	; 0x30
 8009230:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009232:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009236:	e841 2300 	strex	r3, r2, [r1]
 800923a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800923c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923e:	2b00      	cmp	r3, #0
 8009240:	d1e3      	bne.n	800920a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2220      	movs	r2, #32
 8009246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2200      	movs	r2, #0
 800924e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	330c      	adds	r3, #12
 8009256:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	e853 3f00 	ldrex	r3, [r3]
 800925e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f023 0310 	bic.w	r3, r3, #16
 8009266:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	330c      	adds	r3, #12
 8009270:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009274:	61fa      	str	r2, [r7, #28]
 8009276:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009278:	69b9      	ldr	r1, [r7, #24]
 800927a:	69fa      	ldr	r2, [r7, #28]
 800927c:	e841 2300 	strex	r3, r2, [r1]
 8009280:	617b      	str	r3, [r7, #20]
   return(result);
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d1e3      	bne.n	8009250 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009288:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800928c:	4619      	mov	r1, r3
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 f83e 	bl	8009310 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009294:	e023      	b.n	80092de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800929a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d009      	beq.n	80092b6 <HAL_UART_IRQHandler+0x4ea>
 80092a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d003      	beq.n	80092b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 f8b1 	bl	8009416 <UART_Transmit_IT>
    return;
 80092b4:	e014      	b.n	80092e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80092b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d00e      	beq.n	80092e0 <HAL_UART_IRQHandler+0x514>
 80092c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d008      	beq.n	80092e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 f8f1 	bl	80094b6 <UART_EndTransmit_IT>
    return;
 80092d4:	e004      	b.n	80092e0 <HAL_UART_IRQHandler+0x514>
    return;
 80092d6:	bf00      	nop
 80092d8:	e002      	b.n	80092e0 <HAL_UART_IRQHandler+0x514>
      return;
 80092da:	bf00      	nop
 80092dc:	e000      	b.n	80092e0 <HAL_UART_IRQHandler+0x514>
      return;
 80092de:	bf00      	nop
  }
}
 80092e0:	37e8      	adds	r7, #232	; 0xe8
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop

080092e8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80092f0:	bf00      	nop
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr

080092fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009304:	bf00      	nop
 8009306:	370c      	adds	r7, #12
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr

08009310 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009310:	b480      	push	{r7}
 8009312:	b083      	sub	sp, #12
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	460b      	mov	r3, r1
 800931a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800931c:	bf00      	nop
 800931e:	370c      	adds	r7, #12
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009328:	b480      	push	{r7}
 800932a:	b095      	sub	sp, #84	; 0x54
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	330c      	adds	r3, #12
 8009336:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800933a:	e853 3f00 	ldrex	r3, [r3]
 800933e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009342:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009346:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	330c      	adds	r3, #12
 800934e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009350:	643a      	str	r2, [r7, #64]	; 0x40
 8009352:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009354:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009356:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009358:	e841 2300 	strex	r3, r2, [r1]
 800935c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800935e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1e5      	bne.n	8009330 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	3314      	adds	r3, #20
 800936a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936c:	6a3b      	ldr	r3, [r7, #32]
 800936e:	e853 3f00 	ldrex	r3, [r3]
 8009372:	61fb      	str	r3, [r7, #28]
   return(result);
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	f023 0301 	bic.w	r3, r3, #1
 800937a:	64bb      	str	r3, [r7, #72]	; 0x48
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	3314      	adds	r3, #20
 8009382:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009384:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009386:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009388:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800938a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800938c:	e841 2300 	strex	r3, r2, [r1]
 8009390:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009394:	2b00      	cmp	r3, #0
 8009396:	d1e5      	bne.n	8009364 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800939c:	2b01      	cmp	r3, #1
 800939e:	d119      	bne.n	80093d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	330c      	adds	r3, #12
 80093a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	e853 3f00 	ldrex	r3, [r3]
 80093ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	f023 0310 	bic.w	r3, r3, #16
 80093b6:	647b      	str	r3, [r7, #68]	; 0x44
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	330c      	adds	r3, #12
 80093be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80093c0:	61ba      	str	r2, [r7, #24]
 80093c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c4:	6979      	ldr	r1, [r7, #20]
 80093c6:	69ba      	ldr	r2, [r7, #24]
 80093c8:	e841 2300 	strex	r3, r2, [r1]
 80093cc:	613b      	str	r3, [r7, #16]
   return(result);
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d1e5      	bne.n	80093a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2220      	movs	r2, #32
 80093d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80093e2:	bf00      	nop
 80093e4:	3754      	adds	r7, #84	; 0x54
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr

080093ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093ee:	b580      	push	{r7, lr}
 80093f0:	b084      	sub	sp, #16
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2200      	movs	r2, #0
 8009400:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2200      	movs	r2, #0
 8009406:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009408:	68f8      	ldr	r0, [r7, #12]
 800940a:	f7ff ff77 	bl	80092fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800940e:	bf00      	nop
 8009410:	3710      	adds	r7, #16
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}

08009416 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009416:	b480      	push	{r7}
 8009418:	b085      	sub	sp, #20
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009424:	b2db      	uxtb	r3, r3
 8009426:	2b21      	cmp	r3, #33	; 0x21
 8009428:	d13e      	bne.n	80094a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	689b      	ldr	r3, [r3, #8]
 800942e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009432:	d114      	bne.n	800945e <UART_Transmit_IT+0x48>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	691b      	ldr	r3, [r3, #16]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d110      	bne.n	800945e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6a1b      	ldr	r3, [r3, #32]
 8009440:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	881b      	ldrh	r3, [r3, #0]
 8009446:	461a      	mov	r2, r3
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009450:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6a1b      	ldr	r3, [r3, #32]
 8009456:	1c9a      	adds	r2, r3, #2
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	621a      	str	r2, [r3, #32]
 800945c:	e008      	b.n	8009470 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6a1b      	ldr	r3, [r3, #32]
 8009462:	1c59      	adds	r1, r3, #1
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	6211      	str	r1, [r2, #32]
 8009468:	781a      	ldrb	r2, [r3, #0]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009474:	b29b      	uxth	r3, r3
 8009476:	3b01      	subs	r3, #1
 8009478:	b29b      	uxth	r3, r3
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	4619      	mov	r1, r3
 800947e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009480:	2b00      	cmp	r3, #0
 8009482:	d10f      	bne.n	80094a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	68da      	ldr	r2, [r3, #12]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009492:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	68da      	ldr	r2, [r3, #12]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80094a4:	2300      	movs	r3, #0
 80094a6:	e000      	b.n	80094aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80094a8:	2302      	movs	r3, #2
  }
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3714      	adds	r7, #20
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr

080094b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b082      	sub	sp, #8
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	68da      	ldr	r2, [r3, #12]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2220      	movs	r2, #32
 80094d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f7f8 fccc 	bl	8001e74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80094dc:	2300      	movs	r3, #0
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3708      	adds	r7, #8
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}

080094e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80094e6:	b580      	push	{r7, lr}
 80094e8:	b08c      	sub	sp, #48	; 0x30
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80094f4:	b2db      	uxtb	r3, r3
 80094f6:	2b22      	cmp	r3, #34	; 0x22
 80094f8:	f040 80ab 	bne.w	8009652 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009504:	d117      	bne.n	8009536 <UART_Receive_IT+0x50>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	691b      	ldr	r3, [r3, #16]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d113      	bne.n	8009536 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800950e:	2300      	movs	r3, #0
 8009510:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009516:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	b29b      	uxth	r3, r3
 8009520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009524:	b29a      	uxth	r2, r3
 8009526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009528:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800952e:	1c9a      	adds	r2, r3, #2
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	629a      	str	r2, [r3, #40]	; 0x28
 8009534:	e026      	b.n	8009584 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800953a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800953c:	2300      	movs	r3, #0
 800953e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	689b      	ldr	r3, [r3, #8]
 8009544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009548:	d007      	beq.n	800955a <UART_Receive_IT+0x74>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	689b      	ldr	r3, [r3, #8]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d10a      	bne.n	8009568 <UART_Receive_IT+0x82>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	691b      	ldr	r3, [r3, #16]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d106      	bne.n	8009568 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	b2da      	uxtb	r2, r3
 8009562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009564:	701a      	strb	r2, [r3, #0]
 8009566:	e008      	b.n	800957a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	b2db      	uxtb	r3, r3
 8009570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009574:	b2da      	uxtb	r2, r3
 8009576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009578:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800957e:	1c5a      	adds	r2, r3, #1
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009588:	b29b      	uxth	r3, r3
 800958a:	3b01      	subs	r3, #1
 800958c:	b29b      	uxth	r3, r3
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	4619      	mov	r1, r3
 8009592:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009594:	2b00      	cmp	r3, #0
 8009596:	d15a      	bne.n	800964e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	68da      	ldr	r2, [r3, #12]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f022 0220 	bic.w	r2, r2, #32
 80095a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	68da      	ldr	r2, [r3, #12]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80095b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	695a      	ldr	r2, [r3, #20]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f022 0201 	bic.w	r2, r2, #1
 80095c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2220      	movs	r2, #32
 80095cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d135      	bne.n	8009644 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	330c      	adds	r3, #12
 80095e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	e853 3f00 	ldrex	r3, [r3]
 80095ec:	613b      	str	r3, [r7, #16]
   return(result);
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	f023 0310 	bic.w	r3, r3, #16
 80095f4:	627b      	str	r3, [r7, #36]	; 0x24
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	330c      	adds	r3, #12
 80095fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095fe:	623a      	str	r2, [r7, #32]
 8009600:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009602:	69f9      	ldr	r1, [r7, #28]
 8009604:	6a3a      	ldr	r2, [r7, #32]
 8009606:	e841 2300 	strex	r3, r2, [r1]
 800960a:	61bb      	str	r3, [r7, #24]
   return(result);
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d1e5      	bne.n	80095de <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f003 0310 	and.w	r3, r3, #16
 800961c:	2b10      	cmp	r3, #16
 800961e:	d10a      	bne.n	8009636 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009620:	2300      	movs	r3, #0
 8009622:	60fb      	str	r3, [r7, #12]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	60fb      	str	r3, [r7, #12]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	60fb      	str	r3, [r7, #12]
 8009634:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800963a:	4619      	mov	r1, r3
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f7ff fe67 	bl	8009310 <HAL_UARTEx_RxEventCallback>
 8009642:	e002      	b.n	800964a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f7ff fe4f 	bl	80092e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800964a:	2300      	movs	r3, #0
 800964c:	e002      	b.n	8009654 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800964e:	2300      	movs	r3, #0
 8009650:	e000      	b.n	8009654 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009652:	2302      	movs	r3, #2
  }
}
 8009654:	4618      	mov	r0, r3
 8009656:	3730      	adds	r7, #48	; 0x30
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800965c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009660:	b0c0      	sub	sp, #256	; 0x100
 8009662:	af00      	add	r7, sp, #0
 8009664:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	691b      	ldr	r3, [r3, #16]
 8009670:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009678:	68d9      	ldr	r1, [r3, #12]
 800967a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	ea40 0301 	orr.w	r3, r0, r1
 8009684:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800968a:	689a      	ldr	r2, [r3, #8]
 800968c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009690:	691b      	ldr	r3, [r3, #16]
 8009692:	431a      	orrs	r2, r3
 8009694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009698:	695b      	ldr	r3, [r3, #20]
 800969a:	431a      	orrs	r2, r3
 800969c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096a0:	69db      	ldr	r3, [r3, #28]
 80096a2:	4313      	orrs	r3, r2
 80096a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80096a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80096b4:	f021 010c 	bic.w	r1, r1, #12
 80096b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80096c2:	430b      	orrs	r3, r1
 80096c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80096c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	695b      	ldr	r3, [r3, #20]
 80096ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80096d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096d6:	6999      	ldr	r1, [r3, #24]
 80096d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096dc:	681a      	ldr	r2, [r3, #0]
 80096de:	ea40 0301 	orr.w	r3, r0, r1
 80096e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80096e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	4b8f      	ldr	r3, [pc, #572]	; (8009928 <UART_SetConfig+0x2cc>)
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d005      	beq.n	80096fc <UART_SetConfig+0xa0>
 80096f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	4b8d      	ldr	r3, [pc, #564]	; (800992c <UART_SetConfig+0x2d0>)
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d104      	bne.n	8009706 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80096fc:	f7fd fddc 	bl	80072b8 <HAL_RCC_GetPCLK2Freq>
 8009700:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009704:	e003      	b.n	800970e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009706:	f7fd fdc3 	bl	8007290 <HAL_RCC_GetPCLK1Freq>
 800970a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800970e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009712:	69db      	ldr	r3, [r3, #28]
 8009714:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009718:	f040 810c 	bne.w	8009934 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800971c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009720:	2200      	movs	r2, #0
 8009722:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009726:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800972a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800972e:	4622      	mov	r2, r4
 8009730:	462b      	mov	r3, r5
 8009732:	1891      	adds	r1, r2, r2
 8009734:	65b9      	str	r1, [r7, #88]	; 0x58
 8009736:	415b      	adcs	r3, r3
 8009738:	65fb      	str	r3, [r7, #92]	; 0x5c
 800973a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800973e:	4621      	mov	r1, r4
 8009740:	eb12 0801 	adds.w	r8, r2, r1
 8009744:	4629      	mov	r1, r5
 8009746:	eb43 0901 	adc.w	r9, r3, r1
 800974a:	f04f 0200 	mov.w	r2, #0
 800974e:	f04f 0300 	mov.w	r3, #0
 8009752:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009756:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800975a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800975e:	4690      	mov	r8, r2
 8009760:	4699      	mov	r9, r3
 8009762:	4623      	mov	r3, r4
 8009764:	eb18 0303 	adds.w	r3, r8, r3
 8009768:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800976c:	462b      	mov	r3, r5
 800976e:	eb49 0303 	adc.w	r3, r9, r3
 8009772:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	2200      	movs	r2, #0
 800977e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009782:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009786:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800978a:	460b      	mov	r3, r1
 800978c:	18db      	adds	r3, r3, r3
 800978e:	653b      	str	r3, [r7, #80]	; 0x50
 8009790:	4613      	mov	r3, r2
 8009792:	eb42 0303 	adc.w	r3, r2, r3
 8009796:	657b      	str	r3, [r7, #84]	; 0x54
 8009798:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800979c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80097a0:	f7f6 fd76 	bl	8000290 <__aeabi_uldivmod>
 80097a4:	4602      	mov	r2, r0
 80097a6:	460b      	mov	r3, r1
 80097a8:	4b61      	ldr	r3, [pc, #388]	; (8009930 <UART_SetConfig+0x2d4>)
 80097aa:	fba3 2302 	umull	r2, r3, r3, r2
 80097ae:	095b      	lsrs	r3, r3, #5
 80097b0:	011c      	lsls	r4, r3, #4
 80097b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097b6:	2200      	movs	r2, #0
 80097b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80097bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80097c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80097c4:	4642      	mov	r2, r8
 80097c6:	464b      	mov	r3, r9
 80097c8:	1891      	adds	r1, r2, r2
 80097ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80097cc:	415b      	adcs	r3, r3
 80097ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80097d4:	4641      	mov	r1, r8
 80097d6:	eb12 0a01 	adds.w	sl, r2, r1
 80097da:	4649      	mov	r1, r9
 80097dc:	eb43 0b01 	adc.w	fp, r3, r1
 80097e0:	f04f 0200 	mov.w	r2, #0
 80097e4:	f04f 0300 	mov.w	r3, #0
 80097e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80097ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80097f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80097f4:	4692      	mov	sl, r2
 80097f6:	469b      	mov	fp, r3
 80097f8:	4643      	mov	r3, r8
 80097fa:	eb1a 0303 	adds.w	r3, sl, r3
 80097fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009802:	464b      	mov	r3, r9
 8009804:	eb4b 0303 	adc.w	r3, fp, r3
 8009808:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800980c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	2200      	movs	r2, #0
 8009814:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009818:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800981c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009820:	460b      	mov	r3, r1
 8009822:	18db      	adds	r3, r3, r3
 8009824:	643b      	str	r3, [r7, #64]	; 0x40
 8009826:	4613      	mov	r3, r2
 8009828:	eb42 0303 	adc.w	r3, r2, r3
 800982c:	647b      	str	r3, [r7, #68]	; 0x44
 800982e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009832:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009836:	f7f6 fd2b 	bl	8000290 <__aeabi_uldivmod>
 800983a:	4602      	mov	r2, r0
 800983c:	460b      	mov	r3, r1
 800983e:	4611      	mov	r1, r2
 8009840:	4b3b      	ldr	r3, [pc, #236]	; (8009930 <UART_SetConfig+0x2d4>)
 8009842:	fba3 2301 	umull	r2, r3, r3, r1
 8009846:	095b      	lsrs	r3, r3, #5
 8009848:	2264      	movs	r2, #100	; 0x64
 800984a:	fb02 f303 	mul.w	r3, r2, r3
 800984e:	1acb      	subs	r3, r1, r3
 8009850:	00db      	lsls	r3, r3, #3
 8009852:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009856:	4b36      	ldr	r3, [pc, #216]	; (8009930 <UART_SetConfig+0x2d4>)
 8009858:	fba3 2302 	umull	r2, r3, r3, r2
 800985c:	095b      	lsrs	r3, r3, #5
 800985e:	005b      	lsls	r3, r3, #1
 8009860:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009864:	441c      	add	r4, r3
 8009866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800986a:	2200      	movs	r2, #0
 800986c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009870:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009874:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009878:	4642      	mov	r2, r8
 800987a:	464b      	mov	r3, r9
 800987c:	1891      	adds	r1, r2, r2
 800987e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009880:	415b      	adcs	r3, r3
 8009882:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009884:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009888:	4641      	mov	r1, r8
 800988a:	1851      	adds	r1, r2, r1
 800988c:	6339      	str	r1, [r7, #48]	; 0x30
 800988e:	4649      	mov	r1, r9
 8009890:	414b      	adcs	r3, r1
 8009892:	637b      	str	r3, [r7, #52]	; 0x34
 8009894:	f04f 0200 	mov.w	r2, #0
 8009898:	f04f 0300 	mov.w	r3, #0
 800989c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80098a0:	4659      	mov	r1, fp
 80098a2:	00cb      	lsls	r3, r1, #3
 80098a4:	4651      	mov	r1, sl
 80098a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80098aa:	4651      	mov	r1, sl
 80098ac:	00ca      	lsls	r2, r1, #3
 80098ae:	4610      	mov	r0, r2
 80098b0:	4619      	mov	r1, r3
 80098b2:	4603      	mov	r3, r0
 80098b4:	4642      	mov	r2, r8
 80098b6:	189b      	adds	r3, r3, r2
 80098b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80098bc:	464b      	mov	r3, r9
 80098be:	460a      	mov	r2, r1
 80098c0:	eb42 0303 	adc.w	r3, r2, r3
 80098c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80098c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	2200      	movs	r2, #0
 80098d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80098d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80098d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80098dc:	460b      	mov	r3, r1
 80098de:	18db      	adds	r3, r3, r3
 80098e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80098e2:	4613      	mov	r3, r2
 80098e4:	eb42 0303 	adc.w	r3, r2, r3
 80098e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80098ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80098f2:	f7f6 fccd 	bl	8000290 <__aeabi_uldivmod>
 80098f6:	4602      	mov	r2, r0
 80098f8:	460b      	mov	r3, r1
 80098fa:	4b0d      	ldr	r3, [pc, #52]	; (8009930 <UART_SetConfig+0x2d4>)
 80098fc:	fba3 1302 	umull	r1, r3, r3, r2
 8009900:	095b      	lsrs	r3, r3, #5
 8009902:	2164      	movs	r1, #100	; 0x64
 8009904:	fb01 f303 	mul.w	r3, r1, r3
 8009908:	1ad3      	subs	r3, r2, r3
 800990a:	00db      	lsls	r3, r3, #3
 800990c:	3332      	adds	r3, #50	; 0x32
 800990e:	4a08      	ldr	r2, [pc, #32]	; (8009930 <UART_SetConfig+0x2d4>)
 8009910:	fba2 2303 	umull	r2, r3, r2, r3
 8009914:	095b      	lsrs	r3, r3, #5
 8009916:	f003 0207 	and.w	r2, r3, #7
 800991a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4422      	add	r2, r4
 8009922:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009924:	e105      	b.n	8009b32 <UART_SetConfig+0x4d6>
 8009926:	bf00      	nop
 8009928:	40011000 	.word	0x40011000
 800992c:	40011400 	.word	0x40011400
 8009930:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009934:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009938:	2200      	movs	r2, #0
 800993a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800993e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009942:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009946:	4642      	mov	r2, r8
 8009948:	464b      	mov	r3, r9
 800994a:	1891      	adds	r1, r2, r2
 800994c:	6239      	str	r1, [r7, #32]
 800994e:	415b      	adcs	r3, r3
 8009950:	627b      	str	r3, [r7, #36]	; 0x24
 8009952:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009956:	4641      	mov	r1, r8
 8009958:	1854      	adds	r4, r2, r1
 800995a:	4649      	mov	r1, r9
 800995c:	eb43 0501 	adc.w	r5, r3, r1
 8009960:	f04f 0200 	mov.w	r2, #0
 8009964:	f04f 0300 	mov.w	r3, #0
 8009968:	00eb      	lsls	r3, r5, #3
 800996a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800996e:	00e2      	lsls	r2, r4, #3
 8009970:	4614      	mov	r4, r2
 8009972:	461d      	mov	r5, r3
 8009974:	4643      	mov	r3, r8
 8009976:	18e3      	adds	r3, r4, r3
 8009978:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800997c:	464b      	mov	r3, r9
 800997e:	eb45 0303 	adc.w	r3, r5, r3
 8009982:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009992:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009996:	f04f 0200 	mov.w	r2, #0
 800999a:	f04f 0300 	mov.w	r3, #0
 800999e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80099a2:	4629      	mov	r1, r5
 80099a4:	008b      	lsls	r3, r1, #2
 80099a6:	4621      	mov	r1, r4
 80099a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80099ac:	4621      	mov	r1, r4
 80099ae:	008a      	lsls	r2, r1, #2
 80099b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80099b4:	f7f6 fc6c 	bl	8000290 <__aeabi_uldivmod>
 80099b8:	4602      	mov	r2, r0
 80099ba:	460b      	mov	r3, r1
 80099bc:	4b60      	ldr	r3, [pc, #384]	; (8009b40 <UART_SetConfig+0x4e4>)
 80099be:	fba3 2302 	umull	r2, r3, r3, r2
 80099c2:	095b      	lsrs	r3, r3, #5
 80099c4:	011c      	lsls	r4, r3, #4
 80099c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099ca:	2200      	movs	r2, #0
 80099cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80099d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80099d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80099d8:	4642      	mov	r2, r8
 80099da:	464b      	mov	r3, r9
 80099dc:	1891      	adds	r1, r2, r2
 80099de:	61b9      	str	r1, [r7, #24]
 80099e0:	415b      	adcs	r3, r3
 80099e2:	61fb      	str	r3, [r7, #28]
 80099e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80099e8:	4641      	mov	r1, r8
 80099ea:	1851      	adds	r1, r2, r1
 80099ec:	6139      	str	r1, [r7, #16]
 80099ee:	4649      	mov	r1, r9
 80099f0:	414b      	adcs	r3, r1
 80099f2:	617b      	str	r3, [r7, #20]
 80099f4:	f04f 0200 	mov.w	r2, #0
 80099f8:	f04f 0300 	mov.w	r3, #0
 80099fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009a00:	4659      	mov	r1, fp
 8009a02:	00cb      	lsls	r3, r1, #3
 8009a04:	4651      	mov	r1, sl
 8009a06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a0a:	4651      	mov	r1, sl
 8009a0c:	00ca      	lsls	r2, r1, #3
 8009a0e:	4610      	mov	r0, r2
 8009a10:	4619      	mov	r1, r3
 8009a12:	4603      	mov	r3, r0
 8009a14:	4642      	mov	r2, r8
 8009a16:	189b      	adds	r3, r3, r2
 8009a18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009a1c:	464b      	mov	r3, r9
 8009a1e:	460a      	mov	r2, r1
 8009a20:	eb42 0303 	adc.w	r3, r2, r3
 8009a24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	67bb      	str	r3, [r7, #120]	; 0x78
 8009a32:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009a34:	f04f 0200 	mov.w	r2, #0
 8009a38:	f04f 0300 	mov.w	r3, #0
 8009a3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009a40:	4649      	mov	r1, r9
 8009a42:	008b      	lsls	r3, r1, #2
 8009a44:	4641      	mov	r1, r8
 8009a46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a4a:	4641      	mov	r1, r8
 8009a4c:	008a      	lsls	r2, r1, #2
 8009a4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009a52:	f7f6 fc1d 	bl	8000290 <__aeabi_uldivmod>
 8009a56:	4602      	mov	r2, r0
 8009a58:	460b      	mov	r3, r1
 8009a5a:	4b39      	ldr	r3, [pc, #228]	; (8009b40 <UART_SetConfig+0x4e4>)
 8009a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8009a60:	095b      	lsrs	r3, r3, #5
 8009a62:	2164      	movs	r1, #100	; 0x64
 8009a64:	fb01 f303 	mul.w	r3, r1, r3
 8009a68:	1ad3      	subs	r3, r2, r3
 8009a6a:	011b      	lsls	r3, r3, #4
 8009a6c:	3332      	adds	r3, #50	; 0x32
 8009a6e:	4a34      	ldr	r2, [pc, #208]	; (8009b40 <UART_SetConfig+0x4e4>)
 8009a70:	fba2 2303 	umull	r2, r3, r2, r3
 8009a74:	095b      	lsrs	r3, r3, #5
 8009a76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a7a:	441c      	add	r4, r3
 8009a7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a80:	2200      	movs	r2, #0
 8009a82:	673b      	str	r3, [r7, #112]	; 0x70
 8009a84:	677a      	str	r2, [r7, #116]	; 0x74
 8009a86:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009a8a:	4642      	mov	r2, r8
 8009a8c:	464b      	mov	r3, r9
 8009a8e:	1891      	adds	r1, r2, r2
 8009a90:	60b9      	str	r1, [r7, #8]
 8009a92:	415b      	adcs	r3, r3
 8009a94:	60fb      	str	r3, [r7, #12]
 8009a96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009a9a:	4641      	mov	r1, r8
 8009a9c:	1851      	adds	r1, r2, r1
 8009a9e:	6039      	str	r1, [r7, #0]
 8009aa0:	4649      	mov	r1, r9
 8009aa2:	414b      	adcs	r3, r1
 8009aa4:	607b      	str	r3, [r7, #4]
 8009aa6:	f04f 0200 	mov.w	r2, #0
 8009aaa:	f04f 0300 	mov.w	r3, #0
 8009aae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009ab2:	4659      	mov	r1, fp
 8009ab4:	00cb      	lsls	r3, r1, #3
 8009ab6:	4651      	mov	r1, sl
 8009ab8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009abc:	4651      	mov	r1, sl
 8009abe:	00ca      	lsls	r2, r1, #3
 8009ac0:	4610      	mov	r0, r2
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	4642      	mov	r2, r8
 8009ac8:	189b      	adds	r3, r3, r2
 8009aca:	66bb      	str	r3, [r7, #104]	; 0x68
 8009acc:	464b      	mov	r3, r9
 8009ace:	460a      	mov	r2, r1
 8009ad0:	eb42 0303 	adc.w	r3, r2, r3
 8009ad4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	663b      	str	r3, [r7, #96]	; 0x60
 8009ae0:	667a      	str	r2, [r7, #100]	; 0x64
 8009ae2:	f04f 0200 	mov.w	r2, #0
 8009ae6:	f04f 0300 	mov.w	r3, #0
 8009aea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009aee:	4649      	mov	r1, r9
 8009af0:	008b      	lsls	r3, r1, #2
 8009af2:	4641      	mov	r1, r8
 8009af4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009af8:	4641      	mov	r1, r8
 8009afa:	008a      	lsls	r2, r1, #2
 8009afc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009b00:	f7f6 fbc6 	bl	8000290 <__aeabi_uldivmod>
 8009b04:	4602      	mov	r2, r0
 8009b06:	460b      	mov	r3, r1
 8009b08:	4b0d      	ldr	r3, [pc, #52]	; (8009b40 <UART_SetConfig+0x4e4>)
 8009b0a:	fba3 1302 	umull	r1, r3, r3, r2
 8009b0e:	095b      	lsrs	r3, r3, #5
 8009b10:	2164      	movs	r1, #100	; 0x64
 8009b12:	fb01 f303 	mul.w	r3, r1, r3
 8009b16:	1ad3      	subs	r3, r2, r3
 8009b18:	011b      	lsls	r3, r3, #4
 8009b1a:	3332      	adds	r3, #50	; 0x32
 8009b1c:	4a08      	ldr	r2, [pc, #32]	; (8009b40 <UART_SetConfig+0x4e4>)
 8009b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8009b22:	095b      	lsrs	r3, r3, #5
 8009b24:	f003 020f 	and.w	r2, r3, #15
 8009b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4422      	add	r2, r4
 8009b30:	609a      	str	r2, [r3, #8]
}
 8009b32:	bf00      	nop
 8009b34:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b3e:	bf00      	nop
 8009b40:	51eb851f 	.word	0x51eb851f

08009b44 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d123      	bne.n	8009b9e <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009b5e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009b62:	683a      	ldr	r2, [r7, #0]
 8009b64:	6851      	ldr	r1, [r2, #4]
 8009b66:	683a      	ldr	r2, [r7, #0]
 8009b68:	6892      	ldr	r2, [r2, #8]
 8009b6a:	4311      	orrs	r1, r2
 8009b6c:	683a      	ldr	r2, [r7, #0]
 8009b6e:	68d2      	ldr	r2, [r2, #12]
 8009b70:	4311      	orrs	r1, r2
 8009b72:	683a      	ldr	r2, [r7, #0]
 8009b74:	6912      	ldr	r2, [r2, #16]
 8009b76:	4311      	orrs	r1, r2
 8009b78:	683a      	ldr	r2, [r7, #0]
 8009b7a:	6952      	ldr	r2, [r2, #20]
 8009b7c:	4311      	orrs	r1, r2
 8009b7e:	683a      	ldr	r2, [r7, #0]
 8009b80:	6992      	ldr	r2, [r2, #24]
 8009b82:	4311      	orrs	r1, r2
 8009b84:	683a      	ldr	r2, [r7, #0]
 8009b86:	69d2      	ldr	r2, [r2, #28]
 8009b88:	4311      	orrs	r1, r2
 8009b8a:	683a      	ldr	r2, [r7, #0]
 8009b8c:	6a12      	ldr	r2, [r2, #32]
 8009b8e:	4311      	orrs	r1, r2
 8009b90:	683a      	ldr	r2, [r7, #0]
 8009b92:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009b94:	430a      	orrs	r2, r1
 8009b96:	431a      	orrs	r2, r3
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	601a      	str	r2, [r3, #0]
 8009b9c:	e028      	b.n	8009bf0 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	69d9      	ldr	r1, [r3, #28]
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	6a1b      	ldr	r3, [r3, #32]
 8009bae:	4319      	orrs	r1, r3
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb4:	430b      	orrs	r3, r1
 8009bb6:	431a      	orrs	r2, r3
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	685b      	ldr	r3, [r3, #4]
 8009bc0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009bc4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009bc8:	683a      	ldr	r2, [r7, #0]
 8009bca:	6851      	ldr	r1, [r2, #4]
 8009bcc:	683a      	ldr	r2, [r7, #0]
 8009bce:	6892      	ldr	r2, [r2, #8]
 8009bd0:	4311      	orrs	r1, r2
 8009bd2:	683a      	ldr	r2, [r7, #0]
 8009bd4:	68d2      	ldr	r2, [r2, #12]
 8009bd6:	4311      	orrs	r1, r2
 8009bd8:	683a      	ldr	r2, [r7, #0]
 8009bda:	6912      	ldr	r2, [r2, #16]
 8009bdc:	4311      	orrs	r1, r2
 8009bde:	683a      	ldr	r2, [r7, #0]
 8009be0:	6952      	ldr	r2, [r2, #20]
 8009be2:	4311      	orrs	r1, r2
 8009be4:	683a      	ldr	r2, [r7, #0]
 8009be6:	6992      	ldr	r2, [r2, #24]
 8009be8:	430a      	orrs	r2, r1
 8009bea:	431a      	orrs	r2, r3
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8009bf0:	2300      	movs	r3, #0
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	370c      	adds	r7, #12
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr

08009bfe <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009bfe:	b480      	push	{r7}
 8009c00:	b085      	sub	sp, #20
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	60f8      	str	r0, [r7, #12]
 8009c06:	60b9      	str	r1, [r7, #8]
 8009c08:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d128      	bne.n	8009c62 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	689b      	ldr	r3, [r3, #8]
 8009c14:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	1e59      	subs	r1, r3, #1
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	3b01      	subs	r3, #1
 8009c24:	011b      	lsls	r3, r3, #4
 8009c26:	4319      	orrs	r1, r3
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	3b01      	subs	r3, #1
 8009c2e:	021b      	lsls	r3, r3, #8
 8009c30:	4319      	orrs	r1, r3
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	68db      	ldr	r3, [r3, #12]
 8009c36:	3b01      	subs	r3, #1
 8009c38:	031b      	lsls	r3, r3, #12
 8009c3a:	4319      	orrs	r1, r3
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	691b      	ldr	r3, [r3, #16]
 8009c40:	3b01      	subs	r3, #1
 8009c42:	041b      	lsls	r3, r3, #16
 8009c44:	4319      	orrs	r1, r3
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	695b      	ldr	r3, [r3, #20]
 8009c4a:	3b01      	subs	r3, #1
 8009c4c:	051b      	lsls	r3, r3, #20
 8009c4e:	4319      	orrs	r1, r3
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	699b      	ldr	r3, [r3, #24]
 8009c54:	3b01      	subs	r3, #1
 8009c56:	061b      	lsls	r3, r3, #24
 8009c58:	430b      	orrs	r3, r1
 8009c5a:	431a      	orrs	r2, r3
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	609a      	str	r2, [r3, #8]
 8009c60:	e02f      	b.n	8009cc2 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	689b      	ldr	r3, [r3, #8]
 8009c66:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009c6a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c6e:	68ba      	ldr	r2, [r7, #8]
 8009c70:	68d2      	ldr	r2, [r2, #12]
 8009c72:	3a01      	subs	r2, #1
 8009c74:	0311      	lsls	r1, r2, #12
 8009c76:	68ba      	ldr	r2, [r7, #8]
 8009c78:	6952      	ldr	r2, [r2, #20]
 8009c7a:	3a01      	subs	r2, #1
 8009c7c:	0512      	lsls	r2, r2, #20
 8009c7e:	430a      	orrs	r2, r1
 8009c80:	431a      	orrs	r2, r3
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	68db      	ldr	r3, [r3, #12]
 8009c8a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	1e59      	subs	r1, r3, #1
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	3b01      	subs	r3, #1
 8009c9a:	011b      	lsls	r3, r3, #4
 8009c9c:	4319      	orrs	r1, r3
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	689b      	ldr	r3, [r3, #8]
 8009ca2:	3b01      	subs	r3, #1
 8009ca4:	021b      	lsls	r3, r3, #8
 8009ca6:	4319      	orrs	r1, r3
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	691b      	ldr	r3, [r3, #16]
 8009cac:	3b01      	subs	r3, #1
 8009cae:	041b      	lsls	r3, r3, #16
 8009cb0:	4319      	orrs	r1, r3
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	699b      	ldr	r3, [r3, #24]
 8009cb6:	3b01      	subs	r3, #1
 8009cb8:	061b      	lsls	r3, r3, #24
 8009cba:	430b      	orrs	r3, r1
 8009cbc:	431a      	orrs	r2, r3
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8009cc2:	2300      	movs	r3, #0
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3714      	adds	r7, #20
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr

08009cd0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b086      	sub	sp, #24
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	60f8      	str	r0, [r7, #12]
 8009cd8:	60b9      	str	r1, [r7, #8]
 8009cda:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	691b      	ldr	r3, [r3, #16]
 8009ce4:	0d9b      	lsrs	r3, r3, #22
 8009ce6:	059b      	lsls	r3, r3, #22
 8009ce8:	68ba      	ldr	r2, [r7, #8]
 8009cea:	6811      	ldr	r1, [r2, #0]
 8009cec:	68ba      	ldr	r2, [r7, #8]
 8009cee:	6852      	ldr	r2, [r2, #4]
 8009cf0:	4311      	orrs	r1, r2
 8009cf2:	68ba      	ldr	r2, [r7, #8]
 8009cf4:	6892      	ldr	r2, [r2, #8]
 8009cf6:	3a01      	subs	r2, #1
 8009cf8:	0152      	lsls	r2, r2, #5
 8009cfa:	4311      	orrs	r1, r2
 8009cfc:	68ba      	ldr	r2, [r7, #8]
 8009cfe:	68d2      	ldr	r2, [r2, #12]
 8009d00:	0252      	lsls	r2, r2, #9
 8009d02:	430a      	orrs	r2, r1
 8009d04:	431a      	orrs	r2, r3
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8009d0a:	f7f9 fccd 	bl	80036a8 <HAL_GetTick>
 8009d0e:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009d10:	e010      	b.n	8009d34 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d18:	d00c      	beq.n	8009d34 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d007      	beq.n	8009d30 <FMC_SDRAM_SendCommand+0x60>
 8009d20:	f7f9 fcc2 	bl	80036a8 <HAL_GetTick>
 8009d24:	4602      	mov	r2, r0
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	1ad3      	subs	r3, r2, r3
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d201      	bcs.n	8009d34 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8009d30:	2303      	movs	r3, #3
 8009d32:	e006      	b.n	8009d42 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	699b      	ldr	r3, [r3, #24]
 8009d38:	f003 0320 	and.w	r3, r3, #32
 8009d3c:	2b20      	cmp	r3, #32
 8009d3e:	d0e8      	beq.n	8009d12 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8009d40:	2300      	movs	r3, #0
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3718      	adds	r7, #24
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}

08009d4a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009d4a:	b480      	push	{r7}
 8009d4c:	b083      	sub	sp, #12
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	6078      	str	r0, [r7, #4]
 8009d52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	695b      	ldr	r3, [r3, #20]
 8009d58:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8009d5c:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8009d60:	683a      	ldr	r2, [r7, #0]
 8009d62:	0052      	lsls	r2, r2, #1
 8009d64:	431a      	orrs	r2, r3
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8009d6a:	2300      	movs	r3, #0
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	370c      	adds	r7, #12
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr

08009d78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009d78:	b084      	sub	sp, #16
 8009d7a:	b580      	push	{r7, lr}
 8009d7c:	b084      	sub	sp, #16
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	6078      	str	r0, [r7, #4]
 8009d82:	f107 001c 	add.w	r0, r7, #28
 8009d86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d122      	bne.n	8009dd6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	68db      	ldr	r3, [r3, #12]
 8009da0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009da4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009da8:	687a      	ldr	r2, [r7, #4]
 8009daa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	68db      	ldr	r3, [r3, #12]
 8009db0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	d105      	bne.n	8009dca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	68db      	ldr	r3, [r3, #12]
 8009dc2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f000 f9c0 	bl	800a150 <USB_CoreReset>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	73fb      	strb	r3, [r7, #15]
 8009dd4:	e01a      	b.n	8009e0c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	68db      	ldr	r3, [r3, #12]
 8009dda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f000 f9b4 	bl	800a150 <USB_CoreReset>
 8009de8:	4603      	mov	r3, r0
 8009dea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009dec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d106      	bne.n	8009e00 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009df6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	639a      	str	r2, [r3, #56]	; 0x38
 8009dfe:	e005      	b.n	8009e0c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0e:	2b01      	cmp	r3, #1
 8009e10:	d10b      	bne.n	8009e2a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	689b      	ldr	r3, [r3, #8]
 8009e16:	f043 0206 	orr.w	r2, r3, #6
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	689b      	ldr	r3, [r3, #8]
 8009e22:	f043 0220 	orr.w	r2, r3, #32
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3710      	adds	r7, #16
 8009e30:	46bd      	mov	sp, r7
 8009e32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009e36:	b004      	add	sp, #16
 8009e38:	4770      	bx	lr

08009e3a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e3a:	b480      	push	{r7}
 8009e3c:	b083      	sub	sp, #12
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	689b      	ldr	r3, [r3, #8]
 8009e46:	f043 0201 	orr.w	r2, r3, #1
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009e4e:	2300      	movs	r3, #0
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	370c      	adds	r7, #12
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr

08009e5c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b083      	sub	sp, #12
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	689b      	ldr	r3, [r3, #8]
 8009e68:	f023 0201 	bic.w	r2, r3, #1
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009e70:	2300      	movs	r3, #0
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	370c      	adds	r7, #12
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr

08009e7e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009e7e:	b580      	push	{r7, lr}
 8009e80:	b084      	sub	sp, #16
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
 8009e86:	460b      	mov	r3, r1
 8009e88:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	68db      	ldr	r3, [r3, #12]
 8009e92:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009e9a:	78fb      	ldrb	r3, [r7, #3]
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d115      	bne.n	8009ecc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	68db      	ldr	r3, [r3, #12]
 8009ea4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009eac:	2001      	movs	r0, #1
 8009eae:	f7f9 fc07 	bl	80036c0 <HAL_Delay>
      ms++;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	3301      	adds	r3, #1
 8009eb6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f000 f93a 	bl	800a132 <USB_GetMode>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d01e      	beq.n	8009f02 <USB_SetCurrentMode+0x84>
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2b31      	cmp	r3, #49	; 0x31
 8009ec8:	d9f0      	bls.n	8009eac <USB_SetCurrentMode+0x2e>
 8009eca:	e01a      	b.n	8009f02 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009ecc:	78fb      	ldrb	r3, [r7, #3]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d115      	bne.n	8009efe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	68db      	ldr	r3, [r3, #12]
 8009ed6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009ede:	2001      	movs	r0, #1
 8009ee0:	f7f9 fbee 	bl	80036c0 <HAL_Delay>
      ms++;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 f921 	bl	800a132 <USB_GetMode>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d005      	beq.n	8009f02 <USB_SetCurrentMode+0x84>
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	2b31      	cmp	r3, #49	; 0x31
 8009efa:	d9f0      	bls.n	8009ede <USB_SetCurrentMode+0x60>
 8009efc:	e001      	b.n	8009f02 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009efe:	2301      	movs	r3, #1
 8009f00:	e005      	b.n	8009f0e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2b32      	cmp	r3, #50	; 0x32
 8009f06:	d101      	bne.n	8009f0c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	e000      	b.n	8009f0e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009f0c:	2300      	movs	r3, #0
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3710      	adds	r7, #16
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
	...

08009f18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b085      	sub	sp, #20
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009f22:	2300      	movs	r3, #0
 8009f24:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	3301      	adds	r3, #1
 8009f2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	4a13      	ldr	r2, [pc, #76]	; (8009f7c <USB_FlushTxFifo+0x64>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d901      	bls.n	8009f38 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009f34:	2303      	movs	r3, #3
 8009f36:	e01b      	b.n	8009f70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	691b      	ldr	r3, [r3, #16]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	daf2      	bge.n	8009f26 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009f40:	2300      	movs	r3, #0
 8009f42:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	019b      	lsls	r3, r3, #6
 8009f48:	f043 0220 	orr.w	r2, r3, #32
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	3301      	adds	r3, #1
 8009f54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	4a08      	ldr	r2, [pc, #32]	; (8009f7c <USB_FlushTxFifo+0x64>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d901      	bls.n	8009f62 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009f5e:	2303      	movs	r3, #3
 8009f60:	e006      	b.n	8009f70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	691b      	ldr	r3, [r3, #16]
 8009f66:	f003 0320 	and.w	r3, r3, #32
 8009f6a:	2b20      	cmp	r3, #32
 8009f6c:	d0f0      	beq.n	8009f50 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009f6e:	2300      	movs	r3, #0
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3714      	adds	r7, #20
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr
 8009f7c:	00030d40 	.word	0x00030d40

08009f80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b085      	sub	sp, #20
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	3301      	adds	r3, #1
 8009f90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	4a11      	ldr	r2, [pc, #68]	; (8009fdc <USB_FlushRxFifo+0x5c>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d901      	bls.n	8009f9e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009f9a:	2303      	movs	r3, #3
 8009f9c:	e018      	b.n	8009fd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	daf2      	bge.n	8009f8c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2210      	movs	r2, #16
 8009fae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	4a08      	ldr	r2, [pc, #32]	; (8009fdc <USB_FlushRxFifo+0x5c>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d901      	bls.n	8009fc2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009fbe:	2303      	movs	r3, #3
 8009fc0:	e006      	b.n	8009fd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	691b      	ldr	r3, [r3, #16]
 8009fc6:	f003 0310 	and.w	r3, r3, #16
 8009fca:	2b10      	cmp	r3, #16
 8009fcc:	d0f0      	beq.n	8009fb0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009fce:	2300      	movs	r3, #0
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3714      	adds	r7, #20
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr
 8009fdc:	00030d40 	.word	0x00030d40

08009fe0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b089      	sub	sp, #36	; 0x24
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	60b9      	str	r1, [r7, #8]
 8009fea:	4611      	mov	r1, r2
 8009fec:	461a      	mov	r2, r3
 8009fee:	460b      	mov	r3, r1
 8009ff0:	71fb      	strb	r3, [r7, #7]
 8009ff2:	4613      	mov	r3, r2
 8009ff4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009ffe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a002:	2b00      	cmp	r3, #0
 800a004:	d123      	bne.n	800a04e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a006:	88bb      	ldrh	r3, [r7, #4]
 800a008:	3303      	adds	r3, #3
 800a00a:	089b      	lsrs	r3, r3, #2
 800a00c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a00e:	2300      	movs	r3, #0
 800a010:	61bb      	str	r3, [r7, #24]
 800a012:	e018      	b.n	800a046 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a014:	79fb      	ldrb	r3, [r7, #7]
 800a016:	031a      	lsls	r2, r3, #12
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	4413      	add	r3, r2
 800a01c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a020:	461a      	mov	r2, r3
 800a022:	69fb      	ldr	r3, [r7, #28]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a028:	69fb      	ldr	r3, [r7, #28]
 800a02a:	3301      	adds	r3, #1
 800a02c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a02e:	69fb      	ldr	r3, [r7, #28]
 800a030:	3301      	adds	r3, #1
 800a032:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a034:	69fb      	ldr	r3, [r7, #28]
 800a036:	3301      	adds	r3, #1
 800a038:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a03a:	69fb      	ldr	r3, [r7, #28]
 800a03c:	3301      	adds	r3, #1
 800a03e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a040:	69bb      	ldr	r3, [r7, #24]
 800a042:	3301      	adds	r3, #1
 800a044:	61bb      	str	r3, [r7, #24]
 800a046:	69ba      	ldr	r2, [r7, #24]
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d3e2      	bcc.n	800a014 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a04e:	2300      	movs	r3, #0
}
 800a050:	4618      	mov	r0, r3
 800a052:	3724      	adds	r7, #36	; 0x24
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr

0800a05c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b08b      	sub	sp, #44	; 0x2c
 800a060:	af00      	add	r7, sp, #0
 800a062:	60f8      	str	r0, [r7, #12]
 800a064:	60b9      	str	r1, [r7, #8]
 800a066:	4613      	mov	r3, r2
 800a068:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a072:	88fb      	ldrh	r3, [r7, #6]
 800a074:	089b      	lsrs	r3, r3, #2
 800a076:	b29b      	uxth	r3, r3
 800a078:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a07a:	88fb      	ldrh	r3, [r7, #6]
 800a07c:	f003 0303 	and.w	r3, r3, #3
 800a080:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a082:	2300      	movs	r3, #0
 800a084:	623b      	str	r3, [r7, #32]
 800a086:	e014      	b.n	800a0b2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a088:	69bb      	ldr	r3, [r7, #24]
 800a08a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a08e:	681a      	ldr	r2, [r3, #0]
 800a090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a092:	601a      	str	r2, [r3, #0]
    pDest++;
 800a094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a096:	3301      	adds	r3, #1
 800a098:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09c:	3301      	adds	r3, #1
 800a09e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a8:	3301      	adds	r3, #1
 800a0aa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a0ac:	6a3b      	ldr	r3, [r7, #32]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	623b      	str	r3, [r7, #32]
 800a0b2:	6a3a      	ldr	r2, [r7, #32]
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d3e6      	bcc.n	800a088 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a0ba:	8bfb      	ldrh	r3, [r7, #30]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d01e      	beq.n	800a0fe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a0c4:	69bb      	ldr	r3, [r7, #24]
 800a0c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	f107 0310 	add.w	r3, r7, #16
 800a0d0:	6812      	ldr	r2, [r2, #0]
 800a0d2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a0d4:	693a      	ldr	r2, [r7, #16]
 800a0d6:	6a3b      	ldr	r3, [r7, #32]
 800a0d8:	b2db      	uxtb	r3, r3
 800a0da:	00db      	lsls	r3, r3, #3
 800a0dc:	fa22 f303 	lsr.w	r3, r2, r3
 800a0e0:	b2da      	uxtb	r2, r3
 800a0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e4:	701a      	strb	r2, [r3, #0]
      i++;
 800a0e6:	6a3b      	ldr	r3, [r7, #32]
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	623b      	str	r3, [r7, #32]
      pDest++;
 800a0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a0f2:	8bfb      	ldrh	r3, [r7, #30]
 800a0f4:	3b01      	subs	r3, #1
 800a0f6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a0f8:	8bfb      	ldrh	r3, [r7, #30]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d1ea      	bne.n	800a0d4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a100:	4618      	mov	r0, r3
 800a102:	372c      	adds	r7, #44	; 0x2c
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr

0800a10c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b085      	sub	sp, #20
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	695b      	ldr	r3, [r3, #20]
 800a118:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	699b      	ldr	r3, [r3, #24]
 800a11e:	68fa      	ldr	r2, [r7, #12]
 800a120:	4013      	ands	r3, r2
 800a122:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a124:	68fb      	ldr	r3, [r7, #12]
}
 800a126:	4618      	mov	r0, r3
 800a128:	3714      	adds	r7, #20
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	4770      	bx	lr

0800a132 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a132:	b480      	push	{r7}
 800a134:	b083      	sub	sp, #12
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	695b      	ldr	r3, [r3, #20]
 800a13e:	f003 0301 	and.w	r3, r3, #1
}
 800a142:	4618      	mov	r0, r3
 800a144:	370c      	adds	r7, #12
 800a146:	46bd      	mov	sp, r7
 800a148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14c:	4770      	bx	lr
	...

0800a150 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a150:	b480      	push	{r7}
 800a152:	b085      	sub	sp, #20
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a158:	2300      	movs	r3, #0
 800a15a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	3301      	adds	r3, #1
 800a160:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	4a13      	ldr	r2, [pc, #76]	; (800a1b4 <USB_CoreReset+0x64>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d901      	bls.n	800a16e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a16a:	2303      	movs	r3, #3
 800a16c:	e01b      	b.n	800a1a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	691b      	ldr	r3, [r3, #16]
 800a172:	2b00      	cmp	r3, #0
 800a174:	daf2      	bge.n	800a15c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a176:	2300      	movs	r3, #0
 800a178:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	691b      	ldr	r3, [r3, #16]
 800a17e:	f043 0201 	orr.w	r2, r3, #1
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	3301      	adds	r3, #1
 800a18a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	4a09      	ldr	r2, [pc, #36]	; (800a1b4 <USB_CoreReset+0x64>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d901      	bls.n	800a198 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a194:	2303      	movs	r3, #3
 800a196:	e006      	b.n	800a1a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	691b      	ldr	r3, [r3, #16]
 800a19c:	f003 0301 	and.w	r3, r3, #1
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	d0f0      	beq.n	800a186 <USB_CoreReset+0x36>

  return HAL_OK;
 800a1a4:	2300      	movs	r3, #0
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3714      	adds	r7, #20
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b0:	4770      	bx	lr
 800a1b2:	bf00      	nop
 800a1b4:	00030d40 	.word	0x00030d40

0800a1b8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a1b8:	b084      	sub	sp, #16
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	b086      	sub	sp, #24
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
 800a1c2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a1c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a1d8:	461a      	mov	r2, r3
 800a1da:	2300      	movs	r3, #0
 800a1dc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ee:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1fa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d018      	beq.n	800a240 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800a20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a210:	2b01      	cmp	r3, #1
 800a212:	d10a      	bne.n	800a22a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	68fa      	ldr	r2, [r7, #12]
 800a21e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a222:	f043 0304 	orr.w	r3, r3, #4
 800a226:	6013      	str	r3, [r2, #0]
 800a228:	e014      	b.n	800a254 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	68fa      	ldr	r2, [r7, #12]
 800a234:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a238:	f023 0304 	bic.w	r3, r3, #4
 800a23c:	6013      	str	r3, [r2, #0]
 800a23e:	e009      	b.n	800a254 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	68fa      	ldr	r2, [r7, #12]
 800a24a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a24e:	f023 0304 	bic.w	r3, r3, #4
 800a252:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a254:	2110      	movs	r1, #16
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f7ff fe5e 	bl	8009f18 <USB_FlushTxFifo>
 800a25c:	4603      	mov	r3, r0
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d001      	beq.n	800a266 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800a262:	2301      	movs	r3, #1
 800a264:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f7ff fe8a 	bl	8009f80 <USB_FlushRxFifo>
 800a26c:	4603      	mov	r3, r0
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d001      	beq.n	800a276 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800a272:	2301      	movs	r3, #1
 800a274:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a276:	2300      	movs	r3, #0
 800a278:	613b      	str	r3, [r7, #16]
 800a27a:	e015      	b.n	800a2a8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	015a      	lsls	r2, r3, #5
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	4413      	add	r3, r2
 800a284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a288:	461a      	mov	r2, r3
 800a28a:	f04f 33ff 	mov.w	r3, #4294967295
 800a28e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	015a      	lsls	r2, r3, #5
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	4413      	add	r3, r2
 800a298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a29c:	461a      	mov	r2, r3
 800a29e:	2300      	movs	r3, #0
 800a2a0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	3301      	adds	r3, #1
 800a2a6:	613b      	str	r3, [r7, #16]
 800a2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2aa:	693a      	ldr	r2, [r7, #16]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d3e5      	bcc.n	800a27c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a2bc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d00b      	beq.n	800a2e2 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a2d0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	4a13      	ldr	r2, [pc, #76]	; (800a324 <USB_HostInit+0x16c>)
 800a2d6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	4a13      	ldr	r2, [pc, #76]	; (800a328 <USB_HostInit+0x170>)
 800a2dc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800a2e0:	e009      	b.n	800a2f6 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2280      	movs	r2, #128	; 0x80
 800a2e6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	4a10      	ldr	r2, [pc, #64]	; (800a32c <USB_HostInit+0x174>)
 800a2ec:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	4a0f      	ldr	r2, [pc, #60]	; (800a330 <USB_HostInit+0x178>)
 800a2f2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d105      	bne.n	800a308 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	699b      	ldr	r3, [r3, #24]
 800a300:	f043 0210 	orr.w	r2, r3, #16
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	699a      	ldr	r2, [r3, #24]
 800a30c:	4b09      	ldr	r3, [pc, #36]	; (800a334 <USB_HostInit+0x17c>)
 800a30e:	4313      	orrs	r3, r2
 800a310:	687a      	ldr	r2, [r7, #4]
 800a312:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800a314:	7dfb      	ldrb	r3, [r7, #23]
}
 800a316:	4618      	mov	r0, r3
 800a318:	3718      	adds	r7, #24
 800a31a:	46bd      	mov	sp, r7
 800a31c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a320:	b004      	add	sp, #16
 800a322:	4770      	bx	lr
 800a324:	01000200 	.word	0x01000200
 800a328:	00e00300 	.word	0x00e00300
 800a32c:	00600080 	.word	0x00600080
 800a330:	004000e0 	.word	0x004000e0
 800a334:	a3200008 	.word	0xa3200008

0800a338 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a338:	b480      	push	{r7}
 800a33a:	b085      	sub	sp, #20
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	460b      	mov	r3, r1
 800a342:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	68fa      	ldr	r2, [r7, #12]
 800a352:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a356:	f023 0303 	bic.w	r3, r3, #3
 800a35a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	78fb      	ldrb	r3, [r7, #3]
 800a366:	f003 0303 	and.w	r3, r3, #3
 800a36a:	68f9      	ldr	r1, [r7, #12]
 800a36c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a370:	4313      	orrs	r3, r2
 800a372:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a374:	78fb      	ldrb	r3, [r7, #3]
 800a376:	2b01      	cmp	r3, #1
 800a378:	d107      	bne.n	800a38a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a380:	461a      	mov	r2, r3
 800a382:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a386:	6053      	str	r3, [r2, #4]
 800a388:	e009      	b.n	800a39e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800a38a:	78fb      	ldrb	r3, [r7, #3]
 800a38c:	2b02      	cmp	r3, #2
 800a38e:	d106      	bne.n	800a39e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a396:	461a      	mov	r2, r3
 800a398:	f241 7370 	movw	r3, #6000	; 0x1770
 800a39c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800a39e:	2300      	movs	r3, #0
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3714      	adds	r7, #20
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr

0800a3ac <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a3cc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	68fa      	ldr	r2, [r7, #12]
 800a3d2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a3d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3da:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800a3dc:	2064      	movs	r0, #100	; 0x64
 800a3de:	f7f9 f96f 	bl	80036c0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	68fa      	ldr	r2, [r7, #12]
 800a3e6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a3ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a3ee:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800a3f0:	200a      	movs	r0, #10
 800a3f2:	f7f9 f965 	bl	80036c0 <HAL_Delay>

  return HAL_OK;
 800a3f6:	2300      	movs	r3, #0
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3710      	adds	r7, #16
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800a400:	b480      	push	{r7}
 800a402:	b085      	sub	sp, #20
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	460b      	mov	r3, r1
 800a40a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a410:	2300      	movs	r3, #0
 800a412:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a424:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d109      	bne.n	800a444 <USB_DriveVbus+0x44>
 800a430:	78fb      	ldrb	r3, [r7, #3]
 800a432:	2b01      	cmp	r3, #1
 800a434:	d106      	bne.n	800a444 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	68fa      	ldr	r2, [r7, #12]
 800a43a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a43e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a442:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a44a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a44e:	d109      	bne.n	800a464 <USB_DriveVbus+0x64>
 800a450:	78fb      	ldrb	r3, [r7, #3]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d106      	bne.n	800a464 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	68fa      	ldr	r2, [r7, #12]
 800a45a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a45e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a462:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800a464:	2300      	movs	r3, #0
}
 800a466:	4618      	mov	r0, r3
 800a468:	3714      	adds	r7, #20
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr

0800a472 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a472:	b480      	push	{r7}
 800a474:	b085      	sub	sp, #20
 800a476:	af00      	add	r7, sp, #0
 800a478:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a47e:	2300      	movs	r3, #0
 800a480:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	0c5b      	lsrs	r3, r3, #17
 800a490:	f003 0303 	and.w	r3, r3, #3
}
 800a494:	4618      	mov	r0, r3
 800a496:	3714      	adds	r7, #20
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr

0800a4a0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b085      	sub	sp, #20
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a4b2:	689b      	ldr	r3, [r3, #8]
 800a4b4:	b29b      	uxth	r3, r3
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3714      	adds	r7, #20
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr
	...

0800a4c4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b088      	sub	sp, #32
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	4608      	mov	r0, r1
 800a4ce:	4611      	mov	r1, r2
 800a4d0:	461a      	mov	r2, r3
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	70fb      	strb	r3, [r7, #3]
 800a4d6:	460b      	mov	r3, r1
 800a4d8:	70bb      	strb	r3, [r7, #2]
 800a4da:	4613      	mov	r3, r2
 800a4dc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800a4e6:	78fb      	ldrb	r3, [r7, #3]
 800a4e8:	015a      	lsls	r2, r3, #5
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	4413      	add	r3, r2
 800a4ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	f04f 33ff 	mov.w	r3, #4294967295
 800a4f8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800a4fa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a4fe:	2b03      	cmp	r3, #3
 800a500:	d87e      	bhi.n	800a600 <USB_HC_Init+0x13c>
 800a502:	a201      	add	r2, pc, #4	; (adr r2, 800a508 <USB_HC_Init+0x44>)
 800a504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a508:	0800a519 	.word	0x0800a519
 800a50c:	0800a5c3 	.word	0x0800a5c3
 800a510:	0800a519 	.word	0x0800a519
 800a514:	0800a585 	.word	0x0800a585
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a518:	78fb      	ldrb	r3, [r7, #3]
 800a51a:	015a      	lsls	r2, r3, #5
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	4413      	add	r3, r2
 800a520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a524:	461a      	mov	r2, r3
 800a526:	f240 439d 	movw	r3, #1181	; 0x49d
 800a52a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800a52c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a530:	2b00      	cmp	r3, #0
 800a532:	da10      	bge.n	800a556 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a534:	78fb      	ldrb	r3, [r7, #3]
 800a536:	015a      	lsls	r2, r3, #5
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	4413      	add	r3, r2
 800a53c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a540:	68db      	ldr	r3, [r3, #12]
 800a542:	78fa      	ldrb	r2, [r7, #3]
 800a544:	0151      	lsls	r1, r2, #5
 800a546:	693a      	ldr	r2, [r7, #16]
 800a548:	440a      	add	r2, r1
 800a54a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a54e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a552:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800a554:	e057      	b.n	800a606 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a55a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d051      	beq.n	800a606 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800a562:	78fb      	ldrb	r3, [r7, #3]
 800a564:	015a      	lsls	r2, r3, #5
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	4413      	add	r3, r2
 800a56a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a56e:	68db      	ldr	r3, [r3, #12]
 800a570:	78fa      	ldrb	r2, [r7, #3]
 800a572:	0151      	lsls	r1, r2, #5
 800a574:	693a      	ldr	r2, [r7, #16]
 800a576:	440a      	add	r2, r1
 800a578:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a57c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a580:	60d3      	str	r3, [r2, #12]
      break;
 800a582:	e040      	b.n	800a606 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a584:	78fb      	ldrb	r3, [r7, #3]
 800a586:	015a      	lsls	r2, r3, #5
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	4413      	add	r3, r2
 800a58c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a590:	461a      	mov	r2, r3
 800a592:	f240 639d 	movw	r3, #1693	; 0x69d
 800a596:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a598:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	da34      	bge.n	800a60a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a5a0:	78fb      	ldrb	r3, [r7, #3]
 800a5a2:	015a      	lsls	r2, r3, #5
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	4413      	add	r3, r2
 800a5a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5ac:	68db      	ldr	r3, [r3, #12]
 800a5ae:	78fa      	ldrb	r2, [r7, #3]
 800a5b0:	0151      	lsls	r1, r2, #5
 800a5b2:	693a      	ldr	r2, [r7, #16]
 800a5b4:	440a      	add	r2, r1
 800a5b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5be:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a5c0:	e023      	b.n	800a60a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a5c2:	78fb      	ldrb	r3, [r7, #3]
 800a5c4:	015a      	lsls	r2, r3, #5
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	4413      	add	r3, r2
 800a5ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	f240 2325 	movw	r3, #549	; 0x225
 800a5d4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a5d6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	da17      	bge.n	800a60e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a5de:	78fb      	ldrb	r3, [r7, #3]
 800a5e0:	015a      	lsls	r2, r3, #5
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	4413      	add	r3, r2
 800a5e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5ea:	68db      	ldr	r3, [r3, #12]
 800a5ec:	78fa      	ldrb	r2, [r7, #3]
 800a5ee:	0151      	lsls	r1, r2, #5
 800a5f0:	693a      	ldr	r2, [r7, #16]
 800a5f2:	440a      	add	r2, r1
 800a5f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5f8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800a5fc:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a5fe:	e006      	b.n	800a60e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800a600:	2301      	movs	r3, #1
 800a602:	77fb      	strb	r3, [r7, #31]
      break;
 800a604:	e004      	b.n	800a610 <USB_HC_Init+0x14c>
      break;
 800a606:	bf00      	nop
 800a608:	e002      	b.n	800a610 <USB_HC_Init+0x14c>
      break;
 800a60a:	bf00      	nop
 800a60c:	e000      	b.n	800a610 <USB_HC_Init+0x14c>
      break;
 800a60e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800a610:	78fb      	ldrb	r3, [r7, #3]
 800a612:	015a      	lsls	r2, r3, #5
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	4413      	add	r3, r2
 800a618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	78fa      	ldrb	r2, [r7, #3]
 800a620:	0151      	lsls	r1, r2, #5
 800a622:	693a      	ldr	r2, [r7, #16]
 800a624:	440a      	add	r2, r1
 800a626:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a62a:	f043 0302 	orr.w	r3, r3, #2
 800a62e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a636:	699a      	ldr	r2, [r3, #24]
 800a638:	78fb      	ldrb	r3, [r7, #3]
 800a63a:	f003 030f 	and.w	r3, r3, #15
 800a63e:	2101      	movs	r1, #1
 800a640:	fa01 f303 	lsl.w	r3, r1, r3
 800a644:	6939      	ldr	r1, [r7, #16]
 800a646:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a64a:	4313      	orrs	r3, r2
 800a64c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	699b      	ldr	r3, [r3, #24]
 800a652:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a65a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	da03      	bge.n	800a66a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a666:	61bb      	str	r3, [r7, #24]
 800a668:	e001      	b.n	800a66e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800a66a:	2300      	movs	r3, #0
 800a66c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f7ff feff 	bl	800a472 <USB_GetHostSpeed>
 800a674:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800a676:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a67a:	2b02      	cmp	r3, #2
 800a67c:	d106      	bne.n	800a68c <USB_HC_Init+0x1c8>
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2b02      	cmp	r3, #2
 800a682:	d003      	beq.n	800a68c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a684:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a688:	617b      	str	r3, [r7, #20]
 800a68a:	e001      	b.n	800a690 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a68c:	2300      	movs	r3, #0
 800a68e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a690:	787b      	ldrb	r3, [r7, #1]
 800a692:	059b      	lsls	r3, r3, #22
 800a694:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a698:	78bb      	ldrb	r3, [r7, #2]
 800a69a:	02db      	lsls	r3, r3, #11
 800a69c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a6a0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a6a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a6a6:	049b      	lsls	r3, r3, #18
 800a6a8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a6ac:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a6ae:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a6b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a6b4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a6b6:	69bb      	ldr	r3, [r7, #24]
 800a6b8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a6ba:	78fb      	ldrb	r3, [r7, #3]
 800a6bc:	0159      	lsls	r1, r3, #5
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	440b      	add	r3, r1
 800a6c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6c6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a6cc:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800a6ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a6d2:	2b03      	cmp	r3, #3
 800a6d4:	d003      	beq.n	800a6de <USB_HC_Init+0x21a>
 800a6d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	d10f      	bne.n	800a6fe <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800a6de:	78fb      	ldrb	r3, [r7, #3]
 800a6e0:	015a      	lsls	r2, r3, #5
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	4413      	add	r3, r2
 800a6e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	78fa      	ldrb	r2, [r7, #3]
 800a6ee:	0151      	lsls	r1, r2, #5
 800a6f0:	693a      	ldr	r2, [r7, #16]
 800a6f2:	440a      	add	r2, r1
 800a6f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a6f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a6fc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a6fe:	7ffb      	ldrb	r3, [r7, #31]
}
 800a700:	4618      	mov	r0, r3
 800a702:	3720      	adds	r7, #32
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b08c      	sub	sp, #48	; 0x30
 800a70c:	af02      	add	r7, sp, #8
 800a70e:	60f8      	str	r0, [r7, #12]
 800a710:	60b9      	str	r1, [r7, #8]
 800a712:	4613      	mov	r3, r2
 800a714:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	785b      	ldrb	r3, [r3, #1]
 800a71e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800a720:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a724:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a72a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d02d      	beq.n	800a78e <USB_HC_StartXfer+0x86>
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	791b      	ldrb	r3, [r3, #4]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d129      	bne.n	800a78e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800a73a:	79fb      	ldrb	r3, [r7, #7]
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d117      	bne.n	800a770 <USB_HC_StartXfer+0x68>
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	79db      	ldrb	r3, [r3, #7]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d003      	beq.n	800a750 <USB_HC_StartXfer+0x48>
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	79db      	ldrb	r3, [r3, #7]
 800a74c:	2b02      	cmp	r3, #2
 800a74e:	d10f      	bne.n	800a770 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800a750:	69fb      	ldr	r3, [r7, #28]
 800a752:	015a      	lsls	r2, r3, #5
 800a754:	6a3b      	ldr	r3, [r7, #32]
 800a756:	4413      	add	r3, r2
 800a758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a75c:	68db      	ldr	r3, [r3, #12]
 800a75e:	69fa      	ldr	r2, [r7, #28]
 800a760:	0151      	lsls	r1, r2, #5
 800a762:	6a3a      	ldr	r2, [r7, #32]
 800a764:	440a      	add	r2, r1
 800a766:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a76a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a76e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800a770:	79fb      	ldrb	r3, [r7, #7]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d10b      	bne.n	800a78e <USB_HC_StartXfer+0x86>
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	795b      	ldrb	r3, [r3, #5]
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d107      	bne.n	800a78e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	785b      	ldrb	r3, [r3, #1]
 800a782:	4619      	mov	r1, r3
 800a784:	68f8      	ldr	r0, [r7, #12]
 800a786:	f000 fa0f 	bl	800aba8 <USB_DoPing>
      return HAL_OK;
 800a78a:	2300      	movs	r3, #0
 800a78c:	e0f8      	b.n	800a980 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	695b      	ldr	r3, [r3, #20]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d018      	beq.n	800a7c8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	695b      	ldr	r3, [r3, #20]
 800a79a:	68ba      	ldr	r2, [r7, #8]
 800a79c:	8912      	ldrh	r2, [r2, #8]
 800a79e:	4413      	add	r3, r2
 800a7a0:	3b01      	subs	r3, #1
 800a7a2:	68ba      	ldr	r2, [r7, #8]
 800a7a4:	8912      	ldrh	r2, [r2, #8]
 800a7a6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7aa:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800a7ac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a7ae:	8b7b      	ldrh	r3, [r7, #26]
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d90b      	bls.n	800a7cc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800a7b4:	8b7b      	ldrh	r3, [r7, #26]
 800a7b6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a7b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a7ba:	68ba      	ldr	r2, [r7, #8]
 800a7bc:	8912      	ldrh	r2, [r2, #8]
 800a7be:	fb03 f202 	mul.w	r2, r3, r2
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	611a      	str	r2, [r3, #16]
 800a7c6:	e001      	b.n	800a7cc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	78db      	ldrb	r3, [r3, #3]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d007      	beq.n	800a7e4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a7d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a7d6:	68ba      	ldr	r2, [r7, #8]
 800a7d8:	8912      	ldrh	r2, [r2, #8]
 800a7da:	fb03 f202 	mul.w	r2, r3, r2
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	611a      	str	r2, [r3, #16]
 800a7e2:	e003      	b.n	800a7ec <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	695a      	ldr	r2, [r3, #20]
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	691b      	ldr	r3, [r3, #16]
 800a7f0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a7f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a7f6:	04d9      	lsls	r1, r3, #19
 800a7f8:	4b63      	ldr	r3, [pc, #396]	; (800a988 <USB_HC_StartXfer+0x280>)
 800a7fa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a7fc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	7a9b      	ldrb	r3, [r3, #10]
 800a802:	075b      	lsls	r3, r3, #29
 800a804:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a808:	69f9      	ldr	r1, [r7, #28]
 800a80a:	0148      	lsls	r0, r1, #5
 800a80c:	6a39      	ldr	r1, [r7, #32]
 800a80e:	4401      	add	r1, r0
 800a810:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a814:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a816:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a818:	79fb      	ldrb	r3, [r7, #7]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d009      	beq.n	800a832 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	68d9      	ldr	r1, [r3, #12]
 800a822:	69fb      	ldr	r3, [r7, #28]
 800a824:	015a      	lsls	r2, r3, #5
 800a826:	6a3b      	ldr	r3, [r7, #32]
 800a828:	4413      	add	r3, r2
 800a82a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a82e:	460a      	mov	r2, r1
 800a830:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a832:	6a3b      	ldr	r3, [r7, #32]
 800a834:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a838:	689b      	ldr	r3, [r3, #8]
 800a83a:	f003 0301 	and.w	r3, r3, #1
 800a83e:	2b00      	cmp	r3, #0
 800a840:	bf0c      	ite	eq
 800a842:	2301      	moveq	r3, #1
 800a844:	2300      	movne	r3, #0
 800a846:	b2db      	uxtb	r3, r3
 800a848:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a84a:	69fb      	ldr	r3, [r7, #28]
 800a84c:	015a      	lsls	r2, r3, #5
 800a84e:	6a3b      	ldr	r3, [r7, #32]
 800a850:	4413      	add	r3, r2
 800a852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	69fa      	ldr	r2, [r7, #28]
 800a85a:	0151      	lsls	r1, r2, #5
 800a85c:	6a3a      	ldr	r2, [r7, #32]
 800a85e:	440a      	add	r2, r1
 800a860:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a864:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a868:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a86a:	69fb      	ldr	r3, [r7, #28]
 800a86c:	015a      	lsls	r2, r3, #5
 800a86e:	6a3b      	ldr	r3, [r7, #32]
 800a870:	4413      	add	r3, r2
 800a872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	7e7b      	ldrb	r3, [r7, #25]
 800a87a:	075b      	lsls	r3, r3, #29
 800a87c:	69f9      	ldr	r1, [r7, #28]
 800a87e:	0148      	lsls	r0, r1, #5
 800a880:	6a39      	ldr	r1, [r7, #32]
 800a882:	4401      	add	r1, r0
 800a884:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800a888:	4313      	orrs	r3, r2
 800a88a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a88c:	69fb      	ldr	r3, [r7, #28]
 800a88e:	015a      	lsls	r2, r3, #5
 800a890:	6a3b      	ldr	r3, [r7, #32]
 800a892:	4413      	add	r3, r2
 800a894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a8a2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	78db      	ldrb	r3, [r3, #3]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d004      	beq.n	800a8b6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8b2:	613b      	str	r3, [r7, #16]
 800a8b4:	e003      	b.n	800a8be <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a8bc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a8c4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a8c6:	69fb      	ldr	r3, [r7, #28]
 800a8c8:	015a      	lsls	r2, r3, #5
 800a8ca:	6a3b      	ldr	r3, [r7, #32]
 800a8cc:	4413      	add	r3, r2
 800a8ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800a8d8:	79fb      	ldrb	r3, [r7, #7]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d001      	beq.n	800a8e2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	e04e      	b.n	800a980 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	78db      	ldrb	r3, [r3, #3]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d149      	bne.n	800a97e <USB_HC_StartXfer+0x276>
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	695b      	ldr	r3, [r3, #20]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d045      	beq.n	800a97e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	79db      	ldrb	r3, [r3, #7]
 800a8f6:	2b03      	cmp	r3, #3
 800a8f8:	d830      	bhi.n	800a95c <USB_HC_StartXfer+0x254>
 800a8fa:	a201      	add	r2, pc, #4	; (adr r2, 800a900 <USB_HC_StartXfer+0x1f8>)
 800a8fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a900:	0800a911 	.word	0x0800a911
 800a904:	0800a935 	.word	0x0800a935
 800a908:	0800a911 	.word	0x0800a911
 800a90c:	0800a935 	.word	0x0800a935
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	695b      	ldr	r3, [r3, #20]
 800a914:	3303      	adds	r3, #3
 800a916:	089b      	lsrs	r3, r3, #2
 800a918:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a91a:	8afa      	ldrh	r2, [r7, #22]
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a920:	b29b      	uxth	r3, r3
 800a922:	429a      	cmp	r2, r3
 800a924:	d91c      	bls.n	800a960 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	699b      	ldr	r3, [r3, #24]
 800a92a:	f043 0220 	orr.w	r2, r3, #32
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	619a      	str	r2, [r3, #24]
        }
        break;
 800a932:	e015      	b.n	800a960 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	695b      	ldr	r3, [r3, #20]
 800a938:	3303      	adds	r3, #3
 800a93a:	089b      	lsrs	r3, r3, #2
 800a93c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a93e:	8afa      	ldrh	r2, [r7, #22]
 800a940:	6a3b      	ldr	r3, [r7, #32]
 800a942:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a946:	691b      	ldr	r3, [r3, #16]
 800a948:	b29b      	uxth	r3, r3
 800a94a:	429a      	cmp	r2, r3
 800a94c:	d90a      	bls.n	800a964 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	699b      	ldr	r3, [r3, #24]
 800a952:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	619a      	str	r2, [r3, #24]
        }
        break;
 800a95a:	e003      	b.n	800a964 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800a95c:	bf00      	nop
 800a95e:	e002      	b.n	800a966 <USB_HC_StartXfer+0x25e>
        break;
 800a960:	bf00      	nop
 800a962:	e000      	b.n	800a966 <USB_HC_StartXfer+0x25e>
        break;
 800a964:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	68d9      	ldr	r1, [r3, #12]
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	785a      	ldrb	r2, [r3, #1]
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	695b      	ldr	r3, [r3, #20]
 800a972:	b29b      	uxth	r3, r3
 800a974:	2000      	movs	r0, #0
 800a976:	9000      	str	r0, [sp, #0]
 800a978:	68f8      	ldr	r0, [r7, #12]
 800a97a:	f7ff fb31 	bl	8009fe0 <USB_WritePacket>
  }

  return HAL_OK;
 800a97e:	2300      	movs	r3, #0
}
 800a980:	4618      	mov	r0, r3
 800a982:	3728      	adds	r7, #40	; 0x28
 800a984:	46bd      	mov	sp, r7
 800a986:	bd80      	pop	{r7, pc}
 800a988:	1ff80000 	.word	0x1ff80000

0800a98c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b085      	sub	sp, #20
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a99e:	695b      	ldr	r3, [r3, #20]
 800a9a0:	b29b      	uxth	r3, r3
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3714      	adds	r7, #20
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ac:	4770      	bx	lr

0800a9ae <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a9ae:	b480      	push	{r7}
 800a9b0:	b089      	sub	sp, #36	; 0x24
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
 800a9b6:	460b      	mov	r3, r1
 800a9b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800a9be:	78fb      	ldrb	r3, [r7, #3]
 800a9c0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a9c6:	69bb      	ldr	r3, [r7, #24]
 800a9c8:	015a      	lsls	r2, r3, #5
 800a9ca:	69fb      	ldr	r3, [r7, #28]
 800a9cc:	4413      	add	r3, r2
 800a9ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	0c9b      	lsrs	r3, r3, #18
 800a9d6:	f003 0303 	and.w	r3, r3, #3
 800a9da:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800a9dc:	69bb      	ldr	r3, [r7, #24]
 800a9de:	015a      	lsls	r2, r3, #5
 800a9e0:	69fb      	ldr	r3, [r7, #28]
 800a9e2:	4413      	add	r3, r2
 800a9e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	0fdb      	lsrs	r3, r3, #31
 800a9ec:	f003 0301 	and.w	r3, r3, #1
 800a9f0:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	689b      	ldr	r3, [r3, #8]
 800a9f6:	f003 0320 	and.w	r3, r3, #32
 800a9fa:	2b20      	cmp	r3, #32
 800a9fc:	d104      	bne.n	800aa08 <USB_HC_Halt+0x5a>
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d101      	bne.n	800aa08 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800aa04:	2300      	movs	r3, #0
 800aa06:	e0c8      	b.n	800ab9a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d002      	beq.n	800aa14 <USB_HC_Halt+0x66>
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	2b02      	cmp	r3, #2
 800aa12:	d163      	bne.n	800aadc <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800aa14:	69bb      	ldr	r3, [r7, #24]
 800aa16:	015a      	lsls	r2, r3, #5
 800aa18:	69fb      	ldr	r3, [r7, #28]
 800aa1a:	4413      	add	r3, r2
 800aa1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	69ba      	ldr	r2, [r7, #24]
 800aa24:	0151      	lsls	r1, r2, #5
 800aa26:	69fa      	ldr	r2, [r7, #28]
 800aa28:	440a      	add	r2, r1
 800aa2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aa32:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	689b      	ldr	r3, [r3, #8]
 800aa38:	f003 0320 	and.w	r3, r3, #32
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	f040 80ab 	bne.w	800ab98 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa46:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d133      	bne.n	800aab6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800aa4e:	69bb      	ldr	r3, [r7, #24]
 800aa50:	015a      	lsls	r2, r3, #5
 800aa52:	69fb      	ldr	r3, [r7, #28]
 800aa54:	4413      	add	r3, r2
 800aa56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	69ba      	ldr	r2, [r7, #24]
 800aa5e:	0151      	lsls	r1, r2, #5
 800aa60:	69fa      	ldr	r2, [r7, #28]
 800aa62:	440a      	add	r2, r1
 800aa64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa6c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800aa6e:	69bb      	ldr	r3, [r7, #24]
 800aa70:	015a      	lsls	r2, r3, #5
 800aa72:	69fb      	ldr	r3, [r7, #28]
 800aa74:	4413      	add	r3, r2
 800aa76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	69ba      	ldr	r2, [r7, #24]
 800aa7e:	0151      	lsls	r1, r2, #5
 800aa80:	69fa      	ldr	r2, [r7, #28]
 800aa82:	440a      	add	r2, r1
 800aa84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aa88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aa8c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	3301      	adds	r3, #1
 800aa92:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aa9a:	d81d      	bhi.n	800aad8 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800aa9c:	69bb      	ldr	r3, [r7, #24]
 800aa9e:	015a      	lsls	r2, r3, #5
 800aaa0:	69fb      	ldr	r3, [r7, #28]
 800aaa2:	4413      	add	r3, r2
 800aaa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aaae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aab2:	d0ec      	beq.n	800aa8e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800aab4:	e070      	b.n	800ab98 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800aab6:	69bb      	ldr	r3, [r7, #24]
 800aab8:	015a      	lsls	r2, r3, #5
 800aaba:	69fb      	ldr	r3, [r7, #28]
 800aabc:	4413      	add	r3, r2
 800aabe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	69ba      	ldr	r2, [r7, #24]
 800aac6:	0151      	lsls	r1, r2, #5
 800aac8:	69fa      	ldr	r2, [r7, #28]
 800aaca:	440a      	add	r2, r1
 800aacc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aad0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aad4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800aad6:	e05f      	b.n	800ab98 <USB_HC_Halt+0x1ea>
            break;
 800aad8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800aada:	e05d      	b.n	800ab98 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800aadc:	69bb      	ldr	r3, [r7, #24]
 800aade:	015a      	lsls	r2, r3, #5
 800aae0:	69fb      	ldr	r3, [r7, #28]
 800aae2:	4413      	add	r3, r2
 800aae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	69ba      	ldr	r2, [r7, #24]
 800aaec:	0151      	lsls	r1, r2, #5
 800aaee:	69fa      	ldr	r2, [r7, #28]
 800aaf0:	440a      	add	r2, r1
 800aaf2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aaf6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aafa:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800aafc:	69fb      	ldr	r3, [r7, #28]
 800aafe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ab02:	691b      	ldr	r3, [r3, #16]
 800ab04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d133      	bne.n	800ab74 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ab0c:	69bb      	ldr	r3, [r7, #24]
 800ab0e:	015a      	lsls	r2, r3, #5
 800ab10:	69fb      	ldr	r3, [r7, #28]
 800ab12:	4413      	add	r3, r2
 800ab14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	69ba      	ldr	r2, [r7, #24]
 800ab1c:	0151      	lsls	r1, r2, #5
 800ab1e:	69fa      	ldr	r2, [r7, #28]
 800ab20:	440a      	add	r2, r1
 800ab22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab2a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ab2c:	69bb      	ldr	r3, [r7, #24]
 800ab2e:	015a      	lsls	r2, r3, #5
 800ab30:	69fb      	ldr	r3, [r7, #28]
 800ab32:	4413      	add	r3, r2
 800ab34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	69ba      	ldr	r2, [r7, #24]
 800ab3c:	0151      	lsls	r1, r2, #5
 800ab3e:	69fa      	ldr	r2, [r7, #28]
 800ab40:	440a      	add	r2, r1
 800ab42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ab4a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	3301      	adds	r3, #1
 800ab50:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ab58:	d81d      	bhi.n	800ab96 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ab5a:	69bb      	ldr	r3, [r7, #24]
 800ab5c:	015a      	lsls	r2, r3, #5
 800ab5e:	69fb      	ldr	r3, [r7, #28]
 800ab60:	4413      	add	r3, r2
 800ab62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab70:	d0ec      	beq.n	800ab4c <USB_HC_Halt+0x19e>
 800ab72:	e011      	b.n	800ab98 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ab74:	69bb      	ldr	r3, [r7, #24]
 800ab76:	015a      	lsls	r2, r3, #5
 800ab78:	69fb      	ldr	r3, [r7, #28]
 800ab7a:	4413      	add	r3, r2
 800ab7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	69ba      	ldr	r2, [r7, #24]
 800ab84:	0151      	lsls	r1, r2, #5
 800ab86:	69fa      	ldr	r2, [r7, #28]
 800ab88:	440a      	add	r2, r1
 800ab8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ab8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ab92:	6013      	str	r3, [r2, #0]
 800ab94:	e000      	b.n	800ab98 <USB_HC_Halt+0x1ea>
          break;
 800ab96:	bf00      	nop
    }
  }

  return HAL_OK;
 800ab98:	2300      	movs	r3, #0
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3724      	adds	r7, #36	; 0x24
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba4:	4770      	bx	lr
	...

0800aba8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b087      	sub	sp, #28
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	460b      	mov	r3, r1
 800abb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800abb8:	78fb      	ldrb	r3, [r7, #3]
 800abba:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800abbc:	2301      	movs	r3, #1
 800abbe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	04da      	lsls	r2, r3, #19
 800abc4:	4b15      	ldr	r3, [pc, #84]	; (800ac1c <USB_DoPing+0x74>)
 800abc6:	4013      	ands	r3, r2
 800abc8:	693a      	ldr	r2, [r7, #16]
 800abca:	0151      	lsls	r1, r2, #5
 800abcc:	697a      	ldr	r2, [r7, #20]
 800abce:	440a      	add	r2, r1
 800abd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800abd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800abd8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	015a      	lsls	r2, r3, #5
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	4413      	add	r3, r2
 800abe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800abf0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800abf8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	015a      	lsls	r2, r3, #5
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	4413      	add	r3, r2
 800ac02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac06:	461a      	mov	r2, r3
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800ac0c:	2300      	movs	r3, #0
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	371c      	adds	r7, #28
 800ac12:	46bd      	mov	sp, r7
 800ac14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac18:	4770      	bx	lr
 800ac1a:	bf00      	nop
 800ac1c:	1ff80000 	.word	0x1ff80000

0800ac20 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b088      	sub	sp, #32
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800ac30:	2300      	movs	r3, #0
 800ac32:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f7ff f911 	bl	8009e5c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ac3a:	2110      	movs	r1, #16
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f7ff f96b 	bl	8009f18 <USB_FlushTxFifo>
 800ac42:	4603      	mov	r3, r0
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d001      	beq.n	800ac4c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f7ff f997 	bl	8009f80 <USB_FlushRxFifo>
 800ac52:	4603      	mov	r3, r0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d001      	beq.n	800ac5c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	61bb      	str	r3, [r7, #24]
 800ac60:	e01f      	b.n	800aca2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800ac62:	69bb      	ldr	r3, [r7, #24]
 800ac64:	015a      	lsls	r2, r3, #5
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	4413      	add	r3, r2
 800ac6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac78:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac80:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ac88:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800ac8a:	69bb      	ldr	r3, [r7, #24]
 800ac8c:	015a      	lsls	r2, r3, #5
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	4413      	add	r3, r2
 800ac92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac96:	461a      	mov	r2, r3
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800ac9c:	69bb      	ldr	r3, [r7, #24]
 800ac9e:	3301      	adds	r3, #1
 800aca0:	61bb      	str	r3, [r7, #24]
 800aca2:	69bb      	ldr	r3, [r7, #24]
 800aca4:	2b0f      	cmp	r3, #15
 800aca6:	d9dc      	bls.n	800ac62 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800aca8:	2300      	movs	r3, #0
 800acaa:	61bb      	str	r3, [r7, #24]
 800acac:	e034      	b.n	800ad18 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800acae:	69bb      	ldr	r3, [r7, #24]
 800acb0:	015a      	lsls	r2, r3, #5
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	4413      	add	r3, r2
 800acb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800acc4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800accc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800acd4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800acd6:	69bb      	ldr	r3, [r7, #24]
 800acd8:	015a      	lsls	r2, r3, #5
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	4413      	add	r3, r2
 800acde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ace2:	461a      	mov	r2, r3
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	3301      	adds	r3, #1
 800acec:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800acf4:	d80c      	bhi.n	800ad10 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800acf6:	69bb      	ldr	r3, [r7, #24]
 800acf8:	015a      	lsls	r2, r3, #5
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	4413      	add	r3, r2
 800acfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad0c:	d0ec      	beq.n	800ace8 <USB_StopHost+0xc8>
 800ad0e:	e000      	b.n	800ad12 <USB_StopHost+0xf2>
        break;
 800ad10:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800ad12:	69bb      	ldr	r3, [r7, #24]
 800ad14:	3301      	adds	r3, #1
 800ad16:	61bb      	str	r3, [r7, #24]
 800ad18:	69bb      	ldr	r3, [r7, #24]
 800ad1a:	2b0f      	cmp	r3, #15
 800ad1c:	d9c7      	bls.n	800acae <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad24:	461a      	mov	r2, r3
 800ad26:	f04f 33ff 	mov.w	r3, #4294967295
 800ad2a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f04f 32ff 	mov.w	r2, #4294967295
 800ad32:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f7ff f880 	bl	8009e3a <USB_EnableGlobalInt>

  return ret;
 800ad3a:	7ffb      	ldrb	r3, [r7, #31]
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3720      	adds	r7, #32
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800ad44:	b590      	push	{r4, r7, lr}
 800ad46:	b089      	sub	sp, #36	; 0x24
 800ad48:	af04      	add	r7, sp, #16
 800ad4a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	2202      	movs	r2, #2
 800ad50:	2102      	movs	r1, #2
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f000 fcb8 	bl	800b6c8 <USBH_FindInterface>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800ad5c:	7bfb      	ldrb	r3, [r7, #15]
 800ad5e:	2bff      	cmp	r3, #255	; 0xff
 800ad60:	d002      	beq.n	800ad68 <USBH_CDC_InterfaceInit+0x24>
 800ad62:	7bfb      	ldrb	r3, [r7, #15]
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	d901      	bls.n	800ad6c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800ad68:	2302      	movs	r3, #2
 800ad6a:	e13d      	b.n	800afe8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800ad6c:	7bfb      	ldrb	r3, [r7, #15]
 800ad6e:	4619      	mov	r1, r3
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f000 fc8d 	bl	800b690 <USBH_SelectInterface>
 800ad76:	4603      	mov	r3, r0
 800ad78:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800ad7a:	7bbb      	ldrb	r3, [r7, #14]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d001      	beq.n	800ad84 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800ad80:	2302      	movs	r3, #2
 800ad82:	e131      	b.n	800afe8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800ad8a:	2050      	movs	r0, #80	; 0x50
 800ad8c:	f006 f834 	bl	8010df8 <malloc>
 800ad90:	4603      	mov	r3, r0
 800ad92:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad9a:	69db      	ldr	r3, [r3, #28]
 800ad9c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d101      	bne.n	800ada8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800ada4:	2302      	movs	r3, #2
 800ada6:	e11f      	b.n	800afe8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800ada8:	2250      	movs	r2, #80	; 0x50
 800adaa:	2100      	movs	r1, #0
 800adac:	68b8      	ldr	r0, [r7, #8]
 800adae:	f006 f841 	bl	8010e34 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800adb2:	7bfb      	ldrb	r3, [r7, #15]
 800adb4:	687a      	ldr	r2, [r7, #4]
 800adb6:	211a      	movs	r1, #26
 800adb8:	fb01 f303 	mul.w	r3, r1, r3
 800adbc:	4413      	add	r3, r2
 800adbe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800adc2:	781b      	ldrb	r3, [r3, #0]
 800adc4:	b25b      	sxtb	r3, r3
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	da15      	bge.n	800adf6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800adca:	7bfb      	ldrb	r3, [r7, #15]
 800adcc:	687a      	ldr	r2, [r7, #4]
 800adce:	211a      	movs	r1, #26
 800add0:	fb01 f303 	mul.w	r3, r1, r3
 800add4:	4413      	add	r3, r2
 800add6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800adda:	781a      	ldrb	r2, [r3, #0]
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ade0:	7bfb      	ldrb	r3, [r7, #15]
 800ade2:	687a      	ldr	r2, [r7, #4]
 800ade4:	211a      	movs	r1, #26
 800ade6:	fb01 f303 	mul.w	r3, r1, r3
 800adea:	4413      	add	r3, r2
 800adec:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800adf0:	881a      	ldrh	r2, [r3, #0]
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	785b      	ldrb	r3, [r3, #1]
 800adfa:	4619      	mov	r1, r3
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f002 f988 	bl	800d112 <USBH_AllocPipe>
 800ae02:	4603      	mov	r3, r0
 800ae04:	461a      	mov	r2, r3
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	7819      	ldrb	r1, [r3, #0]
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	7858      	ldrb	r0, [r3, #1]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ae1e:	68ba      	ldr	r2, [r7, #8]
 800ae20:	8952      	ldrh	r2, [r2, #10]
 800ae22:	9202      	str	r2, [sp, #8]
 800ae24:	2203      	movs	r2, #3
 800ae26:	9201      	str	r2, [sp, #4]
 800ae28:	9300      	str	r3, [sp, #0]
 800ae2a:	4623      	mov	r3, r4
 800ae2c:	4602      	mov	r2, r0
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f002 f940 	bl	800d0b4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	4619      	mov	r1, r3
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f005 ff2d 	bl	8010c9c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800ae42:	2300      	movs	r3, #0
 800ae44:	2200      	movs	r2, #0
 800ae46:	210a      	movs	r1, #10
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f000 fc3d 	bl	800b6c8 <USBH_FindInterface>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800ae52:	7bfb      	ldrb	r3, [r7, #15]
 800ae54:	2bff      	cmp	r3, #255	; 0xff
 800ae56:	d002      	beq.n	800ae5e <USBH_CDC_InterfaceInit+0x11a>
 800ae58:	7bfb      	ldrb	r3, [r7, #15]
 800ae5a:	2b01      	cmp	r3, #1
 800ae5c:	d901      	bls.n	800ae62 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800ae5e:	2302      	movs	r3, #2
 800ae60:	e0c2      	b.n	800afe8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800ae62:	7bfb      	ldrb	r3, [r7, #15]
 800ae64:	687a      	ldr	r2, [r7, #4]
 800ae66:	211a      	movs	r1, #26
 800ae68:	fb01 f303 	mul.w	r3, r1, r3
 800ae6c:	4413      	add	r3, r2
 800ae6e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ae72:	781b      	ldrb	r3, [r3, #0]
 800ae74:	b25b      	sxtb	r3, r3
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	da16      	bge.n	800aea8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ae7a:	7bfb      	ldrb	r3, [r7, #15]
 800ae7c:	687a      	ldr	r2, [r7, #4]
 800ae7e:	211a      	movs	r1, #26
 800ae80:	fb01 f303 	mul.w	r3, r1, r3
 800ae84:	4413      	add	r3, r2
 800ae86:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ae8a:	781a      	ldrb	r2, [r3, #0]
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ae90:	7bfb      	ldrb	r3, [r7, #15]
 800ae92:	687a      	ldr	r2, [r7, #4]
 800ae94:	211a      	movs	r1, #26
 800ae96:	fb01 f303 	mul.w	r3, r1, r3
 800ae9a:	4413      	add	r3, r2
 800ae9c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800aea0:	881a      	ldrh	r2, [r3, #0]
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	835a      	strh	r2, [r3, #26]
 800aea6:	e015      	b.n	800aed4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800aea8:	7bfb      	ldrb	r3, [r7, #15]
 800aeaa:	687a      	ldr	r2, [r7, #4]
 800aeac:	211a      	movs	r1, #26
 800aeae:	fb01 f303 	mul.w	r3, r1, r3
 800aeb2:	4413      	add	r3, r2
 800aeb4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800aeb8:	781a      	ldrb	r2, [r3, #0]
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800aebe:	7bfb      	ldrb	r3, [r7, #15]
 800aec0:	687a      	ldr	r2, [r7, #4]
 800aec2:	211a      	movs	r1, #26
 800aec4:	fb01 f303 	mul.w	r3, r1, r3
 800aec8:	4413      	add	r3, r2
 800aeca:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800aece:	881a      	ldrh	r2, [r3, #0]
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800aed4:	7bfb      	ldrb	r3, [r7, #15]
 800aed6:	687a      	ldr	r2, [r7, #4]
 800aed8:	211a      	movs	r1, #26
 800aeda:	fb01 f303 	mul.w	r3, r1, r3
 800aede:	4413      	add	r3, r2
 800aee0:	f203 3356 	addw	r3, r3, #854	; 0x356
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	b25b      	sxtb	r3, r3
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	da16      	bge.n	800af1a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800aeec:	7bfb      	ldrb	r3, [r7, #15]
 800aeee:	687a      	ldr	r2, [r7, #4]
 800aef0:	211a      	movs	r1, #26
 800aef2:	fb01 f303 	mul.w	r3, r1, r3
 800aef6:	4413      	add	r3, r2
 800aef8:	f203 3356 	addw	r3, r3, #854	; 0x356
 800aefc:	781a      	ldrb	r2, [r3, #0]
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800af02:	7bfb      	ldrb	r3, [r7, #15]
 800af04:	687a      	ldr	r2, [r7, #4]
 800af06:	211a      	movs	r1, #26
 800af08:	fb01 f303 	mul.w	r3, r1, r3
 800af0c:	4413      	add	r3, r2
 800af0e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800af12:	881a      	ldrh	r2, [r3, #0]
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	835a      	strh	r2, [r3, #26]
 800af18:	e015      	b.n	800af46 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800af1a:	7bfb      	ldrb	r3, [r7, #15]
 800af1c:	687a      	ldr	r2, [r7, #4]
 800af1e:	211a      	movs	r1, #26
 800af20:	fb01 f303 	mul.w	r3, r1, r3
 800af24:	4413      	add	r3, r2
 800af26:	f203 3356 	addw	r3, r3, #854	; 0x356
 800af2a:	781a      	ldrb	r2, [r3, #0]
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800af30:	7bfb      	ldrb	r3, [r7, #15]
 800af32:	687a      	ldr	r2, [r7, #4]
 800af34:	211a      	movs	r1, #26
 800af36:	fb01 f303 	mul.w	r3, r1, r3
 800af3a:	4413      	add	r3, r2
 800af3c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800af40:	881a      	ldrh	r2, [r3, #0]
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	7b9b      	ldrb	r3, [r3, #14]
 800af4a:	4619      	mov	r1, r3
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f002 f8e0 	bl	800d112 <USBH_AllocPipe>
 800af52:	4603      	mov	r3, r0
 800af54:	461a      	mov	r2, r3
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	7bdb      	ldrb	r3, [r3, #15]
 800af5e:	4619      	mov	r1, r3
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f002 f8d6 	bl	800d112 <USBH_AllocPipe>
 800af66:	4603      	mov	r3, r0
 800af68:	461a      	mov	r2, r3
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	7b59      	ldrb	r1, [r3, #13]
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	7b98      	ldrb	r0, [r3, #14]
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800af82:	68ba      	ldr	r2, [r7, #8]
 800af84:	8b12      	ldrh	r2, [r2, #24]
 800af86:	9202      	str	r2, [sp, #8]
 800af88:	2202      	movs	r2, #2
 800af8a:	9201      	str	r2, [sp, #4]
 800af8c:	9300      	str	r3, [sp, #0]
 800af8e:	4623      	mov	r3, r4
 800af90:	4602      	mov	r2, r0
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f002 f88e 	bl	800d0b4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	7b19      	ldrb	r1, [r3, #12]
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	7bd8      	ldrb	r0, [r3, #15]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800afac:	68ba      	ldr	r2, [r7, #8]
 800afae:	8b52      	ldrh	r2, [r2, #26]
 800afb0:	9202      	str	r2, [sp, #8]
 800afb2:	2202      	movs	r2, #2
 800afb4:	9201      	str	r2, [sp, #4]
 800afb6:	9300      	str	r3, [sp, #0]
 800afb8:	4623      	mov	r3, r4
 800afba:	4602      	mov	r2, r0
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f002 f879 	bl	800d0b4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	2200      	movs	r2, #0
 800afc6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	7b5b      	ldrb	r3, [r3, #13]
 800afce:	2200      	movs	r2, #0
 800afd0:	4619      	mov	r1, r3
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f005 fe62 	bl	8010c9c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	7b1b      	ldrb	r3, [r3, #12]
 800afdc:	2200      	movs	r2, #0
 800afde:	4619      	mov	r1, r3
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f005 fe5b 	bl	8010c9c <USBH_LL_SetToggle>

  return USBH_OK;
 800afe6:	2300      	movs	r3, #0
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3714      	adds	r7, #20
 800afec:	46bd      	mov	sp, r7
 800afee:	bd90      	pop	{r4, r7, pc}

0800aff0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800affe:	69db      	ldr	r3, [r3, #28]
 800b000:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	781b      	ldrb	r3, [r3, #0]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d00e      	beq.n	800b028 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	781b      	ldrb	r3, [r3, #0]
 800b00e:	4619      	mov	r1, r3
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f002 f86e 	bl	800d0f2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	781b      	ldrb	r3, [r3, #0]
 800b01a:	4619      	mov	r1, r3
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f002 f899 	bl	800d154 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	2200      	movs	r2, #0
 800b026:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	7b1b      	ldrb	r3, [r3, #12]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d00e      	beq.n	800b04e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	7b1b      	ldrb	r3, [r3, #12]
 800b034:	4619      	mov	r1, r3
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f002 f85b 	bl	800d0f2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	7b1b      	ldrb	r3, [r3, #12]
 800b040:	4619      	mov	r1, r3
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f002 f886 	bl	800d154 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	2200      	movs	r2, #0
 800b04c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	7b5b      	ldrb	r3, [r3, #13]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d00e      	beq.n	800b074 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	7b5b      	ldrb	r3, [r3, #13]
 800b05a:	4619      	mov	r1, r3
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f002 f848 	bl	800d0f2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	7b5b      	ldrb	r3, [r3, #13]
 800b066:	4619      	mov	r1, r3
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f002 f873 	bl	800d154 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	2200      	movs	r2, #0
 800b072:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b07a:	69db      	ldr	r3, [r3, #28]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d00b      	beq.n	800b098 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b086:	69db      	ldr	r3, [r3, #28]
 800b088:	4618      	mov	r0, r3
 800b08a:	f005 febd 	bl	8010e08 <free>
    phost->pActiveClass->pData = 0U;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b094:	2200      	movs	r2, #0
 800b096:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b098:	2300      	movs	r3, #0
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3710      	adds	r7, #16
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}

0800b0a2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b0a2:	b580      	push	{r7, lr}
 800b0a4:	b084      	sub	sp, #16
 800b0a6:	af00      	add	r7, sp, #0
 800b0a8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b0b0:	69db      	ldr	r3, [r3, #28]
 800b0b2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	3340      	adds	r3, #64	; 0x40
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f000 f8b1 	bl	800b222 <GetLineCoding>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800b0c4:	7afb      	ldrb	r3, [r7, #11]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d105      	bne.n	800b0d6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b0d0:	2102      	movs	r1, #2
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800b0d6:	7afb      	ldrb	r3, [r7, #11]
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3710      	adds	r7, #16
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b084      	sub	sp, #16
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b0f6:	69db      	ldr	r3, [r3, #28]
 800b0f8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800b100:	2b04      	cmp	r3, #4
 800b102:	d877      	bhi.n	800b1f4 <USBH_CDC_Process+0x114>
 800b104:	a201      	add	r2, pc, #4	; (adr r2, 800b10c <USBH_CDC_Process+0x2c>)
 800b106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b10a:	bf00      	nop
 800b10c:	0800b121 	.word	0x0800b121
 800b110:	0800b127 	.word	0x0800b127
 800b114:	0800b157 	.word	0x0800b157
 800b118:	0800b1cb 	.word	0x0800b1cb
 800b11c:	0800b1d9 	.word	0x0800b1d9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800b120:	2300      	movs	r3, #0
 800b122:	73fb      	strb	r3, [r7, #15]
      break;
 800b124:	e06d      	b.n	800b202 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b12a:	4619      	mov	r1, r3
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f000 f897 	bl	800b260 <SetLineCoding>
 800b132:	4603      	mov	r3, r0
 800b134:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b136:	7bbb      	ldrb	r3, [r7, #14]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d104      	bne.n	800b146 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	2202      	movs	r2, #2
 800b140:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b144:	e058      	b.n	800b1f8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800b146:	7bbb      	ldrb	r3, [r7, #14]
 800b148:	2b01      	cmp	r3, #1
 800b14a:	d055      	beq.n	800b1f8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	2204      	movs	r2, #4
 800b150:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b154:	e050      	b.n	800b1f8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	3340      	adds	r3, #64	; 0x40
 800b15a:	4619      	mov	r1, r3
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f000 f860 	bl	800b222 <GetLineCoding>
 800b162:	4603      	mov	r3, r0
 800b164:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b166:	7bbb      	ldrb	r3, [r7, #14]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d126      	bne.n	800b1ba <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	2200      	movs	r2, #0
 800b170:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b17e:	791b      	ldrb	r3, [r3, #4]
 800b180:	429a      	cmp	r2, r3
 800b182:	d13b      	bne.n	800b1fc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b18e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800b190:	429a      	cmp	r2, r3
 800b192:	d133      	bne.n	800b1fc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b19e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d12b      	bne.n	800b1fc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1ac:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d124      	bne.n	800b1fc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f000 f982 	bl	800b4bc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800b1b8:	e020      	b.n	800b1fc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800b1ba:	7bbb      	ldrb	r3, [r7, #14]
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	d01d      	beq.n	800b1fc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	2204      	movs	r2, #4
 800b1c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800b1c8:	e018      	b.n	800b1fc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f000 f867 	bl	800b29e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f000 f8f6 	bl	800b3c2 <CDC_ProcessReception>
      break;
 800b1d6:	e014      	b.n	800b202 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800b1d8:	2100      	movs	r1, #0
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f001 f95b 	bl	800c496 <USBH_ClrFeature>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800b1e4:	7bbb      	ldrb	r3, [r7, #14]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d10a      	bne.n	800b200 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800b1f2:	e005      	b.n	800b200 <USBH_CDC_Process+0x120>

    default:
      break;
 800b1f4:	bf00      	nop
 800b1f6:	e004      	b.n	800b202 <USBH_CDC_Process+0x122>
      break;
 800b1f8:	bf00      	nop
 800b1fa:	e002      	b.n	800b202 <USBH_CDC_Process+0x122>
      break;
 800b1fc:	bf00      	nop
 800b1fe:	e000      	b.n	800b202 <USBH_CDC_Process+0x122>
      break;
 800b200:	bf00      	nop

  }

  return status;
 800b202:	7bfb      	ldrb	r3, [r7, #15]
}
 800b204:	4618      	mov	r0, r3
 800b206:	3710      	adds	r7, #16
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b20c:	b480      	push	{r7}
 800b20e:	b083      	sub	sp, #12
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b214:	2300      	movs	r3, #0
}
 800b216:	4618      	mov	r0, r3
 800b218:	370c      	adds	r7, #12
 800b21a:	46bd      	mov	sp, r7
 800b21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b220:	4770      	bx	lr

0800b222 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800b222:	b580      	push	{r7, lr}
 800b224:	b082      	sub	sp, #8
 800b226:	af00      	add	r7, sp, #0
 800b228:	6078      	str	r0, [r7, #4]
 800b22a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	22a1      	movs	r2, #161	; 0xa1
 800b230:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2221      	movs	r2, #33	; 0x21
 800b236:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2200      	movs	r2, #0
 800b23c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2200      	movs	r2, #0
 800b242:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2207      	movs	r2, #7
 800b248:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	2207      	movs	r2, #7
 800b24e:	4619      	mov	r1, r3
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f001 fbed 	bl	800ca30 <USBH_CtlReq>
 800b256:	4603      	mov	r3, r0
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3708      	adds	r7, #8
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
 800b268:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2221      	movs	r2, #33	; 0x21
 800b26e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2220      	movs	r2, #32
 800b274:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2200      	movs	r2, #0
 800b27a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2200      	movs	r2, #0
 800b280:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2207      	movs	r2, #7
 800b286:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	2207      	movs	r2, #7
 800b28c:	4619      	mov	r1, r3
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f001 fbce 	bl	800ca30 <USBH_CtlReq>
 800b294:	4603      	mov	r3, r0
}
 800b296:	4618      	mov	r0, r3
 800b298:	3708      	adds	r7, #8
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}

0800b29e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800b29e:	b580      	push	{r7, lr}
 800b2a0:	b086      	sub	sp, #24
 800b2a2:	af02      	add	r7, sp, #8
 800b2a4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b2ac:	69db      	ldr	r3, [r3, #28]
 800b2ae:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	d002      	beq.n	800b2c4 <CDC_ProcessTransmission+0x26>
 800b2be:	2b02      	cmp	r3, #2
 800b2c0:	d023      	beq.n	800b30a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800b2c2:	e07a      	b.n	800b3ba <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c8:	68fa      	ldr	r2, [r7, #12]
 800b2ca:	8b12      	ldrh	r2, [r2, #24]
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	d90b      	bls.n	800b2e8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	69d9      	ldr	r1, [r3, #28]
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	8b1a      	ldrh	r2, [r3, #24]
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	7b5b      	ldrb	r3, [r3, #13]
 800b2dc:	2001      	movs	r0, #1
 800b2de:	9000      	str	r0, [sp, #0]
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f001 fea4 	bl	800d02e <USBH_BulkSendData>
 800b2e6:	e00b      	b.n	800b300 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800b2f0:	b29a      	uxth	r2, r3
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	7b5b      	ldrb	r3, [r3, #13]
 800b2f6:	2001      	movs	r0, #1
 800b2f8:	9000      	str	r0, [sp, #0]
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f001 fe97 	bl	800d02e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	2202      	movs	r2, #2
 800b304:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800b308:	e057      	b.n	800b3ba <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	7b5b      	ldrb	r3, [r3, #13]
 800b30e:	4619      	mov	r1, r3
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f005 fc99 	bl	8010c48 <USBH_LL_GetURBState>
 800b316:	4603      	mov	r3, r0
 800b318:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800b31a:	7afb      	ldrb	r3, [r7, #11]
 800b31c:	2b01      	cmp	r3, #1
 800b31e:	d136      	bne.n	800b38e <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b324:	68fa      	ldr	r2, [r7, #12]
 800b326:	8b12      	ldrh	r2, [r2, #24]
 800b328:	4293      	cmp	r3, r2
 800b32a:	d90e      	bls.n	800b34a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b330:	68fa      	ldr	r2, [r7, #12]
 800b332:	8b12      	ldrh	r2, [r2, #24]
 800b334:	1a9a      	subs	r2, r3, r2
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	69db      	ldr	r3, [r3, #28]
 800b33e:	68fa      	ldr	r2, [r7, #12]
 800b340:	8b12      	ldrh	r2, [r2, #24]
 800b342:	441a      	add	r2, r3
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	61da      	str	r2, [r3, #28]
 800b348:	e002      	b.n	800b350 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	2200      	movs	r2, #0
 800b34e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b354:	2b00      	cmp	r3, #0
 800b356:	d004      	beq.n	800b362 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2201      	movs	r2, #1
 800b35c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800b360:	e006      	b.n	800b370 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	2200      	movs	r2, #0
 800b366:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f000 f892 	bl	800b494 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2204      	movs	r2, #4
 800b374:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b384:	2200      	movs	r2, #0
 800b386:	4619      	mov	r1, r3
 800b388:	f001 ffe0 	bl	800d34c <osMessagePut>
      break;
 800b38c:	e014      	b.n	800b3b8 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800b38e:	7afb      	ldrb	r3, [r7, #11]
 800b390:	2b02      	cmp	r3, #2
 800b392:	d111      	bne.n	800b3b8 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	2201      	movs	r2, #1
 800b398:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2204      	movs	r2, #4
 800b3a0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	f001 ffca 	bl	800d34c <osMessagePut>
      break;
 800b3b8:	bf00      	nop
  }
}
 800b3ba:	bf00      	nop
 800b3bc:	3710      	adds	r7, #16
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}

0800b3c2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800b3c2:	b580      	push	{r7, lr}
 800b3c4:	b086      	sub	sp, #24
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b3d0:	69db      	ldr	r3, [r3, #28]
 800b3d2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800b3de:	2b03      	cmp	r3, #3
 800b3e0:	d002      	beq.n	800b3e8 <CDC_ProcessReception+0x26>
 800b3e2:	2b04      	cmp	r3, #4
 800b3e4:	d00e      	beq.n	800b404 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800b3e6:	e051      	b.n	800b48c <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	6a19      	ldr	r1, [r3, #32]
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	8b5a      	ldrh	r2, [r3, #26]
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	7b1b      	ldrb	r3, [r3, #12]
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f001 fe3f 	bl	800d078 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	2204      	movs	r2, #4
 800b3fe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800b402:	e043      	b.n	800b48c <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	7b1b      	ldrb	r3, [r3, #12]
 800b408:	4619      	mov	r1, r3
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f005 fc1c 	bl	8010c48 <USBH_LL_GetURBState>
 800b410:	4603      	mov	r3, r0
 800b412:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800b414:	7cfb      	ldrb	r3, [r7, #19]
 800b416:	2b01      	cmp	r3, #1
 800b418:	d137      	bne.n	800b48a <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	7b1b      	ldrb	r3, [r3, #12]
 800b41e:	4619      	mov	r1, r3
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f005 fb7f 	bl	8010b24 <USBH_LL_GetLastXferSize>
 800b426:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b42c:	68fa      	ldr	r2, [r7, #12]
 800b42e:	429a      	cmp	r2, r3
 800b430:	d016      	beq.n	800b460 <CDC_ProcessReception+0x9e>
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	8b5b      	ldrh	r3, [r3, #26]
 800b436:	461a      	mov	r2, r3
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d910      	bls.n	800b460 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	1ad2      	subs	r2, r2, r3
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	6a1a      	ldr	r2, [r3, #32]
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	441a      	add	r2, r3
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	2203      	movs	r2, #3
 800b45a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800b45e:	e006      	b.n	800b46e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	2200      	movs	r2, #0
 800b464:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f000 f81d 	bl	800b4a8 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2204      	movs	r2, #4
 800b472:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b482:	2200      	movs	r2, #0
 800b484:	4619      	mov	r1, r3
 800b486:	f001 ff61 	bl	800d34c <osMessagePut>
      break;
 800b48a:	bf00      	nop
  }
}
 800b48c:	bf00      	nop
 800b48e:	3718      	adds	r7, #24
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}

0800b494 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800b494:	b480      	push	{r7}
 800b496:	b083      	sub	sp, #12
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b49c:	bf00      	nop
 800b49e:	370c      	adds	r7, #12
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr

0800b4a8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b083      	sub	sp, #12
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b4b0:	bf00      	nop
 800b4b2:	370c      	adds	r7, #12
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr

0800b4bc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b083      	sub	sp, #12
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800b4c4:	bf00      	nop
 800b4c6:	370c      	adds	r7, #12
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ce:	4770      	bx	lr

0800b4d0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800b4d0:	b5b0      	push	{r4, r5, r7, lr}
 800b4d2:	b090      	sub	sp, #64	; 0x40
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	60f8      	str	r0, [r7, #12]
 800b4d8:	60b9      	str	r1, [r7, #8]
 800b4da:	4613      	mov	r3, r2
 800b4dc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d101      	bne.n	800b4e8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b4e4:	2302      	movs	r3, #2
 800b4e6:	e04d      	b.n	800b584 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	79fa      	ldrb	r2, [r7, #7]
 800b4ec:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800b500:	68f8      	ldr	r0, [r7, #12]
 800b502:	f000 f847 	bl	800b594 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	2200      	movs	r2, #0
 800b50a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	2200      	movs	r2, #0
 800b512:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	2200      	movs	r2, #0
 800b51a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2200      	movs	r2, #0
 800b522:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d003      	beq.n	800b534 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	68ba      	ldr	r2, [r7, #8]
 800b530:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800b534:	4b15      	ldr	r3, [pc, #84]	; (800b58c <USBH_Init+0xbc>)
 800b536:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800b53a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b53c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800b540:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b544:	2100      	movs	r1, #0
 800b546:	4618      	mov	r0, r3
 800b548:	f001 fed7 	bl	800d2fa <osMessageCreate>
 800b54c:	4602      	mov	r2, r0
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800b554:	4b0e      	ldr	r3, [pc, #56]	; (800b590 <USBH_Init+0xc0>)
 800b556:	f107 0414 	add.w	r4, r7, #20
 800b55a:	461d      	mov	r5, r3
 800b55c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b55e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b560:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b564:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800b568:	f107 0314 	add.w	r3, r7, #20
 800b56c:	68f9      	ldr	r1, [r7, #12]
 800b56e:	4618      	mov	r0, r3
 800b570:	f001 fe63 	bl	800d23a <osThreadCreate>
 800b574:	4602      	mov	r2, r0
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800b57c:	68f8      	ldr	r0, [r7, #12]
 800b57e:	f005 fa13 	bl	80109a8 <USBH_LL_Init>

  return USBH_OK;
 800b582:	2300      	movs	r3, #0
}
 800b584:	4618      	mov	r0, r3
 800b586:	3740      	adds	r7, #64	; 0x40
 800b588:	46bd      	mov	sp, r7
 800b58a:	bdb0      	pop	{r4, r5, r7, pc}
 800b58c:	08012318 	.word	0x08012318
 800b590:	08012328 	.word	0x08012328

0800b594 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b594:	b480      	push	{r7}
 800b596:	b085      	sub	sp, #20
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b59c:	2300      	movs	r3, #0
 800b59e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	60fb      	str	r3, [r7, #12]
 800b5a4:	e009      	b.n	800b5ba <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b5a6:	687a      	ldr	r2, [r7, #4]
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	33e0      	adds	r3, #224	; 0xe0
 800b5ac:	009b      	lsls	r3, r3, #2
 800b5ae:	4413      	add	r3, r2
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	3301      	adds	r3, #1
 800b5b8:	60fb      	str	r3, [r7, #12]
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	2b0f      	cmp	r3, #15
 800b5be:	d9f2      	bls.n	800b5a6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	60fb      	str	r3, [r7, #12]
 800b5c4:	e009      	b.n	800b5da <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b5c6:	687a      	ldr	r2, [r7, #4]
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	4413      	add	r3, r2
 800b5cc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	60fb      	str	r3, [r7, #12]
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5e0:	d3f1      	bcc.n	800b5c6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2201      	movs	r2, #1
 800b5f2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2201      	movs	r2, #1
 800b600:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2240      	movs	r2, #64	; 0x40
 800b606:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2200      	movs	r2, #0
 800b60c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2200      	movs	r2, #0
 800b612:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2201      	movs	r2, #1
 800b61a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2200      	movs	r2, #0
 800b622:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2200      	movs	r2, #0
 800b62a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800b62e:	2300      	movs	r3, #0
}
 800b630:	4618      	mov	r0, r3
 800b632:	3714      	adds	r7, #20
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr

0800b63c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b085      	sub	sp, #20
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b646:	2300      	movs	r3, #0
 800b648:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d016      	beq.n	800b67e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b656:	2b00      	cmp	r3, #0
 800b658:	d10e      	bne.n	800b678 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b660:	1c59      	adds	r1, r3, #1
 800b662:	687a      	ldr	r2, [r7, #4]
 800b664:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800b668:	687a      	ldr	r2, [r7, #4]
 800b66a:	33de      	adds	r3, #222	; 0xde
 800b66c:	6839      	ldr	r1, [r7, #0]
 800b66e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b672:	2300      	movs	r3, #0
 800b674:	73fb      	strb	r3, [r7, #15]
 800b676:	e004      	b.n	800b682 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b678:	2302      	movs	r3, #2
 800b67a:	73fb      	strb	r3, [r7, #15]
 800b67c:	e001      	b.n	800b682 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b67e:	2302      	movs	r3, #2
 800b680:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b682:	7bfb      	ldrb	r3, [r7, #15]
}
 800b684:	4618      	mov	r0, r3
 800b686:	3714      	adds	r7, #20
 800b688:	46bd      	mov	sp, r7
 800b68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68e:	4770      	bx	lr

0800b690 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b690:	b480      	push	{r7}
 800b692:	b085      	sub	sp, #20
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
 800b698:	460b      	mov	r3, r1
 800b69a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b69c:	2300      	movs	r3, #0
 800b69e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800b6a6:	78fa      	ldrb	r2, [r7, #3]
 800b6a8:	429a      	cmp	r2, r3
 800b6aa:	d204      	bcs.n	800b6b6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	78fa      	ldrb	r2, [r7, #3]
 800b6b0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800b6b4:	e001      	b.n	800b6ba <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b6b6:	2302      	movs	r3, #2
 800b6b8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b6ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3714      	adds	r7, #20
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr

0800b6c8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b087      	sub	sp, #28
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	4608      	mov	r0, r1
 800b6d2:	4611      	mov	r1, r2
 800b6d4:	461a      	mov	r2, r3
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	70fb      	strb	r3, [r7, #3]
 800b6da:	460b      	mov	r3, r1
 800b6dc:	70bb      	strb	r3, [r7, #2]
 800b6de:	4613      	mov	r3, r2
 800b6e0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b6f0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b6f2:	e025      	b.n	800b740 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b6f4:	7dfb      	ldrb	r3, [r7, #23]
 800b6f6:	221a      	movs	r2, #26
 800b6f8:	fb02 f303 	mul.w	r3, r2, r3
 800b6fc:	3308      	adds	r3, #8
 800b6fe:	68fa      	ldr	r2, [r7, #12]
 800b700:	4413      	add	r3, r2
 800b702:	3302      	adds	r3, #2
 800b704:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	795b      	ldrb	r3, [r3, #5]
 800b70a:	78fa      	ldrb	r2, [r7, #3]
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d002      	beq.n	800b716 <USBH_FindInterface+0x4e>
 800b710:	78fb      	ldrb	r3, [r7, #3]
 800b712:	2bff      	cmp	r3, #255	; 0xff
 800b714:	d111      	bne.n	800b73a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b71a:	78ba      	ldrb	r2, [r7, #2]
 800b71c:	429a      	cmp	r2, r3
 800b71e:	d002      	beq.n	800b726 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b720:	78bb      	ldrb	r3, [r7, #2]
 800b722:	2bff      	cmp	r3, #255	; 0xff
 800b724:	d109      	bne.n	800b73a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b72a:	787a      	ldrb	r2, [r7, #1]
 800b72c:	429a      	cmp	r2, r3
 800b72e:	d002      	beq.n	800b736 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b730:	787b      	ldrb	r3, [r7, #1]
 800b732:	2bff      	cmp	r3, #255	; 0xff
 800b734:	d101      	bne.n	800b73a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b736:	7dfb      	ldrb	r3, [r7, #23]
 800b738:	e006      	b.n	800b748 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b73a:	7dfb      	ldrb	r3, [r7, #23]
 800b73c:	3301      	adds	r3, #1
 800b73e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b740:	7dfb      	ldrb	r3, [r7, #23]
 800b742:	2b01      	cmp	r3, #1
 800b744:	d9d6      	bls.n	800b6f4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b746:	23ff      	movs	r3, #255	; 0xff
}
 800b748:	4618      	mov	r0, r3
 800b74a:	371c      	adds	r7, #28
 800b74c:	46bd      	mov	sp, r7
 800b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b752:	4770      	bx	lr

0800b754 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b082      	sub	sp, #8
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f005 f969 	bl	8010a34 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800b762:	2101      	movs	r1, #1
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f005 fa82 	bl	8010c6e <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b76a:	2300      	movs	r3, #0
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3708      	adds	r7, #8
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}

0800b774 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b088      	sub	sp, #32
 800b778:	af04      	add	r7, sp, #16
 800b77a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b77c:	2302      	movs	r3, #2
 800b77e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b780:	2300      	movs	r3, #0
 800b782:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b78a:	b2db      	uxtb	r3, r3
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	d102      	bne.n	800b796 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2203      	movs	r2, #3
 800b794:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	781b      	ldrb	r3, [r3, #0]
 800b79a:	b2db      	uxtb	r3, r3
 800b79c:	2b0b      	cmp	r3, #11
 800b79e:	f200 8247 	bhi.w	800bc30 <USBH_Process+0x4bc>
 800b7a2:	a201      	add	r2, pc, #4	; (adr r2, 800b7a8 <USBH_Process+0x34>)
 800b7a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7a8:	0800b7d9 	.word	0x0800b7d9
 800b7ac:	0800b827 	.word	0x0800b827
 800b7b0:	0800b8ab 	.word	0x0800b8ab
 800b7b4:	0800bbaf 	.word	0x0800bbaf
 800b7b8:	0800bc31 	.word	0x0800bc31
 800b7bc:	0800b96b 	.word	0x0800b96b
 800b7c0:	0800bb39 	.word	0x0800bb39
 800b7c4:	0800b9bd 	.word	0x0800b9bd
 800b7c8:	0800b9f9 	.word	0x0800b9f9
 800b7cc:	0800ba33 	.word	0x0800ba33
 800b7d0:	0800ba91 	.word	0x0800ba91
 800b7d4:	0800bb97 	.word	0x0800bb97
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b7de:	b2db      	uxtb	r3, r3
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	f000 8227 	beq.w	800bc34 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b7ec:	20c8      	movs	r0, #200	; 0xc8
 800b7ee:	f005 fa85 	bl	8010cfc <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800b7f2:	6878      	ldr	r0, [r7, #4]
 800b7f4:	f005 f97b 	bl	8010aee <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2200      	movs	r2, #0
 800b804:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2201      	movs	r2, #1
 800b80c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b81c:	2200      	movs	r2, #0
 800b81e:	4619      	mov	r1, r3
 800b820:	f001 fd94 	bl	800d34c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b824:	e206      	b.n	800bc34 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d107      	bne.n	800b840 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2200      	movs	r2, #0
 800b834:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2202      	movs	r2, #2
 800b83c:	701a      	strb	r2, [r3, #0]
 800b83e:	e025      	b.n	800b88c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b846:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b84a:	d914      	bls.n	800b876 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b852:	3301      	adds	r3, #1
 800b854:	b2da      	uxtb	r2, r3
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b862:	2b03      	cmp	r3, #3
 800b864:	d903      	bls.n	800b86e <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	220d      	movs	r2, #13
 800b86a:	701a      	strb	r2, [r3, #0]
 800b86c:	e00e      	b.n	800b88c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2200      	movs	r2, #0
 800b872:	701a      	strb	r2, [r3, #0]
 800b874:	e00a      	b.n	800b88c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b87c:	f103 020a 	add.w	r2, r3, #10
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800b886:	200a      	movs	r0, #10
 800b888:	f005 fa38 	bl	8010cfc <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2201      	movs	r2, #1
 800b890:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	4619      	mov	r1, r3
 800b8a4:	f001 fd52 	bl	800d34c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b8a8:	e1cb      	b.n	800bc42 <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d005      	beq.n	800b8c0 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b8ba:	2104      	movs	r1, #4
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b8c0:	2064      	movs	r0, #100	; 0x64
 800b8c2:	f005 fa1b 	bl	8010cfc <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f005 f8ea 	bl	8010aa0 <USBH_LL_GetSpeed>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	461a      	mov	r2, r3
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2205      	movs	r2, #5
 800b8da:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b8dc:	2100      	movs	r1, #0
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f001 fc17 	bl	800d112 <USBH_AllocPipe>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	461a      	mov	r2, r3
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b8ec:	2180      	movs	r1, #128	; 0x80
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f001 fc0f 	bl	800d112 <USBH_AllocPipe>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	7919      	ldrb	r1, [r3, #4]
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b90c:	687a      	ldr	r2, [r7, #4]
 800b90e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b910:	b292      	uxth	r2, r2
 800b912:	9202      	str	r2, [sp, #8]
 800b914:	2200      	movs	r2, #0
 800b916:	9201      	str	r2, [sp, #4]
 800b918:	9300      	str	r3, [sp, #0]
 800b91a:	4603      	mov	r3, r0
 800b91c:	2280      	movs	r2, #128	; 0x80
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f001 fbc8 	bl	800d0b4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	7959      	ldrb	r1, [r3, #5]
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b934:	687a      	ldr	r2, [r7, #4]
 800b936:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b938:	b292      	uxth	r2, r2
 800b93a:	9202      	str	r2, [sp, #8]
 800b93c:	2200      	movs	r2, #0
 800b93e:	9201      	str	r2, [sp, #4]
 800b940:	9300      	str	r3, [sp, #0]
 800b942:	4603      	mov	r3, r0
 800b944:	2200      	movs	r2, #0
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f001 fbb4 	bl	800d0b4 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2201      	movs	r2, #1
 800b950:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b960:	2200      	movs	r2, #0
 800b962:	4619      	mov	r1, r3
 800b964:	f001 fcf2 	bl	800d34c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b968:	e16b      	b.n	800bc42 <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f000 f96e 	bl	800bc4c <USBH_HandleEnum>
 800b970:	4603      	mov	r3, r0
 800b972:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b974:	7bbb      	ldrb	r3, [r7, #14]
 800b976:	b2db      	uxtb	r3, r3
 800b978:	2b00      	cmp	r3, #0
 800b97a:	f040 815d 	bne.w	800bc38 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2200      	movs	r2, #0
 800b982:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800b98c:	2b01      	cmp	r3, #1
 800b98e:	d103      	bne.n	800b998 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2208      	movs	r2, #8
 800b994:	701a      	strb	r2, [r3, #0]
 800b996:	e002      	b.n	800b99e <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2207      	movs	r2, #7
 800b99c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2205      	movs	r2, #5
 800b9a2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	4619      	mov	r1, r3
 800b9b6:	f001 fcc9 	bl	800d34c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b9ba:	e13d      	b.n	800bc38 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	f000 813a 	beq.w	800bc3c <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b9ce:	2101      	movs	r1, #1
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2208      	movs	r2, #8
 800b9d8:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2205      	movs	r2, #5
 800b9de:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	f001 fcab 	bl	800d34c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800b9f6:	e121      	b.n	800bc3c <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800b9fe:	b29b      	uxth	r3, r3
 800ba00:	4619      	mov	r1, r3
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 fd00 	bl	800c408 <USBH_SetCfg>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d102      	bne.n	800ba14 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2209      	movs	r2, #9
 800ba12:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2201      	movs	r2, #1
 800ba18:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ba28:	2200      	movs	r2, #0
 800ba2a:	4619      	mov	r1, r3
 800ba2c:	f001 fc8e 	bl	800d34c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ba30:	e107      	b.n	800bc42 <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800ba38:	f003 0320 	and.w	r3, r3, #32
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d015      	beq.n	800ba6c <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800ba40:	2101      	movs	r1, #1
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 fd03 	bl	800c44e <USBH_SetFeature>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800ba4c:	7bbb      	ldrb	r3, [r7, #14]
 800ba4e:	b2db      	uxtb	r3, r3
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d103      	bne.n	800ba5c <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	220a      	movs	r2, #10
 800ba58:	701a      	strb	r2, [r3, #0]
 800ba5a:	e00a      	b.n	800ba72 <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800ba5c:	7bbb      	ldrb	r3, [r7, #14]
 800ba5e:	b2db      	uxtb	r3, r3
 800ba60:	2b03      	cmp	r3, #3
 800ba62:	d106      	bne.n	800ba72 <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	220a      	movs	r2, #10
 800ba68:	701a      	strb	r2, [r3, #0]
 800ba6a:	e002      	b.n	800ba72 <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	220a      	movs	r2, #10
 800ba70:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2201      	movs	r2, #1
 800ba76:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ba86:	2200      	movs	r2, #0
 800ba88:	4619      	mov	r1, r3
 800ba8a:	f001 fc5f 	bl	800d34c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ba8e:	e0d8      	b.n	800bc42 <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d03f      	beq.n	800bb1a <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800baa2:	2300      	movs	r3, #0
 800baa4:	73fb      	strb	r3, [r7, #15]
 800baa6:	e016      	b.n	800bad6 <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800baa8:	7bfa      	ldrb	r2, [r7, #15]
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	32de      	adds	r2, #222	; 0xde
 800baae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bab2:	791a      	ldrb	r2, [r3, #4]
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800baba:	429a      	cmp	r2, r3
 800babc:	d108      	bne.n	800bad0 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 800babe:	7bfa      	ldrb	r2, [r7, #15]
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	32de      	adds	r2, #222	; 0xde
 800bac4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800bace:	e005      	b.n	800badc <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800bad0:	7bfb      	ldrb	r3, [r7, #15]
 800bad2:	3301      	adds	r3, #1
 800bad4:	73fb      	strb	r3, [r7, #15]
 800bad6:	7bfb      	ldrb	r3, [r7, #15]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d0e5      	beq.n	800baa8 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d016      	beq.n	800bb14 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800baec:	689b      	ldr	r3, [r3, #8]
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	4798      	blx	r3
 800baf2:	4603      	mov	r3, r0
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d109      	bne.n	800bb0c <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2206      	movs	r2, #6
 800bafc:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bb04:	2103      	movs	r1, #3
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	4798      	blx	r3
 800bb0a:	e006      	b.n	800bb1a <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	220d      	movs	r2, #13
 800bb10:	701a      	strb	r2, [r3, #0]
 800bb12:	e002      	b.n	800bb1a <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	220d      	movs	r2, #13
 800bb18:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2205      	movs	r2, #5
 800bb1e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bb2e:	2200      	movs	r2, #0
 800bb30:	4619      	mov	r1, r3
 800bb32:	f001 fc0b 	bl	800d34c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bb36:	e084      	b.n	800bc42 <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d017      	beq.n	800bb72 <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb48:	691b      	ldr	r3, [r3, #16]
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	4798      	blx	r3
 800bb4e:	4603      	mov	r3, r0
 800bb50:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800bb52:	7bbb      	ldrb	r3, [r7, #14]
 800bb54:	b2db      	uxtb	r3, r3
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d103      	bne.n	800bb62 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	220b      	movs	r2, #11
 800bb5e:	701a      	strb	r2, [r3, #0]
 800bb60:	e00a      	b.n	800bb78 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 800bb62:	7bbb      	ldrb	r3, [r7, #14]
 800bb64:	b2db      	uxtb	r3, r3
 800bb66:	2b02      	cmp	r3, #2
 800bb68:	d106      	bne.n	800bb78 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	220d      	movs	r2, #13
 800bb6e:	701a      	strb	r2, [r3, #0]
 800bb70:	e002      	b.n	800bb78 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	220d      	movs	r2, #13
 800bb76:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2205      	movs	r2, #5
 800bb7c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	4619      	mov	r1, r3
 800bb90:	f001 fbdc 	bl	800d34c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bb94:	e055      	b.n	800bc42 <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d04f      	beq.n	800bc40 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bba6:	695b      	ldr	r3, [r3, #20]
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	4798      	blx	r3
      }
      break;
 800bbac:	e048      	b.n	800bc40 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f7ff fcec 	bl	800b594 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d009      	beq.n	800bbda <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bbcc:	68db      	ldr	r3, [r3, #12]
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d005      	beq.n	800bbf0 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bbea:	2105      	movs	r1, #5
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800bbf6:	b2db      	uxtb	r3, r3
 800bbf8:	2b01      	cmp	r3, #1
 800bbfa:	d107      	bne.n	800bc0c <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f7ff fda5 	bl	800b754 <USBH_Start>
 800bc0a:	e002      	b.n	800bc12 <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f004 ff11 	bl	8010a34 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2201      	movs	r2, #1
 800bc16:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bc26:	2200      	movs	r2, #0
 800bc28:	4619      	mov	r1, r3
 800bc2a:	f001 fb8f 	bl	800d34c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bc2e:	e008      	b.n	800bc42 <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 800bc30:	bf00      	nop
 800bc32:	e006      	b.n	800bc42 <USBH_Process+0x4ce>
      break;
 800bc34:	bf00      	nop
 800bc36:	e004      	b.n	800bc42 <USBH_Process+0x4ce>
      break;
 800bc38:	bf00      	nop
 800bc3a:	e002      	b.n	800bc42 <USBH_Process+0x4ce>
    break;
 800bc3c:	bf00      	nop
 800bc3e:	e000      	b.n	800bc42 <USBH_Process+0x4ce>
      break;
 800bc40:	bf00      	nop
  }
  return USBH_OK;
 800bc42:	2300      	movs	r3, #0
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	3710      	adds	r7, #16
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}

0800bc4c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b088      	sub	sp, #32
 800bc50:	af04      	add	r7, sp, #16
 800bc52:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800bc54:	2301      	movs	r3, #1
 800bc56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800bc58:	2301      	movs	r3, #1
 800bc5a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	785b      	ldrb	r3, [r3, #1]
 800bc60:	2b07      	cmp	r3, #7
 800bc62:	f200 8208 	bhi.w	800c076 <USBH_HandleEnum+0x42a>
 800bc66:	a201      	add	r2, pc, #4	; (adr r2, 800bc6c <USBH_HandleEnum+0x20>)
 800bc68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc6c:	0800bc8d 	.word	0x0800bc8d
 800bc70:	0800bd4b 	.word	0x0800bd4b
 800bc74:	0800bdb5 	.word	0x0800bdb5
 800bc78:	0800be43 	.word	0x0800be43
 800bc7c:	0800bead 	.word	0x0800bead
 800bc80:	0800bf1d 	.word	0x0800bf1d
 800bc84:	0800bfb9 	.word	0x0800bfb9
 800bc88:	0800c037 	.word	0x0800c037
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800bc8c:	2108      	movs	r1, #8
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f000 faea 	bl	800c268 <USBH_Get_DevDesc>
 800bc94:	4603      	mov	r3, r0
 800bc96:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bc98:	7bbb      	ldrb	r3, [r7, #14]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d130      	bne.n	800bd00 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2201      	movs	r2, #1
 800bcac:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	7919      	ldrb	r1, [r3, #4]
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bcbe:	687a      	ldr	r2, [r7, #4]
 800bcc0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800bcc2:	b292      	uxth	r2, r2
 800bcc4:	9202      	str	r2, [sp, #8]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	9201      	str	r2, [sp, #4]
 800bcca:	9300      	str	r3, [sp, #0]
 800bccc:	4603      	mov	r3, r0
 800bcce:	2280      	movs	r2, #128	; 0x80
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f001 f9ef 	bl	800d0b4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	7959      	ldrb	r1, [r3, #5]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bcea:	b292      	uxth	r2, r2
 800bcec:	9202      	str	r2, [sp, #8]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	9201      	str	r2, [sp, #4]
 800bcf2:	9300      	str	r3, [sp, #0]
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f001 f9db 	bl	800d0b4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800bcfe:	e1bc      	b.n	800c07a <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bd00:	7bbb      	ldrb	r3, [r7, #14]
 800bd02:	2b03      	cmp	r3, #3
 800bd04:	f040 81b9 	bne.w	800c07a <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bd0e:	3301      	adds	r3, #1
 800bd10:	b2da      	uxtb	r2, r3
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bd1e:	2b03      	cmp	r3, #3
 800bd20:	d903      	bls.n	800bd2a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	220d      	movs	r2, #13
 800bd26:	701a      	strb	r2, [r3, #0]
      break;
 800bd28:	e1a7      	b.n	800c07a <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	795b      	ldrb	r3, [r3, #5]
 800bd2e:	4619      	mov	r1, r3
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f001 fa0f 	bl	800d154 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	791b      	ldrb	r3, [r3, #4]
 800bd3a:	4619      	mov	r1, r3
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f001 fa09 	bl	800d154 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2200      	movs	r2, #0
 800bd46:	701a      	strb	r2, [r3, #0]
      break;
 800bd48:	e197      	b.n	800c07a <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800bd4a:	2112      	movs	r1, #18
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f000 fa8b 	bl	800c268 <USBH_Get_DevDesc>
 800bd52:	4603      	mov	r3, r0
 800bd54:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bd56:	7bbb      	ldrb	r3, [r7, #14]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d103      	bne.n	800bd64 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2202      	movs	r2, #2
 800bd60:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bd62:	e18c      	b.n	800c07e <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bd64:	7bbb      	ldrb	r3, [r7, #14]
 800bd66:	2b03      	cmp	r3, #3
 800bd68:	f040 8189 	bne.w	800c07e <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bd72:	3301      	adds	r3, #1
 800bd74:	b2da      	uxtb	r2, r3
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800bd82:	2b03      	cmp	r3, #3
 800bd84:	d903      	bls.n	800bd8e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	220d      	movs	r2, #13
 800bd8a:	701a      	strb	r2, [r3, #0]
      break;
 800bd8c:	e177      	b.n	800c07e <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	795b      	ldrb	r3, [r3, #5]
 800bd92:	4619      	mov	r1, r3
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f001 f9dd 	bl	800d154 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	791b      	ldrb	r3, [r3, #4]
 800bd9e:	4619      	mov	r1, r3
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f001 f9d7 	bl	800d154 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2200      	movs	r2, #0
 800bdb0:	701a      	strb	r2, [r3, #0]
      break;
 800bdb2:	e164      	b.n	800c07e <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800bdb4:	2101      	movs	r1, #1
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f000 fb02 	bl	800c3c0 <USBH_SetAddress>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bdc0:	7bbb      	ldrb	r3, [r7, #14]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d132      	bne.n	800be2c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800bdc6:	2002      	movs	r0, #2
 800bdc8:	f004 ff98 	bl	8010cfc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2201      	movs	r2, #1
 800bdd0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2203      	movs	r2, #3
 800bdd8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	7919      	ldrb	r1, [r3, #4]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bdea:	687a      	ldr	r2, [r7, #4]
 800bdec:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bdee:	b292      	uxth	r2, r2
 800bdf0:	9202      	str	r2, [sp, #8]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	9201      	str	r2, [sp, #4]
 800bdf6:	9300      	str	r3, [sp, #0]
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	2280      	movs	r2, #128	; 0x80
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f001 f959 	bl	800d0b4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	7959      	ldrb	r1, [r3, #5]
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800be12:	687a      	ldr	r2, [r7, #4]
 800be14:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800be16:	b292      	uxth	r2, r2
 800be18:	9202      	str	r2, [sp, #8]
 800be1a:	2200      	movs	r2, #0
 800be1c:	9201      	str	r2, [sp, #4]
 800be1e:	9300      	str	r3, [sp, #0]
 800be20:	4603      	mov	r3, r0
 800be22:	2200      	movs	r2, #0
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f001 f945 	bl	800d0b4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800be2a:	e12a      	b.n	800c082 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800be2c:	7bbb      	ldrb	r3, [r7, #14]
 800be2e:	2b03      	cmp	r3, #3
 800be30:	f040 8127 	bne.w	800c082 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	220d      	movs	r2, #13
 800be38:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2200      	movs	r2, #0
 800be3e:	705a      	strb	r2, [r3, #1]
      break;
 800be40:	e11f      	b.n	800c082 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800be42:	2109      	movs	r1, #9
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f000 fa37 	bl	800c2b8 <USBH_Get_CfgDesc>
 800be4a:	4603      	mov	r3, r0
 800be4c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800be4e:	7bbb      	ldrb	r3, [r7, #14]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d103      	bne.n	800be5c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2204      	movs	r2, #4
 800be58:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800be5a:	e114      	b.n	800c086 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800be5c:	7bbb      	ldrb	r3, [r7, #14]
 800be5e:	2b03      	cmp	r3, #3
 800be60:	f040 8111 	bne.w	800c086 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800be6a:	3301      	adds	r3, #1
 800be6c:	b2da      	uxtb	r2, r3
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800be7a:	2b03      	cmp	r3, #3
 800be7c:	d903      	bls.n	800be86 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	220d      	movs	r2, #13
 800be82:	701a      	strb	r2, [r3, #0]
      break;
 800be84:	e0ff      	b.n	800c086 <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	795b      	ldrb	r3, [r3, #5]
 800be8a:	4619      	mov	r1, r3
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f001 f961 	bl	800d154 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	791b      	ldrb	r3, [r3, #4]
 800be96:	4619      	mov	r1, r3
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f001 f95b 	bl	800d154 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2200      	movs	r2, #0
 800bea2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2200      	movs	r2, #0
 800bea8:	701a      	strb	r2, [r3, #0]
      break;
 800beaa:	e0ec      	b.n	800c086 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800beb2:	4619      	mov	r1, r3
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f000 f9ff 	bl	800c2b8 <USBH_Get_CfgDesc>
 800beba:	4603      	mov	r3, r0
 800bebc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bebe:	7bbb      	ldrb	r3, [r7, #14]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d103      	bne.n	800becc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2205      	movs	r2, #5
 800bec8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800beca:	e0de      	b.n	800c08a <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800becc:	7bbb      	ldrb	r3, [r7, #14]
 800bece:	2b03      	cmp	r3, #3
 800bed0:	f040 80db 	bne.w	800c08a <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800beda:	3301      	adds	r3, #1
 800bedc:	b2da      	uxtb	r2, r3
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800beea:	2b03      	cmp	r3, #3
 800beec:	d903      	bls.n	800bef6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	220d      	movs	r2, #13
 800bef2:	701a      	strb	r2, [r3, #0]
      break;
 800bef4:	e0c9      	b.n	800c08a <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	795b      	ldrb	r3, [r3, #5]
 800befa:	4619      	mov	r1, r3
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f001 f929 	bl	800d154 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	791b      	ldrb	r3, [r3, #4]
 800bf06:	4619      	mov	r1, r3
 800bf08:	6878      	ldr	r0, [r7, #4]
 800bf0a:	f001 f923 	bl	800d154 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2200      	movs	r2, #0
 800bf12:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2200      	movs	r2, #0
 800bf18:	701a      	strb	r2, [r3, #0]
      break;
 800bf1a:	e0b6      	b.n	800c08a <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d036      	beq.n	800bf94 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800bf32:	23ff      	movs	r3, #255	; 0xff
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f000 f9e3 	bl	800c300 <USBH_Get_StringDesc>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bf3e:	7bbb      	ldrb	r3, [r7, #14]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d111      	bne.n	800bf68 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2206      	movs	r2, #6
 800bf48:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2205      	movs	r2, #5
 800bf4e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bf5e:	2200      	movs	r2, #0
 800bf60:	4619      	mov	r1, r3
 800bf62:	f001 f9f3 	bl	800d34c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bf66:	e092      	b.n	800c08e <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bf68:	7bbb      	ldrb	r3, [r7, #14]
 800bf6a:	2b03      	cmp	r3, #3
 800bf6c:	f040 808f 	bne.w	800c08e <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2206      	movs	r2, #6
 800bf74:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2205      	movs	r2, #5
 800bf7a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	4619      	mov	r1, r3
 800bf8e:	f001 f9dd 	bl	800d34c <osMessagePut>
      break;
 800bf92:	e07c      	b.n	800c08e <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2206      	movs	r2, #6
 800bf98:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2205      	movs	r2, #5
 800bf9e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bfae:	2200      	movs	r2, #0
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	f001 f9cb 	bl	800d34c <osMessagePut>
      break;
 800bfb6:	e06a      	b.n	800c08e <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d027      	beq.n	800c012 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800bfce:	23ff      	movs	r3, #255	; 0xff
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f000 f995 	bl	800c300 <USBH_Get_StringDesc>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800bfda:	7bbb      	ldrb	r3, [r7, #14]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d103      	bne.n	800bfe8 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2207      	movs	r2, #7
 800bfe4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bfe6:	e054      	b.n	800c092 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bfe8:	7bbb      	ldrb	r3, [r7, #14]
 800bfea:	2b03      	cmp	r3, #3
 800bfec:	d151      	bne.n	800c092 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2207      	movs	r2, #7
 800bff2:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2205      	movs	r2, #5
 800bff8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c008:	2200      	movs	r2, #0
 800c00a:	4619      	mov	r1, r3
 800c00c:	f001 f99e 	bl	800d34c <osMessagePut>
      break;
 800c010:	e03f      	b.n	800c092 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2207      	movs	r2, #7
 800c016:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2205      	movs	r2, #5
 800c01c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c02c:	2200      	movs	r2, #0
 800c02e:	4619      	mov	r1, r3
 800c030:	f001 f98c 	bl	800d34c <osMessagePut>
      break;
 800c034:	e02d      	b.n	800c092 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d017      	beq.n	800c070 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c04c:	23ff      	movs	r3, #255	; 0xff
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f000 f956 	bl	800c300 <USBH_Get_StringDesc>
 800c054:	4603      	mov	r3, r0
 800c056:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c058:	7bbb      	ldrb	r3, [r7, #14]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d102      	bne.n	800c064 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800c05e:	2300      	movs	r3, #0
 800c060:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800c062:	e018      	b.n	800c096 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c064:	7bbb      	ldrb	r3, [r7, #14]
 800c066:	2b03      	cmp	r3, #3
 800c068:	d115      	bne.n	800c096 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800c06a:	2300      	movs	r3, #0
 800c06c:	73fb      	strb	r3, [r7, #15]
      break;
 800c06e:	e012      	b.n	800c096 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800c070:	2300      	movs	r3, #0
 800c072:	73fb      	strb	r3, [r7, #15]
      break;
 800c074:	e00f      	b.n	800c096 <USBH_HandleEnum+0x44a>

    default:
      break;
 800c076:	bf00      	nop
 800c078:	e00e      	b.n	800c098 <USBH_HandleEnum+0x44c>
      break;
 800c07a:	bf00      	nop
 800c07c:	e00c      	b.n	800c098 <USBH_HandleEnum+0x44c>
      break;
 800c07e:	bf00      	nop
 800c080:	e00a      	b.n	800c098 <USBH_HandleEnum+0x44c>
      break;
 800c082:	bf00      	nop
 800c084:	e008      	b.n	800c098 <USBH_HandleEnum+0x44c>
      break;
 800c086:	bf00      	nop
 800c088:	e006      	b.n	800c098 <USBH_HandleEnum+0x44c>
      break;
 800c08a:	bf00      	nop
 800c08c:	e004      	b.n	800c098 <USBH_HandleEnum+0x44c>
      break;
 800c08e:	bf00      	nop
 800c090:	e002      	b.n	800c098 <USBH_HandleEnum+0x44c>
      break;
 800c092:	bf00      	nop
 800c094:	e000      	b.n	800c098 <USBH_HandleEnum+0x44c>
      break;
 800c096:	bf00      	nop
  }
  return Status;
 800c098:	7bfb      	ldrb	r3, [r7, #15]
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3710      	adds	r7, #16
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}
 800c0a2:	bf00      	nop

0800c0a4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b083      	sub	sp, #12
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	683a      	ldr	r2, [r7, #0]
 800c0b2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800c0b6:	bf00      	nop
 800c0b8:	370c      	adds	r7, #12
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c0:	4770      	bx	lr

0800c0c2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c0c2:	b580      	push	{r7, lr}
 800c0c4:	b082      	sub	sp, #8
 800c0c6:	af00      	add	r7, sp, #0
 800c0c8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c0d0:	1c5a      	adds	r2, r3, #1
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f000 f804 	bl	800c0e6 <USBH_HandleSof>
}
 800c0de:	bf00      	nop
 800c0e0:	3708      	adds	r7, #8
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}

0800c0e6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c0e6:	b580      	push	{r7, lr}
 800c0e8:	b082      	sub	sp, #8
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	781b      	ldrb	r3, [r3, #0]
 800c0f2:	b2db      	uxtb	r3, r3
 800c0f4:	2b0b      	cmp	r3, #11
 800c0f6:	d10a      	bne.n	800c10e <USBH_HandleSof+0x28>
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d005      	beq.n	800c10e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c108:	699b      	ldr	r3, [r3, #24]
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	4798      	blx	r3
  }
}
 800c10e:	bf00      	nop
 800c110:	3708      	adds	r7, #8
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}

0800c116 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c116:	b580      	push	{r7, lr}
 800c118:	b082      	sub	sp, #8
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2201      	movs	r2, #1
 800c122:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2201      	movs	r2, #1
 800c12a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c13a:	2200      	movs	r2, #0
 800c13c:	4619      	mov	r1, r3
 800c13e:	f001 f905 	bl	800d34c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800c142:	bf00      	nop
}
 800c144:	3708      	adds	r7, #8
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}

0800c14a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c14a:	b480      	push	{r7}
 800c14c:	b083      	sub	sp, #12
 800c14e:	af00      	add	r7, sp, #0
 800c150:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2200      	movs	r2, #0
 800c156:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800c15a:	bf00      	nop
}
 800c15c:	370c      	adds	r7, #12
 800c15e:	46bd      	mov	sp, r7
 800c160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c164:	4770      	bx	lr

0800c166 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c166:	b580      	push	{r7, lr}
 800c168:	b082      	sub	sp, #8
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2201      	movs	r2, #1
 800c172:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2200      	movs	r2, #0
 800c17a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2200      	movs	r2, #0
 800c182:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2201      	movs	r2, #1
 800c18a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c19a:	2200      	movs	r2, #0
 800c19c:	4619      	mov	r1, r3
 800c19e:	f001 f8d5 	bl	800d34c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c1a2:	2300      	movs	r3, #0
}
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	3708      	adds	r7, #8
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}

0800c1ac <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b082      	sub	sp, #8
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2201      	movs	r2, #1
 800c1b8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2200      	movs	r2, #0
 800c1c0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f004 fc4c 	bl	8010a6a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	791b      	ldrb	r3, [r3, #4]
 800c1d6:	4619      	mov	r1, r3
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f000 ffbb 	bl	800d154 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	795b      	ldrb	r3, [r3, #5]
 800c1e2:	4619      	mov	r1, r3
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f000 ffb5 	bl	800d154 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2201      	movs	r2, #1
 800c1ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c1fe:	2200      	movs	r2, #0
 800c200:	4619      	mov	r1, r3
 800c202:	f001 f8a3 	bl	800d34c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c206:	2300      	movs	r3, #0
}
 800c208:	4618      	mov	r0, r3
 800c20a:	3708      	adds	r7, #8
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}

0800c210 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b086      	sub	sp, #24
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800c21e:	f107 030c 	add.w	r3, r7, #12
 800c222:	f04f 32ff 	mov.w	r2, #4294967295
 800c226:	4618      	mov	r0, r3
 800c228:	f001 f8d0 	bl	800d3cc <osMessageGet>
    if (event.status == osEventMessage)
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	2b10      	cmp	r3, #16
 800c230:	d1f2      	bne.n	800c218 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f7ff fa9e 	bl	800b774 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800c238:	e7ee      	b.n	800c218 <USBH_Process_OS+0x8>

0800c23a <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800c23a:	b580      	push	{r7, lr}
 800c23c:	b082      	sub	sp, #8
 800c23e:	af00      	add	r7, sp, #0
 800c240:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2201      	movs	r2, #1
 800c246:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c256:	2200      	movs	r2, #0
 800c258:	4619      	mov	r1, r3
 800c25a:	f001 f877 	bl	800d34c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800c25e:	2300      	movs	r3, #0
}
 800c260:	4618      	mov	r0, r3
 800c262:	3708      	adds	r7, #8
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}

0800c268 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b086      	sub	sp, #24
 800c26c:	af02      	add	r7, sp, #8
 800c26e:	6078      	str	r0, [r7, #4]
 800c270:	460b      	mov	r3, r1
 800c272:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c27a:	78fb      	ldrb	r3, [r7, #3]
 800c27c:	b29b      	uxth	r3, r3
 800c27e:	9300      	str	r3, [sp, #0]
 800c280:	4613      	mov	r3, r2
 800c282:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c286:	2100      	movs	r1, #0
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f000 f864 	bl	800c356 <USBH_GetDescriptor>
 800c28e:	4603      	mov	r3, r0
 800c290:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800c292:	7bfb      	ldrb	r3, [r7, #15]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d10a      	bne.n	800c2ae <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c2a4:	78fa      	ldrb	r2, [r7, #3]
 800c2a6:	b292      	uxth	r2, r2
 800c2a8:	4619      	mov	r1, r3
 800c2aa:	f000 f918 	bl	800c4de <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800c2ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3710      	adds	r7, #16
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}

0800c2b8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b086      	sub	sp, #24
 800c2bc:	af02      	add	r7, sp, #8
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	460b      	mov	r3, r1
 800c2c2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	331c      	adds	r3, #28
 800c2c8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c2ca:	887b      	ldrh	r3, [r7, #2]
 800c2cc:	9300      	str	r3, [sp, #0]
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c2d4:	2100      	movs	r1, #0
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f000 f83d 	bl	800c356 <USBH_GetDescriptor>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800c2e0:	7bfb      	ldrb	r3, [r7, #15]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d107      	bne.n	800c2f6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800c2e6:	887b      	ldrh	r3, [r7, #2]
 800c2e8:	461a      	mov	r2, r3
 800c2ea:	68b9      	ldr	r1, [r7, #8]
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f000 f987 	bl	800c600 <USBH_ParseCfgDesc>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c2f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3710      	adds	r7, #16
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}

0800c300 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b088      	sub	sp, #32
 800c304:	af02      	add	r7, sp, #8
 800c306:	60f8      	str	r0, [r7, #12]
 800c308:	607a      	str	r2, [r7, #4]
 800c30a:	461a      	mov	r2, r3
 800c30c:	460b      	mov	r3, r1
 800c30e:	72fb      	strb	r3, [r7, #11]
 800c310:	4613      	mov	r3, r2
 800c312:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800c314:	7afb      	ldrb	r3, [r7, #11]
 800c316:	b29b      	uxth	r3, r3
 800c318:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800c31c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800c324:	893b      	ldrh	r3, [r7, #8]
 800c326:	9300      	str	r3, [sp, #0]
 800c328:	460b      	mov	r3, r1
 800c32a:	2100      	movs	r1, #0
 800c32c:	68f8      	ldr	r0, [r7, #12]
 800c32e:	f000 f812 	bl	800c356 <USBH_GetDescriptor>
 800c332:	4603      	mov	r3, r0
 800c334:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800c336:	7dfb      	ldrb	r3, [r7, #23]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d107      	bne.n	800c34c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c342:	893a      	ldrh	r2, [r7, #8]
 800c344:	6879      	ldr	r1, [r7, #4]
 800c346:	4618      	mov	r0, r3
 800c348:	f000 fb24 	bl	800c994 <USBH_ParseStringDesc>
  }

  return status;
 800c34c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3718      	adds	r7, #24
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}

0800c356 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800c356:	b580      	push	{r7, lr}
 800c358:	b084      	sub	sp, #16
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	60f8      	str	r0, [r7, #12]
 800c35e:	607b      	str	r3, [r7, #4]
 800c360:	460b      	mov	r3, r1
 800c362:	72fb      	strb	r3, [r7, #11]
 800c364:	4613      	mov	r3, r2
 800c366:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	789b      	ldrb	r3, [r3, #2]
 800c36c:	2b01      	cmp	r3, #1
 800c36e:	d11c      	bne.n	800c3aa <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c370:	7afb      	ldrb	r3, [r7, #11]
 800c372:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c376:	b2da      	uxtb	r2, r3
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	2206      	movs	r2, #6
 800c380:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	893a      	ldrh	r2, [r7, #8]
 800c386:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c388:	893b      	ldrh	r3, [r7, #8]
 800c38a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c38e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c392:	d104      	bne.n	800c39e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f240 4209 	movw	r2, #1033	; 0x409
 800c39a:	829a      	strh	r2, [r3, #20]
 800c39c:	e002      	b.n	800c3a4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	8b3a      	ldrh	r2, [r7, #24]
 800c3a8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c3aa:	8b3b      	ldrh	r3, [r7, #24]
 800c3ac:	461a      	mov	r2, r3
 800c3ae:	6879      	ldr	r1, [r7, #4]
 800c3b0:	68f8      	ldr	r0, [r7, #12]
 800c3b2:	f000 fb3d 	bl	800ca30 <USBH_CtlReq>
 800c3b6:	4603      	mov	r3, r0
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3710      	adds	r7, #16
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}

0800c3c0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b082      	sub	sp, #8
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
 800c3c8:	460b      	mov	r3, r1
 800c3ca:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	789b      	ldrb	r3, [r3, #2]
 800c3d0:	2b01      	cmp	r3, #1
 800c3d2:	d10f      	bne.n	800c3f4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2205      	movs	r2, #5
 800c3de:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c3e0:	78fb      	ldrb	r3, [r7, #3]
 800c3e2:	b29a      	uxth	r2, r3
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	2100      	movs	r1, #0
 800c3f8:	6878      	ldr	r0, [r7, #4]
 800c3fa:	f000 fb19 	bl	800ca30 <USBH_CtlReq>
 800c3fe:	4603      	mov	r3, r0
}
 800c400:	4618      	mov	r0, r3
 800c402:	3708      	adds	r7, #8
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}

0800c408 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b082      	sub	sp, #8
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	460b      	mov	r3, r1
 800c412:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	789b      	ldrb	r3, [r3, #2]
 800c418:	2b01      	cmp	r3, #1
 800c41a:	d10e      	bne.n	800c43a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2200      	movs	r2, #0
 800c420:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2209      	movs	r2, #9
 800c426:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	887a      	ldrh	r2, [r7, #2]
 800c42c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2200      	movs	r2, #0
 800c432:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2200      	movs	r2, #0
 800c438:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c43a:	2200      	movs	r2, #0
 800c43c:	2100      	movs	r1, #0
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f000 faf6 	bl	800ca30 <USBH_CtlReq>
 800c444:	4603      	mov	r3, r0
}
 800c446:	4618      	mov	r0, r3
 800c448:	3708      	adds	r7, #8
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}

0800c44e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c44e:	b580      	push	{r7, lr}
 800c450:	b082      	sub	sp, #8
 800c452:	af00      	add	r7, sp, #0
 800c454:	6078      	str	r0, [r7, #4]
 800c456:	460b      	mov	r3, r1
 800c458:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	789b      	ldrb	r3, [r3, #2]
 800c45e:	2b01      	cmp	r3, #1
 800c460:	d10f      	bne.n	800c482 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2200      	movs	r2, #0
 800c466:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2203      	movs	r2, #3
 800c46c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c46e:	78fb      	ldrb	r3, [r7, #3]
 800c470:	b29a      	uxth	r2, r3
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2200      	movs	r2, #0
 800c47a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2200      	movs	r2, #0
 800c480:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c482:	2200      	movs	r2, #0
 800c484:	2100      	movs	r1, #0
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f000 fad2 	bl	800ca30 <USBH_CtlReq>
 800c48c:	4603      	mov	r3, r0
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3708      	adds	r7, #8
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}

0800c496 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c496:	b580      	push	{r7, lr}
 800c498:	b082      	sub	sp, #8
 800c49a:	af00      	add	r7, sp, #0
 800c49c:	6078      	str	r0, [r7, #4]
 800c49e:	460b      	mov	r3, r1
 800c4a0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	789b      	ldrb	r3, [r3, #2]
 800c4a6:	2b01      	cmp	r3, #1
 800c4a8:	d10f      	bne.n	800c4ca <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2202      	movs	r2, #2
 800c4ae:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c4bc:	78fb      	ldrb	r3, [r7, #3]
 800c4be:	b29a      	uxth	r2, r3
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	2100      	movs	r1, #0
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f000 faae 	bl	800ca30 <USBH_CtlReq>
 800c4d4:	4603      	mov	r3, r0
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3708      	adds	r7, #8
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}

0800c4de <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800c4de:	b480      	push	{r7}
 800c4e0:	b085      	sub	sp, #20
 800c4e2:	af00      	add	r7, sp, #0
 800c4e4:	60f8      	str	r0, [r7, #12]
 800c4e6:	60b9      	str	r1, [r7, #8]
 800c4e8:	4613      	mov	r3, r2
 800c4ea:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	781a      	ldrb	r2, [r3, #0]
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	785a      	ldrb	r2, [r3, #1]
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	3302      	adds	r3, #2
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	b29a      	uxth	r2, r3
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	3303      	adds	r3, #3
 800c508:	781b      	ldrb	r3, [r3, #0]
 800c50a:	b29b      	uxth	r3, r3
 800c50c:	021b      	lsls	r3, r3, #8
 800c50e:	b29b      	uxth	r3, r3
 800c510:	4313      	orrs	r3, r2
 800c512:	b29a      	uxth	r2, r3
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	791a      	ldrb	r2, [r3, #4]
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	795a      	ldrb	r2, [r3, #5]
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	799a      	ldrb	r2, [r3, #6]
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	79da      	ldrb	r2, [r3, #7]
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	79db      	ldrb	r3, [r3, #7]
 800c53c:	2b20      	cmp	r3, #32
 800c53e:	dc11      	bgt.n	800c564 <USBH_ParseDevDesc+0x86>
 800c540:	2b08      	cmp	r3, #8
 800c542:	db16      	blt.n	800c572 <USBH_ParseDevDesc+0x94>
 800c544:	3b08      	subs	r3, #8
 800c546:	2201      	movs	r2, #1
 800c548:	fa02 f303 	lsl.w	r3, r2, r3
 800c54c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800c550:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c554:	2b00      	cmp	r3, #0
 800c556:	bf14      	ite	ne
 800c558:	2301      	movne	r3, #1
 800c55a:	2300      	moveq	r3, #0
 800c55c:	b2db      	uxtb	r3, r3
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d102      	bne.n	800c568 <USBH_ParseDevDesc+0x8a>
 800c562:	e006      	b.n	800c572 <USBH_ParseDevDesc+0x94>
 800c564:	2b40      	cmp	r3, #64	; 0x40
 800c566:	d104      	bne.n	800c572 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	79da      	ldrb	r2, [r3, #7]
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	71da      	strb	r2, [r3, #7]
      break;
 800c570:	e003      	b.n	800c57a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	2240      	movs	r2, #64	; 0x40
 800c576:	71da      	strb	r2, [r3, #7]
      break;
 800c578:	bf00      	nop
  }

  if (length > 8U)
 800c57a:	88fb      	ldrh	r3, [r7, #6]
 800c57c:	2b08      	cmp	r3, #8
 800c57e:	d939      	bls.n	800c5f4 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	3308      	adds	r3, #8
 800c584:	781b      	ldrb	r3, [r3, #0]
 800c586:	b29a      	uxth	r2, r3
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	3309      	adds	r3, #9
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	b29b      	uxth	r3, r3
 800c590:	021b      	lsls	r3, r3, #8
 800c592:	b29b      	uxth	r3, r3
 800c594:	4313      	orrs	r3, r2
 800c596:	b29a      	uxth	r2, r3
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	330a      	adds	r3, #10
 800c5a0:	781b      	ldrb	r3, [r3, #0]
 800c5a2:	b29a      	uxth	r2, r3
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	330b      	adds	r3, #11
 800c5a8:	781b      	ldrb	r3, [r3, #0]
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	021b      	lsls	r3, r3, #8
 800c5ae:	b29b      	uxth	r3, r3
 800c5b0:	4313      	orrs	r3, r2
 800c5b2:	b29a      	uxth	r2, r3
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	330c      	adds	r3, #12
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	b29a      	uxth	r2, r3
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	330d      	adds	r3, #13
 800c5c4:	781b      	ldrb	r3, [r3, #0]
 800c5c6:	b29b      	uxth	r3, r3
 800c5c8:	021b      	lsls	r3, r3, #8
 800c5ca:	b29b      	uxth	r3, r3
 800c5cc:	4313      	orrs	r3, r2
 800c5ce:	b29a      	uxth	r2, r3
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	7b9a      	ldrb	r2, [r3, #14]
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	7bda      	ldrb	r2, [r3, #15]
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	7c1a      	ldrb	r2, [r3, #16]
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	7c5a      	ldrb	r2, [r3, #17]
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	745a      	strb	r2, [r3, #17]
  }
}
 800c5f4:	bf00      	nop
 800c5f6:	3714      	adds	r7, #20
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fe:	4770      	bx	lr

0800c600 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b08c      	sub	sp, #48	; 0x30
 800c604:	af00      	add	r7, sp, #0
 800c606:	60f8      	str	r0, [r7, #12]
 800c608:	60b9      	str	r1, [r7, #8]
 800c60a:	4613      	mov	r3, r2
 800c60c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c614:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800c616:	2300      	movs	r3, #0
 800c618:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c620:	2300      	movs	r3, #0
 800c622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800c626:	2300      	movs	r3, #0
 800c628:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	781a      	ldrb	r2, [r3, #0]
 800c634:	6a3b      	ldr	r3, [r7, #32]
 800c636:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	785a      	ldrb	r2, [r3, #1]
 800c63c:	6a3b      	ldr	r3, [r7, #32]
 800c63e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	3302      	adds	r3, #2
 800c644:	781b      	ldrb	r3, [r3, #0]
 800c646:	b29a      	uxth	r2, r3
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	3303      	adds	r3, #3
 800c64c:	781b      	ldrb	r3, [r3, #0]
 800c64e:	b29b      	uxth	r3, r3
 800c650:	021b      	lsls	r3, r3, #8
 800c652:	b29b      	uxth	r3, r3
 800c654:	4313      	orrs	r3, r2
 800c656:	b29b      	uxth	r3, r3
 800c658:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c65c:	bf28      	it	cs
 800c65e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800c662:	b29a      	uxth	r2, r3
 800c664:	6a3b      	ldr	r3, [r7, #32]
 800c666:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	791a      	ldrb	r2, [r3, #4]
 800c66c:	6a3b      	ldr	r3, [r7, #32]
 800c66e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	795a      	ldrb	r2, [r3, #5]
 800c674:	6a3b      	ldr	r3, [r7, #32]
 800c676:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	799a      	ldrb	r2, [r3, #6]
 800c67c:	6a3b      	ldr	r3, [r7, #32]
 800c67e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	79da      	ldrb	r2, [r3, #7]
 800c684:	6a3b      	ldr	r3, [r7, #32]
 800c686:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	7a1a      	ldrb	r2, [r3, #8]
 800c68c:	6a3b      	ldr	r3, [r7, #32]
 800c68e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800c690:	6a3b      	ldr	r3, [r7, #32]
 800c692:	781b      	ldrb	r3, [r3, #0]
 800c694:	2b09      	cmp	r3, #9
 800c696:	d002      	beq.n	800c69e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800c698:	6a3b      	ldr	r3, [r7, #32]
 800c69a:	2209      	movs	r2, #9
 800c69c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c69e:	88fb      	ldrh	r3, [r7, #6]
 800c6a0:	2b09      	cmp	r3, #9
 800c6a2:	f240 809d 	bls.w	800c7e0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800c6a6:	2309      	movs	r3, #9
 800c6a8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c6ae:	e081      	b.n	800c7b4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c6b0:	f107 0316 	add.w	r3, r7, #22
 800c6b4:	4619      	mov	r1, r3
 800c6b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6b8:	f000 f99f 	bl	800c9fa <USBH_GetNextDesc>
 800c6bc:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800c6be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c0:	785b      	ldrb	r3, [r3, #1]
 800c6c2:	2b04      	cmp	r3, #4
 800c6c4:	d176      	bne.n	800c7b4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800c6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c8:	781b      	ldrb	r3, [r3, #0]
 800c6ca:	2b09      	cmp	r3, #9
 800c6cc:	d002      	beq.n	800c6d4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800c6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d0:	2209      	movs	r2, #9
 800c6d2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800c6d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6d8:	221a      	movs	r2, #26
 800c6da:	fb02 f303 	mul.w	r3, r2, r3
 800c6de:	3308      	adds	r3, #8
 800c6e0:	6a3a      	ldr	r2, [r7, #32]
 800c6e2:	4413      	add	r3, r2
 800c6e4:	3302      	adds	r3, #2
 800c6e6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c6e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c6ea:	69f8      	ldr	r0, [r7, #28]
 800c6ec:	f000 f87e 	bl	800c7ec <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c6fa:	e043      	b.n	800c784 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c6fc:	f107 0316 	add.w	r3, r7, #22
 800c700:	4619      	mov	r1, r3
 800c702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c704:	f000 f979 	bl	800c9fa <USBH_GetNextDesc>
 800c708:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c70c:	785b      	ldrb	r3, [r3, #1]
 800c70e:	2b05      	cmp	r3, #5
 800c710:	d138      	bne.n	800c784 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800c712:	69fb      	ldr	r3, [r7, #28]
 800c714:	795b      	ldrb	r3, [r3, #5]
 800c716:	2b01      	cmp	r3, #1
 800c718:	d10f      	bne.n	800c73a <USBH_ParseCfgDesc+0x13a>
 800c71a:	69fb      	ldr	r3, [r7, #28]
 800c71c:	799b      	ldrb	r3, [r3, #6]
 800c71e:	2b02      	cmp	r3, #2
 800c720:	d10b      	bne.n	800c73a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c722:	69fb      	ldr	r3, [r7, #28]
 800c724:	79db      	ldrb	r3, [r3, #7]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d10f      	bne.n	800c74a <USBH_ParseCfgDesc+0x14a>
 800c72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c72c:	781b      	ldrb	r3, [r3, #0]
 800c72e:	2b09      	cmp	r3, #9
 800c730:	d00b      	beq.n	800c74a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800c732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c734:	2209      	movs	r2, #9
 800c736:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c738:	e007      	b.n	800c74a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800c73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c73c:	781b      	ldrb	r3, [r3, #0]
 800c73e:	2b07      	cmp	r3, #7
 800c740:	d004      	beq.n	800c74c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800c742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c744:	2207      	movs	r2, #7
 800c746:	701a      	strb	r2, [r3, #0]
 800c748:	e000      	b.n	800c74c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c74a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c74c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c750:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c754:	3201      	adds	r2, #1
 800c756:	00d2      	lsls	r2, r2, #3
 800c758:	211a      	movs	r1, #26
 800c75a:	fb01 f303 	mul.w	r3, r1, r3
 800c75e:	4413      	add	r3, r2
 800c760:	3308      	adds	r3, #8
 800c762:	6a3a      	ldr	r2, [r7, #32]
 800c764:	4413      	add	r3, r2
 800c766:	3304      	adds	r3, #4
 800c768:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800c76a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c76c:	69b9      	ldr	r1, [r7, #24]
 800c76e:	68f8      	ldr	r0, [r7, #12]
 800c770:	f000 f86b 	bl	800c84a <USBH_ParseEPDesc>
 800c774:	4603      	mov	r3, r0
 800c776:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800c77a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c77e:	3301      	adds	r3, #1
 800c780:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c784:	69fb      	ldr	r3, [r7, #28]
 800c786:	791b      	ldrb	r3, [r3, #4]
 800c788:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c78c:	429a      	cmp	r2, r3
 800c78e:	d204      	bcs.n	800c79a <USBH_ParseCfgDesc+0x19a>
 800c790:	6a3b      	ldr	r3, [r7, #32]
 800c792:	885a      	ldrh	r2, [r3, #2]
 800c794:	8afb      	ldrh	r3, [r7, #22]
 800c796:	429a      	cmp	r2, r3
 800c798:	d8b0      	bhi.n	800c6fc <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800c79a:	69fb      	ldr	r3, [r7, #28]
 800c79c:	791b      	ldrb	r3, [r3, #4]
 800c79e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d201      	bcs.n	800c7aa <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800c7a6:	2303      	movs	r3, #3
 800c7a8:	e01c      	b.n	800c7e4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800c7aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7ae:	3301      	adds	r3, #1
 800c7b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c7b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7b8:	2b01      	cmp	r3, #1
 800c7ba:	d805      	bhi.n	800c7c8 <USBH_ParseCfgDesc+0x1c8>
 800c7bc:	6a3b      	ldr	r3, [r7, #32]
 800c7be:	885a      	ldrh	r2, [r3, #2]
 800c7c0:	8afb      	ldrh	r3, [r7, #22]
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	f63f af74 	bhi.w	800c6b0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800c7c8:	6a3b      	ldr	r3, [r7, #32]
 800c7ca:	791b      	ldrb	r3, [r3, #4]
 800c7cc:	2b02      	cmp	r3, #2
 800c7ce:	bf28      	it	cs
 800c7d0:	2302      	movcs	r3, #2
 800c7d2:	b2db      	uxtb	r3, r3
 800c7d4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d201      	bcs.n	800c7e0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800c7dc:	2303      	movs	r3, #3
 800c7de:	e001      	b.n	800c7e4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800c7e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3730      	adds	r7, #48	; 0x30
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}

0800c7ec <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b083      	sub	sp, #12
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	781a      	ldrb	r2, [r3, #0]
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	785a      	ldrb	r2, [r3, #1]
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	789a      	ldrb	r2, [r3, #2]
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	78da      	ldrb	r2, [r3, #3]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	791a      	ldrb	r2, [r3, #4]
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	795a      	ldrb	r2, [r3, #5]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	799a      	ldrb	r2, [r3, #6]
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	79da      	ldrb	r2, [r3, #7]
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	7a1a      	ldrb	r2, [r3, #8]
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	721a      	strb	r2, [r3, #8]
}
 800c83e:	bf00      	nop
 800c840:	370c      	adds	r7, #12
 800c842:	46bd      	mov	sp, r7
 800c844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c848:	4770      	bx	lr

0800c84a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800c84a:	b480      	push	{r7}
 800c84c:	b087      	sub	sp, #28
 800c84e:	af00      	add	r7, sp, #0
 800c850:	60f8      	str	r0, [r7, #12]
 800c852:	60b9      	str	r1, [r7, #8]
 800c854:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800c856:	2300      	movs	r3, #0
 800c858:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	781a      	ldrb	r2, [r3, #0]
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	785a      	ldrb	r2, [r3, #1]
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	789a      	ldrb	r2, [r3, #2]
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	78da      	ldrb	r2, [r3, #3]
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	3304      	adds	r3, #4
 800c87e:	781b      	ldrb	r3, [r3, #0]
 800c880:	b29a      	uxth	r2, r3
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	3305      	adds	r3, #5
 800c886:	781b      	ldrb	r3, [r3, #0]
 800c888:	b29b      	uxth	r3, r3
 800c88a:	021b      	lsls	r3, r3, #8
 800c88c:	b29b      	uxth	r3, r3
 800c88e:	4313      	orrs	r3, r2
 800c890:	b29a      	uxth	r2, r3
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	799a      	ldrb	r2, [r3, #6]
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	889b      	ldrh	r3, [r3, #4]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d102      	bne.n	800c8ac <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800c8a6:	2303      	movs	r3, #3
 800c8a8:	75fb      	strb	r3, [r7, #23]
 800c8aa:	e033      	b.n	800c914 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	889b      	ldrh	r3, [r3, #4]
 800c8b0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c8b4:	f023 0307 	bic.w	r3, r3, #7
 800c8b8:	b29a      	uxth	r2, r3
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	889b      	ldrh	r3, [r3, #4]
 800c8c2:	b21a      	sxth	r2, r3
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	3304      	adds	r3, #4
 800c8c8:	781b      	ldrb	r3, [r3, #0]
 800c8ca:	b299      	uxth	r1, r3
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	3305      	adds	r3, #5
 800c8d0:	781b      	ldrb	r3, [r3, #0]
 800c8d2:	b29b      	uxth	r3, r3
 800c8d4:	021b      	lsls	r3, r3, #8
 800c8d6:	b29b      	uxth	r3, r3
 800c8d8:	430b      	orrs	r3, r1
 800c8da:	b29b      	uxth	r3, r3
 800c8dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d110      	bne.n	800c906 <USBH_ParseEPDesc+0xbc>
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	3304      	adds	r3, #4
 800c8e8:	781b      	ldrb	r3, [r3, #0]
 800c8ea:	b299      	uxth	r1, r3
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	3305      	adds	r3, #5
 800c8f0:	781b      	ldrb	r3, [r3, #0]
 800c8f2:	b29b      	uxth	r3, r3
 800c8f4:	021b      	lsls	r3, r3, #8
 800c8f6:	b29b      	uxth	r3, r3
 800c8f8:	430b      	orrs	r3, r1
 800c8fa:	b29b      	uxth	r3, r3
 800c8fc:	b21b      	sxth	r3, r3
 800c8fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c902:	b21b      	sxth	r3, r3
 800c904:	e001      	b.n	800c90a <USBH_ParseEPDesc+0xc0>
 800c906:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c90a:	4313      	orrs	r3, r2
 800c90c:	b21b      	sxth	r3, r3
 800c90e:	b29a      	uxth	r2, r3
 800c910:	68bb      	ldr	r3, [r7, #8]
 800c912:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d116      	bne.n	800c94c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	78db      	ldrb	r3, [r3, #3]
 800c922:	f003 0303 	and.w	r3, r3, #3
 800c926:	2b01      	cmp	r3, #1
 800c928:	d005      	beq.n	800c936 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	78db      	ldrb	r3, [r3, #3]
 800c92e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c932:	2b03      	cmp	r3, #3
 800c934:	d127      	bne.n	800c986 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	799b      	ldrb	r3, [r3, #6]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d003      	beq.n	800c946 <USBH_ParseEPDesc+0xfc>
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	799b      	ldrb	r3, [r3, #6]
 800c942:	2b10      	cmp	r3, #16
 800c944:	d91f      	bls.n	800c986 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800c946:	2303      	movs	r3, #3
 800c948:	75fb      	strb	r3, [r7, #23]
 800c94a:	e01c      	b.n	800c986 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	78db      	ldrb	r3, [r3, #3]
 800c950:	f003 0303 	and.w	r3, r3, #3
 800c954:	2b01      	cmp	r3, #1
 800c956:	d10a      	bne.n	800c96e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c958:	68bb      	ldr	r3, [r7, #8]
 800c95a:	799b      	ldrb	r3, [r3, #6]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d003      	beq.n	800c968 <USBH_ParseEPDesc+0x11e>
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	799b      	ldrb	r3, [r3, #6]
 800c964:	2b10      	cmp	r3, #16
 800c966:	d90e      	bls.n	800c986 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800c968:	2303      	movs	r3, #3
 800c96a:	75fb      	strb	r3, [r7, #23]
 800c96c:	e00b      	b.n	800c986 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	78db      	ldrb	r3, [r3, #3]
 800c972:	f003 0303 	and.w	r3, r3, #3
 800c976:	2b03      	cmp	r3, #3
 800c978:	d105      	bne.n	800c986 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800c97a:	68bb      	ldr	r3, [r7, #8]
 800c97c:	799b      	ldrb	r3, [r3, #6]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d101      	bne.n	800c986 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800c982:	2303      	movs	r3, #3
 800c984:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800c986:	7dfb      	ldrb	r3, [r7, #23]
}
 800c988:	4618      	mov	r0, r3
 800c98a:	371c      	adds	r7, #28
 800c98c:	46bd      	mov	sp, r7
 800c98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c992:	4770      	bx	lr

0800c994 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c994:	b480      	push	{r7}
 800c996:	b087      	sub	sp, #28
 800c998:	af00      	add	r7, sp, #0
 800c99a:	60f8      	str	r0, [r7, #12]
 800c99c:	60b9      	str	r1, [r7, #8]
 800c99e:	4613      	mov	r3, r2
 800c9a0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	3301      	adds	r3, #1
 800c9a6:	781b      	ldrb	r3, [r3, #0]
 800c9a8:	2b03      	cmp	r3, #3
 800c9aa:	d120      	bne.n	800c9ee <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	781b      	ldrb	r3, [r3, #0]
 800c9b0:	1e9a      	subs	r2, r3, #2
 800c9b2:	88fb      	ldrh	r3, [r7, #6]
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	bf28      	it	cs
 800c9b8:	4613      	movcs	r3, r2
 800c9ba:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	3302      	adds	r3, #2
 800c9c0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	82fb      	strh	r3, [r7, #22]
 800c9c6:	e00b      	b.n	800c9e0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c9c8:	8afb      	ldrh	r3, [r7, #22]
 800c9ca:	68fa      	ldr	r2, [r7, #12]
 800c9cc:	4413      	add	r3, r2
 800c9ce:	781a      	ldrb	r2, [r3, #0]
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	3301      	adds	r3, #1
 800c9d8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c9da:	8afb      	ldrh	r3, [r7, #22]
 800c9dc:	3302      	adds	r3, #2
 800c9de:	82fb      	strh	r3, [r7, #22]
 800c9e0:	8afa      	ldrh	r2, [r7, #22]
 800c9e2:	8abb      	ldrh	r3, [r7, #20]
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	d3ef      	bcc.n	800c9c8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	701a      	strb	r2, [r3, #0]
  }
}
 800c9ee:	bf00      	nop
 800c9f0:	371c      	adds	r7, #28
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f8:	4770      	bx	lr

0800c9fa <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800c9fa:	b480      	push	{r7}
 800c9fc:	b085      	sub	sp, #20
 800c9fe:	af00      	add	r7, sp, #0
 800ca00:	6078      	str	r0, [r7, #4]
 800ca02:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	881a      	ldrh	r2, [r3, #0]
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	781b      	ldrb	r3, [r3, #0]
 800ca0c:	b29b      	uxth	r3, r3
 800ca0e:	4413      	add	r3, r2
 800ca10:	b29a      	uxth	r2, r3
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	781b      	ldrb	r3, [r3, #0]
 800ca1a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	4413      	add	r3, r2
 800ca20:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ca22:	68fb      	ldr	r3, [r7, #12]
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3714      	adds	r7, #20
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2e:	4770      	bx	lr

0800ca30 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b086      	sub	sp, #24
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	60f8      	str	r0, [r7, #12]
 800ca38:	60b9      	str	r1, [r7, #8]
 800ca3a:	4613      	mov	r3, r2
 800ca3c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ca3e:	2301      	movs	r3, #1
 800ca40:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	789b      	ldrb	r3, [r3, #2]
 800ca46:	2b01      	cmp	r3, #1
 800ca48:	d002      	beq.n	800ca50 <USBH_CtlReq+0x20>
 800ca4a:	2b02      	cmp	r3, #2
 800ca4c:	d01d      	beq.n	800ca8a <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800ca4e:	e043      	b.n	800cad8 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	68ba      	ldr	r2, [r7, #8]
 800ca54:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	88fa      	ldrh	r2, [r7, #6]
 800ca5a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	2201      	movs	r2, #1
 800ca60:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	2202      	movs	r2, #2
 800ca66:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ca68:	2301      	movs	r3, #1
 800ca6a:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	2203      	movs	r2, #3
 800ca70:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ca80:	2200      	movs	r2, #0
 800ca82:	4619      	mov	r1, r3
 800ca84:	f000 fc62 	bl	800d34c <osMessagePut>
      break;
 800ca88:	e026      	b.n	800cad8 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800ca8a:	68f8      	ldr	r0, [r7, #12]
 800ca8c:	f000 f82a 	bl	800cae4 <USBH_HandleControl>
 800ca90:	4603      	mov	r3, r0
 800ca92:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ca94:	7dfb      	ldrb	r3, [r7, #23]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d002      	beq.n	800caa0 <USBH_CtlReq+0x70>
 800ca9a:	7dfb      	ldrb	r3, [r7, #23]
 800ca9c:	2b03      	cmp	r3, #3
 800ca9e:	d106      	bne.n	800caae <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	2201      	movs	r2, #1
 800caa4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	2200      	movs	r2, #0
 800caaa:	761a      	strb	r2, [r3, #24]
 800caac:	e005      	b.n	800caba <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800caae:	7dfb      	ldrb	r3, [r7, #23]
 800cab0:	2b02      	cmp	r3, #2
 800cab2:	d102      	bne.n	800caba <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	2201      	movs	r2, #1
 800cab8:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	2203      	movs	r2, #3
 800cabe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cace:	2200      	movs	r2, #0
 800cad0:	4619      	mov	r1, r3
 800cad2:	f000 fc3b 	bl	800d34c <osMessagePut>
      break;
 800cad6:	bf00      	nop
  }
  return status;
 800cad8:	7dfb      	ldrb	r3, [r7, #23]
}
 800cada:	4618      	mov	r0, r3
 800cadc:	3718      	adds	r7, #24
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}
	...

0800cae4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b086      	sub	sp, #24
 800cae8:	af02      	add	r7, sp, #8
 800caea:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800caec:	2301      	movs	r3, #1
 800caee:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800caf0:	2300      	movs	r3, #0
 800caf2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	7e1b      	ldrb	r3, [r3, #24]
 800caf8:	3b01      	subs	r3, #1
 800cafa:	2b0a      	cmp	r3, #10
 800cafc:	f200 8229 	bhi.w	800cf52 <USBH_HandleControl+0x46e>
 800cb00:	a201      	add	r2, pc, #4	; (adr r2, 800cb08 <USBH_HandleControl+0x24>)
 800cb02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb06:	bf00      	nop
 800cb08:	0800cb35 	.word	0x0800cb35
 800cb0c:	0800cb4f 	.word	0x0800cb4f
 800cb10:	0800cbf1 	.word	0x0800cbf1
 800cb14:	0800cc17 	.word	0x0800cc17
 800cb18:	0800cca3 	.word	0x0800cca3
 800cb1c:	0800cccd 	.word	0x0800cccd
 800cb20:	0800cd8f 	.word	0x0800cd8f
 800cb24:	0800cdb1 	.word	0x0800cdb1
 800cb28:	0800ce43 	.word	0x0800ce43
 800cb2c:	0800ce69 	.word	0x0800ce69
 800cb30:	0800cefb 	.word	0x0800cefb
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f103 0110 	add.w	r1, r3, #16
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	795b      	ldrb	r3, [r3, #5]
 800cb3e:	461a      	mov	r2, r3
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f000 fa17 	bl	800cf74 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2202      	movs	r2, #2
 800cb4a:	761a      	strb	r2, [r3, #24]
      break;
 800cb4c:	e20c      	b.n	800cf68 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	795b      	ldrb	r3, [r3, #5]
 800cb52:	4619      	mov	r1, r3
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f004 f877 	bl	8010c48 <USBH_LL_GetURBState>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800cb5e:	7bbb      	ldrb	r3, [r7, #14]
 800cb60:	2b01      	cmp	r3, #1
 800cb62:	d12c      	bne.n	800cbbe <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	7c1b      	ldrb	r3, [r3, #16]
 800cb68:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cb6c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	8adb      	ldrh	r3, [r3, #22]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d00a      	beq.n	800cb8c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800cb76:	7b7b      	ldrb	r3, [r7, #13]
 800cb78:	2b80      	cmp	r3, #128	; 0x80
 800cb7a:	d103      	bne.n	800cb84 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2203      	movs	r2, #3
 800cb80:	761a      	strb	r2, [r3, #24]
 800cb82:	e00d      	b.n	800cba0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2205      	movs	r2, #5
 800cb88:	761a      	strb	r2, [r3, #24]
 800cb8a:	e009      	b.n	800cba0 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800cb8c:	7b7b      	ldrb	r3, [r7, #13]
 800cb8e:	2b80      	cmp	r3, #128	; 0x80
 800cb90:	d103      	bne.n	800cb9a <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2209      	movs	r2, #9
 800cb96:	761a      	strb	r2, [r3, #24]
 800cb98:	e002      	b.n	800cba0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2207      	movs	r2, #7
 800cb9e:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2203      	movs	r2, #3
 800cba4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	4619      	mov	r1, r3
 800cbb8:	f000 fbc8 	bl	800d34c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cbbc:	e1cb      	b.n	800cf56 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800cbbe:	7bbb      	ldrb	r3, [r7, #14]
 800cbc0:	2b04      	cmp	r3, #4
 800cbc2:	d003      	beq.n	800cbcc <USBH_HandleControl+0xe8>
 800cbc4:	7bbb      	ldrb	r3, [r7, #14]
 800cbc6:	2b02      	cmp	r3, #2
 800cbc8:	f040 81c5 	bne.w	800cf56 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	220b      	movs	r2, #11
 800cbd0:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2203      	movs	r2, #3
 800cbd6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	4619      	mov	r1, r3
 800cbea:	f000 fbaf 	bl	800d34c <osMessagePut>
      break;
 800cbee:	e1b2      	b.n	800cf56 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cbf6:	b29a      	uxth	r2, r3
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6899      	ldr	r1, [r3, #8]
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	899a      	ldrh	r2, [r3, #12]
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	791b      	ldrb	r3, [r3, #4]
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f000 f9f2 	bl	800cff2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	2204      	movs	r2, #4
 800cc12:	761a      	strb	r2, [r3, #24]
      break;
 800cc14:	e1a8      	b.n	800cf68 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	791b      	ldrb	r3, [r3, #4]
 800cc1a:	4619      	mov	r1, r3
 800cc1c:	6878      	ldr	r0, [r7, #4]
 800cc1e:	f004 f813 	bl	8010c48 <USBH_LL_GetURBState>
 800cc22:	4603      	mov	r3, r0
 800cc24:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800cc26:	7bbb      	ldrb	r3, [r7, #14]
 800cc28:	2b01      	cmp	r3, #1
 800cc2a:	d110      	bne.n	800cc4e <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2209      	movs	r2, #9
 800cc30:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2203      	movs	r2, #3
 800cc36:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cc46:	2200      	movs	r2, #0
 800cc48:	4619      	mov	r1, r3
 800cc4a:	f000 fb7f 	bl	800d34c <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800cc4e:	7bbb      	ldrb	r3, [r7, #14]
 800cc50:	2b05      	cmp	r3, #5
 800cc52:	d110      	bne.n	800cc76 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800cc54:	2303      	movs	r3, #3
 800cc56:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2203      	movs	r2, #3
 800cc5c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	4619      	mov	r1, r3
 800cc70:	f000 fb6c 	bl	800d34c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cc74:	e171      	b.n	800cf5a <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800cc76:	7bbb      	ldrb	r3, [r7, #14]
 800cc78:	2b04      	cmp	r3, #4
 800cc7a:	f040 816e 	bne.w	800cf5a <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	220b      	movs	r2, #11
 800cc82:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2203      	movs	r2, #3
 800cc88:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cc98:	2200      	movs	r2, #0
 800cc9a:	4619      	mov	r1, r3
 800cc9c:	f000 fb56 	bl	800d34c <osMessagePut>
      break;
 800cca0:	e15b      	b.n	800cf5a <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	6899      	ldr	r1, [r3, #8]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	899a      	ldrh	r2, [r3, #12]
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	795b      	ldrb	r3, [r3, #5]
 800ccae:	2001      	movs	r0, #1
 800ccb0:	9000      	str	r0, [sp, #0]
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f000 f978 	bl	800cfa8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ccbe:	b29a      	uxth	r2, r3
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2206      	movs	r2, #6
 800ccc8:	761a      	strb	r2, [r3, #24]
      break;
 800ccca:	e14d      	b.n	800cf68 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	795b      	ldrb	r3, [r3, #5]
 800ccd0:	4619      	mov	r1, r3
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f003 ffb8 	bl	8010c48 <USBH_LL_GetURBState>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ccdc:	7bbb      	ldrb	r3, [r7, #14]
 800ccde:	2b01      	cmp	r3, #1
 800cce0:	d111      	bne.n	800cd06 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	2207      	movs	r2, #7
 800cce6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2203      	movs	r2, #3
 800ccec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	4619      	mov	r1, r3
 800cd00:	f000 fb24 	bl	800d34c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cd04:	e12b      	b.n	800cf5e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800cd06:	7bbb      	ldrb	r3, [r7, #14]
 800cd08:	2b05      	cmp	r3, #5
 800cd0a:	d113      	bne.n	800cd34 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	220c      	movs	r2, #12
 800cd10:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800cd12:	2303      	movs	r3, #3
 800cd14:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2203      	movs	r2, #3
 800cd1a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	4619      	mov	r1, r3
 800cd2e:	f000 fb0d 	bl	800d34c <osMessagePut>
      break;
 800cd32:	e114      	b.n	800cf5e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cd34:	7bbb      	ldrb	r3, [r7, #14]
 800cd36:	2b02      	cmp	r3, #2
 800cd38:	d111      	bne.n	800cd5e <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2205      	movs	r2, #5
 800cd3e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2203      	movs	r2, #3
 800cd44:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cd54:	2200      	movs	r2, #0
 800cd56:	4619      	mov	r1, r3
 800cd58:	f000 faf8 	bl	800d34c <osMessagePut>
      break;
 800cd5c:	e0ff      	b.n	800cf5e <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800cd5e:	7bbb      	ldrb	r3, [r7, #14]
 800cd60:	2b04      	cmp	r3, #4
 800cd62:	f040 80fc 	bne.w	800cf5e <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	220b      	movs	r2, #11
 800cd6a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800cd6c:	2302      	movs	r3, #2
 800cd6e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2203      	movs	r2, #3
 800cd74:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cd84:	2200      	movs	r2, #0
 800cd86:	4619      	mov	r1, r3
 800cd88:	f000 fae0 	bl	800d34c <osMessagePut>
      break;
 800cd8c:	e0e7      	b.n	800cf5e <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	791b      	ldrb	r3, [r3, #4]
 800cd92:	2200      	movs	r2, #0
 800cd94:	2100      	movs	r1, #0
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f000 f92b 	bl	800cff2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800cda2:	b29a      	uxth	r2, r3
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2208      	movs	r2, #8
 800cdac:	761a      	strb	r2, [r3, #24]

      break;
 800cdae:	e0db      	b.n	800cf68 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	791b      	ldrb	r3, [r3, #4]
 800cdb4:	4619      	mov	r1, r3
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f003 ff46 	bl	8010c48 <USBH_LL_GetURBState>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800cdc0:	7bbb      	ldrb	r3, [r7, #14]
 800cdc2:	2b01      	cmp	r3, #1
 800cdc4:	d113      	bne.n	800cdee <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	220d      	movs	r2, #13
 800cdca:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2203      	movs	r2, #3
 800cdd4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cde4:	2200      	movs	r2, #0
 800cde6:	4619      	mov	r1, r3
 800cde8:	f000 fab0 	bl	800d34c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cdec:	e0b9      	b.n	800cf62 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800cdee:	7bbb      	ldrb	r3, [r7, #14]
 800cdf0:	2b04      	cmp	r3, #4
 800cdf2:	d111      	bne.n	800ce18 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	220b      	movs	r2, #11
 800cdf8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2203      	movs	r2, #3
 800cdfe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ce0e:	2200      	movs	r2, #0
 800ce10:	4619      	mov	r1, r3
 800ce12:	f000 fa9b 	bl	800d34c <osMessagePut>
      break;
 800ce16:	e0a4      	b.n	800cf62 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800ce18:	7bbb      	ldrb	r3, [r7, #14]
 800ce1a:	2b05      	cmp	r3, #5
 800ce1c:	f040 80a1 	bne.w	800cf62 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800ce20:	2303      	movs	r3, #3
 800ce22:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2203      	movs	r2, #3
 800ce28:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ce38:	2200      	movs	r2, #0
 800ce3a:	4619      	mov	r1, r3
 800ce3c:	f000 fa86 	bl	800d34c <osMessagePut>
      break;
 800ce40:	e08f      	b.n	800cf62 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	795b      	ldrb	r3, [r3, #5]
 800ce46:	2201      	movs	r2, #1
 800ce48:	9200      	str	r2, [sp, #0]
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	2100      	movs	r1, #0
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f000 f8aa 	bl	800cfa8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ce5a:	b29a      	uxth	r2, r3
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	220a      	movs	r2, #10
 800ce64:	761a      	strb	r2, [r3, #24]
      break;
 800ce66:	e07f      	b.n	800cf68 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	795b      	ldrb	r3, [r3, #5]
 800ce6c:	4619      	mov	r1, r3
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f003 feea 	bl	8010c48 <USBH_LL_GetURBState>
 800ce74:	4603      	mov	r3, r0
 800ce76:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ce78:	7bbb      	ldrb	r3, [r7, #14]
 800ce7a:	2b01      	cmp	r3, #1
 800ce7c:	d113      	bne.n	800cea6 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	220d      	movs	r2, #13
 800ce86:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2203      	movs	r2, #3
 800ce8c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	4619      	mov	r1, r3
 800cea0:	f000 fa54 	bl	800d34c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cea4:	e05f      	b.n	800cf66 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cea6:	7bbb      	ldrb	r3, [r7, #14]
 800cea8:	2b02      	cmp	r3, #2
 800ceaa:	d111      	bne.n	800ced0 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2209      	movs	r2, #9
 800ceb0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2203      	movs	r2, #3
 800ceb6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cec6:	2200      	movs	r2, #0
 800cec8:	4619      	mov	r1, r3
 800ceca:	f000 fa3f 	bl	800d34c <osMessagePut>
      break;
 800cece:	e04a      	b.n	800cf66 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800ced0:	7bbb      	ldrb	r3, [r7, #14]
 800ced2:	2b04      	cmp	r3, #4
 800ced4:	d147      	bne.n	800cf66 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	220b      	movs	r2, #11
 800ceda:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2203      	movs	r2, #3
 800cee0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cef0:	2200      	movs	r2, #0
 800cef2:	4619      	mov	r1, r3
 800cef4:	f000 fa2a 	bl	800d34c <osMessagePut>
      break;
 800cef8:	e035      	b.n	800cf66 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	7e5b      	ldrb	r3, [r3, #25]
 800cefe:	3301      	adds	r3, #1
 800cf00:	b2da      	uxtb	r2, r3
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	765a      	strb	r2, [r3, #25]
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	7e5b      	ldrb	r3, [r3, #25]
 800cf0a:	2b02      	cmp	r3, #2
 800cf0c:	d806      	bhi.n	800cf1c <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2201      	movs	r2, #1
 800cf12:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2201      	movs	r2, #1
 800cf18:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800cf1a:	e025      	b.n	800cf68 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cf22:	2106      	movs	r1, #6
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	795b      	ldrb	r3, [r3, #5]
 800cf32:	4619      	mov	r1, r3
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f000 f90d 	bl	800d154 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	791b      	ldrb	r3, [r3, #4]
 800cf3e:	4619      	mov	r1, r3
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f000 f907 	bl	800d154 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2200      	movs	r2, #0
 800cf4a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800cf4c:	2302      	movs	r3, #2
 800cf4e:	73fb      	strb	r3, [r7, #15]
      break;
 800cf50:	e00a      	b.n	800cf68 <USBH_HandleControl+0x484>

    default:
      break;
 800cf52:	bf00      	nop
 800cf54:	e008      	b.n	800cf68 <USBH_HandleControl+0x484>
      break;
 800cf56:	bf00      	nop
 800cf58:	e006      	b.n	800cf68 <USBH_HandleControl+0x484>
      break;
 800cf5a:	bf00      	nop
 800cf5c:	e004      	b.n	800cf68 <USBH_HandleControl+0x484>
      break;
 800cf5e:	bf00      	nop
 800cf60:	e002      	b.n	800cf68 <USBH_HandleControl+0x484>
      break;
 800cf62:	bf00      	nop
 800cf64:	e000      	b.n	800cf68 <USBH_HandleControl+0x484>
      break;
 800cf66:	bf00      	nop
  }

  return status;
 800cf68:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3710      	adds	r7, #16
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}
 800cf72:	bf00      	nop

0800cf74 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b088      	sub	sp, #32
 800cf78:	af04      	add	r7, sp, #16
 800cf7a:	60f8      	str	r0, [r7, #12]
 800cf7c:	60b9      	str	r1, [r7, #8]
 800cf7e:	4613      	mov	r3, r2
 800cf80:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cf82:	79f9      	ldrb	r1, [r7, #7]
 800cf84:	2300      	movs	r3, #0
 800cf86:	9303      	str	r3, [sp, #12]
 800cf88:	2308      	movs	r3, #8
 800cf8a:	9302      	str	r3, [sp, #8]
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	9301      	str	r3, [sp, #4]
 800cf90:	2300      	movs	r3, #0
 800cf92:	9300      	str	r3, [sp, #0]
 800cf94:	2300      	movs	r3, #0
 800cf96:	2200      	movs	r2, #0
 800cf98:	68f8      	ldr	r0, [r7, #12]
 800cf9a:	f003 fe24 	bl	8010be6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800cf9e:	2300      	movs	r3, #0
}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	3710      	adds	r7, #16
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}

0800cfa8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b088      	sub	sp, #32
 800cfac:	af04      	add	r7, sp, #16
 800cfae:	60f8      	str	r0, [r7, #12]
 800cfb0:	60b9      	str	r1, [r7, #8]
 800cfb2:	4611      	mov	r1, r2
 800cfb4:	461a      	mov	r2, r3
 800cfb6:	460b      	mov	r3, r1
 800cfb8:	80fb      	strh	r3, [r7, #6]
 800cfba:	4613      	mov	r3, r2
 800cfbc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d001      	beq.n	800cfcc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800cfc8:	2300      	movs	r3, #0
 800cfca:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cfcc:	7979      	ldrb	r1, [r7, #5]
 800cfce:	7e3b      	ldrb	r3, [r7, #24]
 800cfd0:	9303      	str	r3, [sp, #12]
 800cfd2:	88fb      	ldrh	r3, [r7, #6]
 800cfd4:	9302      	str	r3, [sp, #8]
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	9301      	str	r3, [sp, #4]
 800cfda:	2301      	movs	r3, #1
 800cfdc:	9300      	str	r3, [sp, #0]
 800cfde:	2300      	movs	r3, #0
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	68f8      	ldr	r0, [r7, #12]
 800cfe4:	f003 fdff 	bl	8010be6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800cfe8:	2300      	movs	r3, #0
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3710      	adds	r7, #16
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}

0800cff2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800cff2:	b580      	push	{r7, lr}
 800cff4:	b088      	sub	sp, #32
 800cff6:	af04      	add	r7, sp, #16
 800cff8:	60f8      	str	r0, [r7, #12]
 800cffa:	60b9      	str	r1, [r7, #8]
 800cffc:	4611      	mov	r1, r2
 800cffe:	461a      	mov	r2, r3
 800d000:	460b      	mov	r3, r1
 800d002:	80fb      	strh	r3, [r7, #6]
 800d004:	4613      	mov	r3, r2
 800d006:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d008:	7979      	ldrb	r1, [r7, #5]
 800d00a:	2300      	movs	r3, #0
 800d00c:	9303      	str	r3, [sp, #12]
 800d00e:	88fb      	ldrh	r3, [r7, #6]
 800d010:	9302      	str	r3, [sp, #8]
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	9301      	str	r3, [sp, #4]
 800d016:	2301      	movs	r3, #1
 800d018:	9300      	str	r3, [sp, #0]
 800d01a:	2300      	movs	r3, #0
 800d01c:	2201      	movs	r2, #1
 800d01e:	68f8      	ldr	r0, [r7, #12]
 800d020:	f003 fde1 	bl	8010be6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d024:	2300      	movs	r3, #0

}
 800d026:	4618      	mov	r0, r3
 800d028:	3710      	adds	r7, #16
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}

0800d02e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800d02e:	b580      	push	{r7, lr}
 800d030:	b088      	sub	sp, #32
 800d032:	af04      	add	r7, sp, #16
 800d034:	60f8      	str	r0, [r7, #12]
 800d036:	60b9      	str	r1, [r7, #8]
 800d038:	4611      	mov	r1, r2
 800d03a:	461a      	mov	r2, r3
 800d03c:	460b      	mov	r3, r1
 800d03e:	80fb      	strh	r3, [r7, #6]
 800d040:	4613      	mov	r3, r2
 800d042:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d001      	beq.n	800d052 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d04e:	2300      	movs	r3, #0
 800d050:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d052:	7979      	ldrb	r1, [r7, #5]
 800d054:	7e3b      	ldrb	r3, [r7, #24]
 800d056:	9303      	str	r3, [sp, #12]
 800d058:	88fb      	ldrh	r3, [r7, #6]
 800d05a:	9302      	str	r3, [sp, #8]
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	9301      	str	r3, [sp, #4]
 800d060:	2301      	movs	r3, #1
 800d062:	9300      	str	r3, [sp, #0]
 800d064:	2302      	movs	r3, #2
 800d066:	2200      	movs	r2, #0
 800d068:	68f8      	ldr	r0, [r7, #12]
 800d06a:	f003 fdbc 	bl	8010be6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d06e:	2300      	movs	r3, #0
}
 800d070:	4618      	mov	r0, r3
 800d072:	3710      	adds	r7, #16
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}

0800d078 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b088      	sub	sp, #32
 800d07c:	af04      	add	r7, sp, #16
 800d07e:	60f8      	str	r0, [r7, #12]
 800d080:	60b9      	str	r1, [r7, #8]
 800d082:	4611      	mov	r1, r2
 800d084:	461a      	mov	r2, r3
 800d086:	460b      	mov	r3, r1
 800d088:	80fb      	strh	r3, [r7, #6]
 800d08a:	4613      	mov	r3, r2
 800d08c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d08e:	7979      	ldrb	r1, [r7, #5]
 800d090:	2300      	movs	r3, #0
 800d092:	9303      	str	r3, [sp, #12]
 800d094:	88fb      	ldrh	r3, [r7, #6]
 800d096:	9302      	str	r3, [sp, #8]
 800d098:	68bb      	ldr	r3, [r7, #8]
 800d09a:	9301      	str	r3, [sp, #4]
 800d09c:	2301      	movs	r3, #1
 800d09e:	9300      	str	r3, [sp, #0]
 800d0a0:	2302      	movs	r3, #2
 800d0a2:	2201      	movs	r2, #1
 800d0a4:	68f8      	ldr	r0, [r7, #12]
 800d0a6:	f003 fd9e 	bl	8010be6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d0aa:	2300      	movs	r3, #0
}
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	3710      	adds	r7, #16
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}

0800d0b4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b086      	sub	sp, #24
 800d0b8:	af04      	add	r7, sp, #16
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	4608      	mov	r0, r1
 800d0be:	4611      	mov	r1, r2
 800d0c0:	461a      	mov	r2, r3
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	70fb      	strb	r3, [r7, #3]
 800d0c6:	460b      	mov	r3, r1
 800d0c8:	70bb      	strb	r3, [r7, #2]
 800d0ca:	4613      	mov	r3, r2
 800d0cc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d0ce:	7878      	ldrb	r0, [r7, #1]
 800d0d0:	78ba      	ldrb	r2, [r7, #2]
 800d0d2:	78f9      	ldrb	r1, [r7, #3]
 800d0d4:	8b3b      	ldrh	r3, [r7, #24]
 800d0d6:	9302      	str	r3, [sp, #8]
 800d0d8:	7d3b      	ldrb	r3, [r7, #20]
 800d0da:	9301      	str	r3, [sp, #4]
 800d0dc:	7c3b      	ldrb	r3, [r7, #16]
 800d0de:	9300      	str	r3, [sp, #0]
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f003 fd31 	bl	8010b4a <USBH_LL_OpenPipe>

  return USBH_OK;
 800d0e8:	2300      	movs	r3, #0
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	3708      	adds	r7, #8
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}

0800d0f2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d0f2:	b580      	push	{r7, lr}
 800d0f4:	b082      	sub	sp, #8
 800d0f6:	af00      	add	r7, sp, #0
 800d0f8:	6078      	str	r0, [r7, #4]
 800d0fa:	460b      	mov	r3, r1
 800d0fc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800d0fe:	78fb      	ldrb	r3, [r7, #3]
 800d100:	4619      	mov	r1, r3
 800d102:	6878      	ldr	r0, [r7, #4]
 800d104:	f003 fd50 	bl	8010ba8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800d108:	2300      	movs	r3, #0
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3708      	adds	r7, #8
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}

0800d112 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d112:	b580      	push	{r7, lr}
 800d114:	b084      	sub	sp, #16
 800d116:	af00      	add	r7, sp, #0
 800d118:	6078      	str	r0, [r7, #4]
 800d11a:	460b      	mov	r3, r1
 800d11c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	f000 f836 	bl	800d190 <USBH_GetFreePipe>
 800d124:	4603      	mov	r3, r0
 800d126:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d128:	89fb      	ldrh	r3, [r7, #14]
 800d12a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d12e:	4293      	cmp	r3, r2
 800d130:	d00a      	beq.n	800d148 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800d132:	78fa      	ldrb	r2, [r7, #3]
 800d134:	89fb      	ldrh	r3, [r7, #14]
 800d136:	f003 030f 	and.w	r3, r3, #15
 800d13a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d13e:	6879      	ldr	r1, [r7, #4]
 800d140:	33e0      	adds	r3, #224	; 0xe0
 800d142:	009b      	lsls	r3, r3, #2
 800d144:	440b      	add	r3, r1
 800d146:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d148:	89fb      	ldrh	r3, [r7, #14]
 800d14a:	b2db      	uxtb	r3, r3
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3710      	adds	r7, #16
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}

0800d154 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d154:	b480      	push	{r7}
 800d156:	b083      	sub	sp, #12
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
 800d15c:	460b      	mov	r3, r1
 800d15e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800d160:	78fb      	ldrb	r3, [r7, #3]
 800d162:	2b0f      	cmp	r3, #15
 800d164:	d80d      	bhi.n	800d182 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d166:	78fb      	ldrb	r3, [r7, #3]
 800d168:	687a      	ldr	r2, [r7, #4]
 800d16a:	33e0      	adds	r3, #224	; 0xe0
 800d16c:	009b      	lsls	r3, r3, #2
 800d16e:	4413      	add	r3, r2
 800d170:	685a      	ldr	r2, [r3, #4]
 800d172:	78fb      	ldrb	r3, [r7, #3]
 800d174:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d178:	6879      	ldr	r1, [r7, #4]
 800d17a:	33e0      	adds	r3, #224	; 0xe0
 800d17c:	009b      	lsls	r3, r3, #2
 800d17e:	440b      	add	r3, r1
 800d180:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d182:	2300      	movs	r3, #0
}
 800d184:	4618      	mov	r0, r3
 800d186:	370c      	adds	r7, #12
 800d188:	46bd      	mov	sp, r7
 800d18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18e:	4770      	bx	lr

0800d190 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d190:	b480      	push	{r7}
 800d192:	b085      	sub	sp, #20
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d198:	2300      	movs	r3, #0
 800d19a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800d19c:	2300      	movs	r3, #0
 800d19e:	73fb      	strb	r3, [r7, #15]
 800d1a0:	e00f      	b.n	800d1c2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d1a2:	7bfb      	ldrb	r3, [r7, #15]
 800d1a4:	687a      	ldr	r2, [r7, #4]
 800d1a6:	33e0      	adds	r3, #224	; 0xe0
 800d1a8:	009b      	lsls	r3, r3, #2
 800d1aa:	4413      	add	r3, r2
 800d1ac:	685b      	ldr	r3, [r3, #4]
 800d1ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d102      	bne.n	800d1bc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800d1b6:	7bfb      	ldrb	r3, [r7, #15]
 800d1b8:	b29b      	uxth	r3, r3
 800d1ba:	e007      	b.n	800d1cc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800d1bc:	7bfb      	ldrb	r3, [r7, #15]
 800d1be:	3301      	adds	r3, #1
 800d1c0:	73fb      	strb	r3, [r7, #15]
 800d1c2:	7bfb      	ldrb	r3, [r7, #15]
 800d1c4:	2b0f      	cmp	r3, #15
 800d1c6:	d9ec      	bls.n	800d1a2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d1c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	3714      	adds	r7, #20
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d6:	4770      	bx	lr

0800d1d8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d1d8:	b480      	push	{r7}
 800d1da:	b085      	sub	sp, #20
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	4603      	mov	r3, r0
 800d1e0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d1e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d1ea:	2b84      	cmp	r3, #132	; 0x84
 800d1ec:	d005      	beq.n	800d1fa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d1ee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	4413      	add	r3, r2
 800d1f6:	3303      	adds	r3, #3
 800d1f8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	3714      	adds	r7, #20
 800d200:	46bd      	mov	sp, r7
 800d202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d206:	4770      	bx	lr

0800d208 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800d208:	b480      	push	{r7}
 800d20a:	b083      	sub	sp, #12
 800d20c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d20e:	f3ef 8305 	mrs	r3, IPSR
 800d212:	607b      	str	r3, [r7, #4]
  return(result);
 800d214:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800d216:	2b00      	cmp	r3, #0
 800d218:	bf14      	ite	ne
 800d21a:	2301      	movne	r3, #1
 800d21c:	2300      	moveq	r3, #0
 800d21e:	b2db      	uxtb	r3, r3
}
 800d220:	4618      	mov	r0, r3
 800d222:	370c      	adds	r7, #12
 800d224:	46bd      	mov	sp, r7
 800d226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22a:	4770      	bx	lr

0800d22c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d230:	f001 fde6 	bl	800ee00 <vTaskStartScheduler>
  
  return osOK;
 800d234:	2300      	movs	r3, #0
}
 800d236:	4618      	mov	r0, r3
 800d238:	bd80      	pop	{r7, pc}

0800d23a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d23a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d23c:	b089      	sub	sp, #36	; 0x24
 800d23e:	af04      	add	r7, sp, #16
 800d240:	6078      	str	r0, [r7, #4]
 800d242:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	695b      	ldr	r3, [r3, #20]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d020      	beq.n	800d28e <osThreadCreate+0x54>
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	699b      	ldr	r3, [r3, #24]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d01c      	beq.n	800d28e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	685c      	ldr	r4, [r3, #4]
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681d      	ldr	r5, [r3, #0]
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	691e      	ldr	r6, [r3, #16]
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d266:	4618      	mov	r0, r3
 800d268:	f7ff ffb6 	bl	800d1d8 <makeFreeRtosPriority>
 800d26c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	695b      	ldr	r3, [r3, #20]
 800d272:	687a      	ldr	r2, [r7, #4]
 800d274:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d276:	9202      	str	r2, [sp, #8]
 800d278:	9301      	str	r3, [sp, #4]
 800d27a:	9100      	str	r1, [sp, #0]
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	4632      	mov	r2, r6
 800d280:	4629      	mov	r1, r5
 800d282:	4620      	mov	r0, r4
 800d284:	f001 fbea 	bl	800ea5c <xTaskCreateStatic>
 800d288:	4603      	mov	r3, r0
 800d28a:	60fb      	str	r3, [r7, #12]
 800d28c:	e01c      	b.n	800d2c8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	685c      	ldr	r4, [r3, #4]
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d29a:	b29e      	uxth	r6, r3
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f7ff ff98 	bl	800d1d8 <makeFreeRtosPriority>
 800d2a8:	4602      	mov	r2, r0
 800d2aa:	f107 030c 	add.w	r3, r7, #12
 800d2ae:	9301      	str	r3, [sp, #4]
 800d2b0:	9200      	str	r2, [sp, #0]
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	4632      	mov	r2, r6
 800d2b6:	4629      	mov	r1, r5
 800d2b8:	4620      	mov	r0, r4
 800d2ba:	f001 fc2c 	bl	800eb16 <xTaskCreate>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	2b01      	cmp	r3, #1
 800d2c2:	d001      	beq.n	800d2c8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	e000      	b.n	800d2ca <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
}
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	3714      	adds	r7, #20
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d2d2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d2d2:	b580      	push	{r7, lr}
 800d2d4:	b084      	sub	sp, #16
 800d2d6:	af00      	add	r7, sp, #0
 800d2d8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d001      	beq.n	800d2e8 <osDelay+0x16>
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	e000      	b.n	800d2ea <osDelay+0x18>
 800d2e8:	2301      	movs	r3, #1
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f001 fd54 	bl	800ed98 <vTaskDelay>
  
  return osOK;
 800d2f0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3710      	adds	r7, #16
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}

0800d2fa <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800d2fa:	b590      	push	{r4, r7, lr}
 800d2fc:	b085      	sub	sp, #20
 800d2fe:	af02      	add	r7, sp, #8
 800d300:	6078      	str	r0, [r7, #4]
 800d302:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	689b      	ldr	r3, [r3, #8]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d011      	beq.n	800d330 <osMessageCreate+0x36>
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	68db      	ldr	r3, [r3, #12]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d00d      	beq.n	800d330 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	6818      	ldr	r0, [r3, #0]
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	6859      	ldr	r1, [r3, #4]
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	689a      	ldr	r2, [r3, #8]
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	68db      	ldr	r3, [r3, #12]
 800d324:	2400      	movs	r4, #0
 800d326:	9400      	str	r4, [sp, #0]
 800d328:	f000 f9e0 	bl	800d6ec <xQueueGenericCreateStatic>
 800d32c:	4603      	mov	r3, r0
 800d32e:	e008      	b.n	800d342 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6818      	ldr	r0, [r3, #0]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	685b      	ldr	r3, [r3, #4]
 800d338:	2200      	movs	r2, #0
 800d33a:	4619      	mov	r1, r3
 800d33c:	f000 fa4e 	bl	800d7dc <xQueueGenericCreate>
 800d340:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800d342:	4618      	mov	r0, r3
 800d344:	370c      	adds	r7, #12
 800d346:	46bd      	mov	sp, r7
 800d348:	bd90      	pop	{r4, r7, pc}
	...

0800d34c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b086      	sub	sp, #24
 800d350:	af00      	add	r7, sp, #0
 800d352:	60f8      	str	r0, [r7, #12]
 800d354:	60b9      	str	r1, [r7, #8]
 800d356:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800d358:	2300      	movs	r3, #0
 800d35a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800d360:	697b      	ldr	r3, [r7, #20]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d101      	bne.n	800d36a <osMessagePut+0x1e>
    ticks = 1;
 800d366:	2301      	movs	r3, #1
 800d368:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800d36a:	f7ff ff4d 	bl	800d208 <inHandlerMode>
 800d36e:	4603      	mov	r3, r0
 800d370:	2b00      	cmp	r3, #0
 800d372:	d018      	beq.n	800d3a6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800d374:	f107 0210 	add.w	r2, r7, #16
 800d378:	f107 0108 	add.w	r1, r7, #8
 800d37c:	2300      	movs	r3, #0
 800d37e:	68f8      	ldr	r0, [r7, #12]
 800d380:	f000 fbb6 	bl	800daf0 <xQueueGenericSendFromISR>
 800d384:	4603      	mov	r3, r0
 800d386:	2b01      	cmp	r3, #1
 800d388:	d001      	beq.n	800d38e <osMessagePut+0x42>
      return osErrorOS;
 800d38a:	23ff      	movs	r3, #255	; 0xff
 800d38c:	e018      	b.n	800d3c0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d38e:	693b      	ldr	r3, [r7, #16]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d014      	beq.n	800d3be <osMessagePut+0x72>
 800d394:	4b0c      	ldr	r3, [pc, #48]	; (800d3c8 <osMessagePut+0x7c>)
 800d396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d39a:	601a      	str	r2, [r3, #0]
 800d39c:	f3bf 8f4f 	dsb	sy
 800d3a0:	f3bf 8f6f 	isb	sy
 800d3a4:	e00b      	b.n	800d3be <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800d3a6:	f107 0108 	add.w	r1, r7, #8
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	697a      	ldr	r2, [r7, #20]
 800d3ae:	68f8      	ldr	r0, [r7, #12]
 800d3b0:	f000 faa0 	bl	800d8f4 <xQueueGenericSend>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	2b01      	cmp	r3, #1
 800d3b8:	d001      	beq.n	800d3be <osMessagePut+0x72>
      return osErrorOS;
 800d3ba:	23ff      	movs	r3, #255	; 0xff
 800d3bc:	e000      	b.n	800d3c0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800d3be:	2300      	movs	r3, #0
}
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	3718      	adds	r7, #24
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}
 800d3c8:	e000ed04 	.word	0xe000ed04

0800d3cc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800d3cc:	b590      	push	{r4, r7, lr}
 800d3ce:	b08b      	sub	sp, #44	; 0x2c
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	60f8      	str	r0, [r7, #12]
 800d3d4:	60b9      	str	r1, [r7, #8]
 800d3d6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d10a      	bne.n	800d3fc <osMessageGet+0x30>
    event.status = osErrorParameter;
 800d3e6:	2380      	movs	r3, #128	; 0x80
 800d3e8:	617b      	str	r3, [r7, #20]
    return event;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	461c      	mov	r4, r3
 800d3ee:	f107 0314 	add.w	r3, r7, #20
 800d3f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d3f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d3fa:	e054      	b.n	800d4a6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800d400:	2300      	movs	r3, #0
 800d402:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d40a:	d103      	bne.n	800d414 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800d40c:	f04f 33ff 	mov.w	r3, #4294967295
 800d410:	627b      	str	r3, [r7, #36]	; 0x24
 800d412:	e009      	b.n	800d428 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d006      	beq.n	800d428 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800d41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d420:	2b00      	cmp	r3, #0
 800d422:	d101      	bne.n	800d428 <osMessageGet+0x5c>
      ticks = 1;
 800d424:	2301      	movs	r3, #1
 800d426:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800d428:	f7ff feee 	bl	800d208 <inHandlerMode>
 800d42c:	4603      	mov	r3, r0
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d01c      	beq.n	800d46c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800d432:	f107 0220 	add.w	r2, r7, #32
 800d436:	f107 0314 	add.w	r3, r7, #20
 800d43a:	3304      	adds	r3, #4
 800d43c:	4619      	mov	r1, r3
 800d43e:	68b8      	ldr	r0, [r7, #8]
 800d440:	f000 fdde 	bl	800e000 <xQueueReceiveFromISR>
 800d444:	4603      	mov	r3, r0
 800d446:	2b01      	cmp	r3, #1
 800d448:	d102      	bne.n	800d450 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800d44a:	2310      	movs	r3, #16
 800d44c:	617b      	str	r3, [r7, #20]
 800d44e:	e001      	b.n	800d454 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800d450:	2300      	movs	r3, #0
 800d452:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800d454:	6a3b      	ldr	r3, [r7, #32]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d01d      	beq.n	800d496 <osMessageGet+0xca>
 800d45a:	4b15      	ldr	r3, [pc, #84]	; (800d4b0 <osMessageGet+0xe4>)
 800d45c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d460:	601a      	str	r2, [r3, #0]
 800d462:	f3bf 8f4f 	dsb	sy
 800d466:	f3bf 8f6f 	isb	sy
 800d46a:	e014      	b.n	800d496 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800d46c:	f107 0314 	add.w	r3, r7, #20
 800d470:	3304      	adds	r3, #4
 800d472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d474:	4619      	mov	r1, r3
 800d476:	68b8      	ldr	r0, [r7, #8]
 800d478:	f000 fbd6 	bl	800dc28 <xQueueReceive>
 800d47c:	4603      	mov	r3, r0
 800d47e:	2b01      	cmp	r3, #1
 800d480:	d102      	bne.n	800d488 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800d482:	2310      	movs	r3, #16
 800d484:	617b      	str	r3, [r7, #20]
 800d486:	e006      	b.n	800d496 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800d488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d101      	bne.n	800d492 <osMessageGet+0xc6>
 800d48e:	2300      	movs	r3, #0
 800d490:	e000      	b.n	800d494 <osMessageGet+0xc8>
 800d492:	2340      	movs	r3, #64	; 0x40
 800d494:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	461c      	mov	r4, r3
 800d49a:	f107 0314 	add.w	r3, r7, #20
 800d49e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d4a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800d4a6:	68f8      	ldr	r0, [r7, #12]
 800d4a8:	372c      	adds	r7, #44	; 0x2c
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd90      	pop	{r4, r7, pc}
 800d4ae:	bf00      	nop
 800d4b0:	e000ed04 	.word	0xe000ed04

0800d4b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b083      	sub	sp, #12
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	f103 0208 	add.w	r2, r3, #8
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	f04f 32ff 	mov.w	r2, #4294967295
 800d4cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	f103 0208 	add.w	r2, r3, #8
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	f103 0208 	add.w	r2, r3, #8
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d4e8:	bf00      	nop
 800d4ea:	370c      	adds	r7, #12
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f2:	4770      	bx	lr

0800d4f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b083      	sub	sp, #12
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2200      	movs	r2, #0
 800d500:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d502:	bf00      	nop
 800d504:	370c      	adds	r7, #12
 800d506:	46bd      	mov	sp, r7
 800d508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50c:	4770      	bx	lr

0800d50e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d50e:	b480      	push	{r7}
 800d510:	b085      	sub	sp, #20
 800d512:	af00      	add	r7, sp, #0
 800d514:	6078      	str	r0, [r7, #4]
 800d516:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	685b      	ldr	r3, [r3, #4]
 800d51c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	68fa      	ldr	r2, [r7, #12]
 800d522:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	689a      	ldr	r2, [r3, #8]
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	689b      	ldr	r3, [r3, #8]
 800d530:	683a      	ldr	r2, [r7, #0]
 800d532:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	683a      	ldr	r2, [r7, #0]
 800d538:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	687a      	ldr	r2, [r7, #4]
 800d53e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	1c5a      	adds	r2, r3, #1
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	601a      	str	r2, [r3, #0]
}
 800d54a:	bf00      	nop
 800d54c:	3714      	adds	r7, #20
 800d54e:	46bd      	mov	sp, r7
 800d550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d554:	4770      	bx	lr

0800d556 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d556:	b480      	push	{r7}
 800d558:	b085      	sub	sp, #20
 800d55a:	af00      	add	r7, sp, #0
 800d55c:	6078      	str	r0, [r7, #4]
 800d55e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d566:	68bb      	ldr	r3, [r7, #8]
 800d568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d56c:	d103      	bne.n	800d576 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	691b      	ldr	r3, [r3, #16]
 800d572:	60fb      	str	r3, [r7, #12]
 800d574:	e00c      	b.n	800d590 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	3308      	adds	r3, #8
 800d57a:	60fb      	str	r3, [r7, #12]
 800d57c:	e002      	b.n	800d584 <vListInsert+0x2e>
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	685b      	ldr	r3, [r3, #4]
 800d582:	60fb      	str	r3, [r7, #12]
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	685b      	ldr	r3, [r3, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	68ba      	ldr	r2, [r7, #8]
 800d58c:	429a      	cmp	r2, r3
 800d58e:	d2f6      	bcs.n	800d57e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	685a      	ldr	r2, [r3, #4]
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	685b      	ldr	r3, [r3, #4]
 800d59c:	683a      	ldr	r2, [r7, #0]
 800d59e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	68fa      	ldr	r2, [r7, #12]
 800d5a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	683a      	ldr	r2, [r7, #0]
 800d5aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	687a      	ldr	r2, [r7, #4]
 800d5b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	1c5a      	adds	r2, r3, #1
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	601a      	str	r2, [r3, #0]
}
 800d5bc:	bf00      	nop
 800d5be:	3714      	adds	r7, #20
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c6:	4770      	bx	lr

0800d5c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d5c8:	b480      	push	{r7}
 800d5ca:	b085      	sub	sp, #20
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	691b      	ldr	r3, [r3, #16]
 800d5d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	685b      	ldr	r3, [r3, #4]
 800d5da:	687a      	ldr	r2, [r7, #4]
 800d5dc:	6892      	ldr	r2, [r2, #8]
 800d5de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	689b      	ldr	r3, [r3, #8]
 800d5e4:	687a      	ldr	r2, [r7, #4]
 800d5e6:	6852      	ldr	r2, [r2, #4]
 800d5e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	685b      	ldr	r3, [r3, #4]
 800d5ee:	687a      	ldr	r2, [r7, #4]
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	d103      	bne.n	800d5fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	689a      	ldr	r2, [r3, #8]
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2200      	movs	r2, #0
 800d600:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	1e5a      	subs	r2, r3, #1
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	681b      	ldr	r3, [r3, #0]
}
 800d610:	4618      	mov	r0, r3
 800d612:	3714      	adds	r7, #20
 800d614:	46bd      	mov	sp, r7
 800d616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61a:	4770      	bx	lr

0800d61c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b084      	sub	sp, #16
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
 800d624:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d10a      	bne.n	800d646 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d634:	f383 8811 	msr	BASEPRI, r3
 800d638:	f3bf 8f6f 	isb	sy
 800d63c:	f3bf 8f4f 	dsb	sy
 800d640:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d642:	bf00      	nop
 800d644:	e7fe      	b.n	800d644 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d646:	f002 fd95 	bl	8010174 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	681a      	ldr	r2, [r3, #0]
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d652:	68f9      	ldr	r1, [r7, #12]
 800d654:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d656:	fb01 f303 	mul.w	r3, r1, r3
 800d65a:	441a      	add	r2, r3
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	2200      	movs	r2, #0
 800d664:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	681a      	ldr	r2, [r3, #0]
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	681a      	ldr	r2, [r3, #0]
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d676:	3b01      	subs	r3, #1
 800d678:	68f9      	ldr	r1, [r7, #12]
 800d67a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d67c:	fb01 f303 	mul.w	r3, r1, r3
 800d680:	441a      	add	r2, r3
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	22ff      	movs	r2, #255	; 0xff
 800d68a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	22ff      	movs	r2, #255	; 0xff
 800d692:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d114      	bne.n	800d6c6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	691b      	ldr	r3, [r3, #16]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d01a      	beq.n	800d6da <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	3310      	adds	r3, #16
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f001 fe0f 	bl	800f2cc <xTaskRemoveFromEventList>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d012      	beq.n	800d6da <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d6b4:	4b0c      	ldr	r3, [pc, #48]	; (800d6e8 <xQueueGenericReset+0xcc>)
 800d6b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6ba:	601a      	str	r2, [r3, #0]
 800d6bc:	f3bf 8f4f 	dsb	sy
 800d6c0:	f3bf 8f6f 	isb	sy
 800d6c4:	e009      	b.n	800d6da <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	3310      	adds	r3, #16
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f7ff fef2 	bl	800d4b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	3324      	adds	r3, #36	; 0x24
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f7ff feed 	bl	800d4b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d6da:	f002 fd7b 	bl	80101d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d6de:	2301      	movs	r3, #1
}
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	3710      	adds	r7, #16
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bd80      	pop	{r7, pc}
 800d6e8:	e000ed04 	.word	0xe000ed04

0800d6ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b08e      	sub	sp, #56	; 0x38
 800d6f0:	af02      	add	r7, sp, #8
 800d6f2:	60f8      	str	r0, [r7, #12]
 800d6f4:	60b9      	str	r1, [r7, #8]
 800d6f6:	607a      	str	r2, [r7, #4]
 800d6f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d10a      	bne.n	800d716 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d704:	f383 8811 	msr	BASEPRI, r3
 800d708:	f3bf 8f6f 	isb	sy
 800d70c:	f3bf 8f4f 	dsb	sy
 800d710:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d712:	bf00      	nop
 800d714:	e7fe      	b.n	800d714 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d716:	683b      	ldr	r3, [r7, #0]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d10a      	bne.n	800d732 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d720:	f383 8811 	msr	BASEPRI, r3
 800d724:	f3bf 8f6f 	isb	sy
 800d728:	f3bf 8f4f 	dsb	sy
 800d72c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d72e:	bf00      	nop
 800d730:	e7fe      	b.n	800d730 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d002      	beq.n	800d73e <xQueueGenericCreateStatic+0x52>
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d001      	beq.n	800d742 <xQueueGenericCreateStatic+0x56>
 800d73e:	2301      	movs	r3, #1
 800d740:	e000      	b.n	800d744 <xQueueGenericCreateStatic+0x58>
 800d742:	2300      	movs	r3, #0
 800d744:	2b00      	cmp	r3, #0
 800d746:	d10a      	bne.n	800d75e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d74c:	f383 8811 	msr	BASEPRI, r3
 800d750:	f3bf 8f6f 	isb	sy
 800d754:	f3bf 8f4f 	dsb	sy
 800d758:	623b      	str	r3, [r7, #32]
}
 800d75a:	bf00      	nop
 800d75c:	e7fe      	b.n	800d75c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d102      	bne.n	800d76a <xQueueGenericCreateStatic+0x7e>
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d101      	bne.n	800d76e <xQueueGenericCreateStatic+0x82>
 800d76a:	2301      	movs	r3, #1
 800d76c:	e000      	b.n	800d770 <xQueueGenericCreateStatic+0x84>
 800d76e:	2300      	movs	r3, #0
 800d770:	2b00      	cmp	r3, #0
 800d772:	d10a      	bne.n	800d78a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d774:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d778:	f383 8811 	msr	BASEPRI, r3
 800d77c:	f3bf 8f6f 	isb	sy
 800d780:	f3bf 8f4f 	dsb	sy
 800d784:	61fb      	str	r3, [r7, #28]
}
 800d786:	bf00      	nop
 800d788:	e7fe      	b.n	800d788 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d78a:	2348      	movs	r3, #72	; 0x48
 800d78c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d78e:	697b      	ldr	r3, [r7, #20]
 800d790:	2b48      	cmp	r3, #72	; 0x48
 800d792:	d00a      	beq.n	800d7aa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d794:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d798:	f383 8811 	msr	BASEPRI, r3
 800d79c:	f3bf 8f6f 	isb	sy
 800d7a0:	f3bf 8f4f 	dsb	sy
 800d7a4:	61bb      	str	r3, [r7, #24]
}
 800d7a6:	bf00      	nop
 800d7a8:	e7fe      	b.n	800d7a8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d7aa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d00d      	beq.n	800d7d2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7b8:	2201      	movs	r2, #1
 800d7ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d7be:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7c4:	9300      	str	r3, [sp, #0]
 800d7c6:	4613      	mov	r3, r2
 800d7c8:	687a      	ldr	r2, [r7, #4]
 800d7ca:	68b9      	ldr	r1, [r7, #8]
 800d7cc:	68f8      	ldr	r0, [r7, #12]
 800d7ce:	f000 f83f 	bl	800d850 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3730      	adds	r7, #48	; 0x30
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}

0800d7dc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b08a      	sub	sp, #40	; 0x28
 800d7e0:	af02      	add	r7, sp, #8
 800d7e2:	60f8      	str	r0, [r7, #12]
 800d7e4:	60b9      	str	r1, [r7, #8]
 800d7e6:	4613      	mov	r3, r2
 800d7e8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d10a      	bne.n	800d806 <xQueueGenericCreate+0x2a>
	__asm volatile
 800d7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7f4:	f383 8811 	msr	BASEPRI, r3
 800d7f8:	f3bf 8f6f 	isb	sy
 800d7fc:	f3bf 8f4f 	dsb	sy
 800d800:	613b      	str	r3, [r7, #16]
}
 800d802:	bf00      	nop
 800d804:	e7fe      	b.n	800d804 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	68ba      	ldr	r2, [r7, #8]
 800d80a:	fb02 f303 	mul.w	r3, r2, r3
 800d80e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d810:	69fb      	ldr	r3, [r7, #28]
 800d812:	3348      	adds	r3, #72	; 0x48
 800d814:	4618      	mov	r0, r3
 800d816:	f002 fdcf 	bl	80103b8 <pvPortMalloc>
 800d81a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d81c:	69bb      	ldr	r3, [r7, #24]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d011      	beq.n	800d846 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d822:	69bb      	ldr	r3, [r7, #24]
 800d824:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d826:	697b      	ldr	r3, [r7, #20]
 800d828:	3348      	adds	r3, #72	; 0x48
 800d82a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d82c:	69bb      	ldr	r3, [r7, #24]
 800d82e:	2200      	movs	r2, #0
 800d830:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d834:	79fa      	ldrb	r2, [r7, #7]
 800d836:	69bb      	ldr	r3, [r7, #24]
 800d838:	9300      	str	r3, [sp, #0]
 800d83a:	4613      	mov	r3, r2
 800d83c:	697a      	ldr	r2, [r7, #20]
 800d83e:	68b9      	ldr	r1, [r7, #8]
 800d840:	68f8      	ldr	r0, [r7, #12]
 800d842:	f000 f805 	bl	800d850 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d846:	69bb      	ldr	r3, [r7, #24]
	}
 800d848:	4618      	mov	r0, r3
 800d84a:	3720      	adds	r7, #32
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd80      	pop	{r7, pc}

0800d850 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b084      	sub	sp, #16
 800d854:	af00      	add	r7, sp, #0
 800d856:	60f8      	str	r0, [r7, #12]
 800d858:	60b9      	str	r1, [r7, #8]
 800d85a:	607a      	str	r2, [r7, #4]
 800d85c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d85e:	68bb      	ldr	r3, [r7, #8]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d103      	bne.n	800d86c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d864:	69bb      	ldr	r3, [r7, #24]
 800d866:	69ba      	ldr	r2, [r7, #24]
 800d868:	601a      	str	r2, [r3, #0]
 800d86a:	e002      	b.n	800d872 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d86c:	69bb      	ldr	r3, [r7, #24]
 800d86e:	687a      	ldr	r2, [r7, #4]
 800d870:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d872:	69bb      	ldr	r3, [r7, #24]
 800d874:	68fa      	ldr	r2, [r7, #12]
 800d876:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d878:	69bb      	ldr	r3, [r7, #24]
 800d87a:	68ba      	ldr	r2, [r7, #8]
 800d87c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d87e:	2101      	movs	r1, #1
 800d880:	69b8      	ldr	r0, [r7, #24]
 800d882:	f7ff fecb 	bl	800d61c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d886:	bf00      	nop
 800d888:	3710      	adds	r7, #16
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bd80      	pop	{r7, pc}

0800d88e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d88e:	b580      	push	{r7, lr}
 800d890:	b082      	sub	sp, #8
 800d892:	af00      	add	r7, sp, #0
 800d894:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d00e      	beq.n	800d8ba <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2200      	movs	r2, #0
 800d8a0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	2100      	movs	r1, #0
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f000 f81d 	bl	800d8f4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d8ba:	bf00      	nop
 800d8bc:	3708      	adds	r7, #8
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd80      	pop	{r7, pc}

0800d8c2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d8c2:	b580      	push	{r7, lr}
 800d8c4:	b086      	sub	sp, #24
 800d8c6:	af00      	add	r7, sp, #0
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	617b      	str	r3, [r7, #20]
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d8d4:	79fb      	ldrb	r3, [r7, #7]
 800d8d6:	461a      	mov	r2, r3
 800d8d8:	6939      	ldr	r1, [r7, #16]
 800d8da:	6978      	ldr	r0, [r7, #20]
 800d8dc:	f7ff ff7e 	bl	800d7dc <xQueueGenericCreate>
 800d8e0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d8e2:	68f8      	ldr	r0, [r7, #12]
 800d8e4:	f7ff ffd3 	bl	800d88e <prvInitialiseMutex>

		return xNewQueue;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
	}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	3718      	adds	r7, #24
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}
	...

0800d8f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b08e      	sub	sp, #56	; 0x38
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	60f8      	str	r0, [r7, #12]
 800d8fc:	60b9      	str	r1, [r7, #8]
 800d8fe:	607a      	str	r2, [r7, #4]
 800d900:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d902:	2300      	movs	r3, #0
 800d904:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d10a      	bne.n	800d926 <xQueueGenericSend+0x32>
	__asm volatile
 800d910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d914:	f383 8811 	msr	BASEPRI, r3
 800d918:	f3bf 8f6f 	isb	sy
 800d91c:	f3bf 8f4f 	dsb	sy
 800d920:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d922:	bf00      	nop
 800d924:	e7fe      	b.n	800d924 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d926:	68bb      	ldr	r3, [r7, #8]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d103      	bne.n	800d934 <xQueueGenericSend+0x40>
 800d92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d92e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d930:	2b00      	cmp	r3, #0
 800d932:	d101      	bne.n	800d938 <xQueueGenericSend+0x44>
 800d934:	2301      	movs	r3, #1
 800d936:	e000      	b.n	800d93a <xQueueGenericSend+0x46>
 800d938:	2300      	movs	r3, #0
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d10a      	bne.n	800d954 <xQueueGenericSend+0x60>
	__asm volatile
 800d93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d942:	f383 8811 	msr	BASEPRI, r3
 800d946:	f3bf 8f6f 	isb	sy
 800d94a:	f3bf 8f4f 	dsb	sy
 800d94e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d950:	bf00      	nop
 800d952:	e7fe      	b.n	800d952 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	2b02      	cmp	r3, #2
 800d958:	d103      	bne.n	800d962 <xQueueGenericSend+0x6e>
 800d95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d95c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d95e:	2b01      	cmp	r3, #1
 800d960:	d101      	bne.n	800d966 <xQueueGenericSend+0x72>
 800d962:	2301      	movs	r3, #1
 800d964:	e000      	b.n	800d968 <xQueueGenericSend+0x74>
 800d966:	2300      	movs	r3, #0
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d10a      	bne.n	800d982 <xQueueGenericSend+0x8e>
	__asm volatile
 800d96c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d970:	f383 8811 	msr	BASEPRI, r3
 800d974:	f3bf 8f6f 	isb	sy
 800d978:	f3bf 8f4f 	dsb	sy
 800d97c:	623b      	str	r3, [r7, #32]
}
 800d97e:	bf00      	nop
 800d980:	e7fe      	b.n	800d980 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d982:	f001 fe97 	bl	800f6b4 <xTaskGetSchedulerState>
 800d986:	4603      	mov	r3, r0
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d102      	bne.n	800d992 <xQueueGenericSend+0x9e>
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d101      	bne.n	800d996 <xQueueGenericSend+0xa2>
 800d992:	2301      	movs	r3, #1
 800d994:	e000      	b.n	800d998 <xQueueGenericSend+0xa4>
 800d996:	2300      	movs	r3, #0
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d10a      	bne.n	800d9b2 <xQueueGenericSend+0xbe>
	__asm volatile
 800d99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9a0:	f383 8811 	msr	BASEPRI, r3
 800d9a4:	f3bf 8f6f 	isb	sy
 800d9a8:	f3bf 8f4f 	dsb	sy
 800d9ac:	61fb      	str	r3, [r7, #28]
}
 800d9ae:	bf00      	nop
 800d9b0:	e7fe      	b.n	800d9b0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d9b2:	f002 fbdf 	bl	8010174 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9be:	429a      	cmp	r2, r3
 800d9c0:	d302      	bcc.n	800d9c8 <xQueueGenericSend+0xd4>
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	2b02      	cmp	r3, #2
 800d9c6:	d129      	bne.n	800da1c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d9c8:	683a      	ldr	r2, [r7, #0]
 800d9ca:	68b9      	ldr	r1, [r7, #8]
 800d9cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d9ce:	f000 fbaf 	bl	800e130 <prvCopyDataToQueue>
 800d9d2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d010      	beq.n	800d9fe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9de:	3324      	adds	r3, #36	; 0x24
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f001 fc73 	bl	800f2cc <xTaskRemoveFromEventList>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d013      	beq.n	800da14 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d9ec:	4b3f      	ldr	r3, [pc, #252]	; (800daec <xQueueGenericSend+0x1f8>)
 800d9ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9f2:	601a      	str	r2, [r3, #0]
 800d9f4:	f3bf 8f4f 	dsb	sy
 800d9f8:	f3bf 8f6f 	isb	sy
 800d9fc:	e00a      	b.n	800da14 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da00:	2b00      	cmp	r3, #0
 800da02:	d007      	beq.n	800da14 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800da04:	4b39      	ldr	r3, [pc, #228]	; (800daec <xQueueGenericSend+0x1f8>)
 800da06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da0a:	601a      	str	r2, [r3, #0]
 800da0c:	f3bf 8f4f 	dsb	sy
 800da10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800da14:	f002 fbde 	bl	80101d4 <vPortExitCritical>
				return pdPASS;
 800da18:	2301      	movs	r3, #1
 800da1a:	e063      	b.n	800dae4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d103      	bne.n	800da2a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800da22:	f002 fbd7 	bl	80101d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800da26:	2300      	movs	r3, #0
 800da28:	e05c      	b.n	800dae4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800da2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d106      	bne.n	800da3e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800da30:	f107 0314 	add.w	r3, r7, #20
 800da34:	4618      	mov	r0, r3
 800da36:	f001 fcd1 	bl	800f3dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800da3a:	2301      	movs	r3, #1
 800da3c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800da3e:	f002 fbc9 	bl	80101d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800da42:	f001 fa3d 	bl	800eec0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800da46:	f002 fb95 	bl	8010174 <vPortEnterCritical>
 800da4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800da50:	b25b      	sxtb	r3, r3
 800da52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da56:	d103      	bne.n	800da60 <xQueueGenericSend+0x16c>
 800da58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da5a:	2200      	movs	r2, #0
 800da5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da66:	b25b      	sxtb	r3, r3
 800da68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da6c:	d103      	bne.n	800da76 <xQueueGenericSend+0x182>
 800da6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da70:	2200      	movs	r2, #0
 800da72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da76:	f002 fbad 	bl	80101d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800da7a:	1d3a      	adds	r2, r7, #4
 800da7c:	f107 0314 	add.w	r3, r7, #20
 800da80:	4611      	mov	r1, r2
 800da82:	4618      	mov	r0, r3
 800da84:	f001 fcc0 	bl	800f408 <xTaskCheckForTimeOut>
 800da88:	4603      	mov	r3, r0
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d124      	bne.n	800dad8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800da8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800da90:	f000 fc46 	bl	800e320 <prvIsQueueFull>
 800da94:	4603      	mov	r3, r0
 800da96:	2b00      	cmp	r3, #0
 800da98:	d018      	beq.n	800dacc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800da9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da9c:	3310      	adds	r3, #16
 800da9e:	687a      	ldr	r2, [r7, #4]
 800daa0:	4611      	mov	r1, r2
 800daa2:	4618      	mov	r0, r3
 800daa4:	f001 fbee 	bl	800f284 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800daa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800daaa:	f000 fbd1 	bl	800e250 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800daae:	f001 fa15 	bl	800eedc <xTaskResumeAll>
 800dab2:	4603      	mov	r3, r0
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	f47f af7c 	bne.w	800d9b2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800daba:	4b0c      	ldr	r3, [pc, #48]	; (800daec <xQueueGenericSend+0x1f8>)
 800dabc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dac0:	601a      	str	r2, [r3, #0]
 800dac2:	f3bf 8f4f 	dsb	sy
 800dac6:	f3bf 8f6f 	isb	sy
 800daca:	e772      	b.n	800d9b2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800dacc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dace:	f000 fbbf 	bl	800e250 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dad2:	f001 fa03 	bl	800eedc <xTaskResumeAll>
 800dad6:	e76c      	b.n	800d9b2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800dad8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dada:	f000 fbb9 	bl	800e250 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dade:	f001 f9fd 	bl	800eedc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800dae2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3738      	adds	r7, #56	; 0x38
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}
 800daec:	e000ed04 	.word	0xe000ed04

0800daf0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b090      	sub	sp, #64	; 0x40
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	60f8      	str	r0, [r7, #12]
 800daf8:	60b9      	str	r1, [r7, #8]
 800dafa:	607a      	str	r2, [r7, #4]
 800dafc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800db02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db04:	2b00      	cmp	r3, #0
 800db06:	d10a      	bne.n	800db1e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800db08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db0c:	f383 8811 	msr	BASEPRI, r3
 800db10:	f3bf 8f6f 	isb	sy
 800db14:	f3bf 8f4f 	dsb	sy
 800db18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800db1a:	bf00      	nop
 800db1c:	e7fe      	b.n	800db1c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d103      	bne.n	800db2c <xQueueGenericSendFromISR+0x3c>
 800db24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d101      	bne.n	800db30 <xQueueGenericSendFromISR+0x40>
 800db2c:	2301      	movs	r3, #1
 800db2e:	e000      	b.n	800db32 <xQueueGenericSendFromISR+0x42>
 800db30:	2300      	movs	r3, #0
 800db32:	2b00      	cmp	r3, #0
 800db34:	d10a      	bne.n	800db4c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800db36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db3a:	f383 8811 	msr	BASEPRI, r3
 800db3e:	f3bf 8f6f 	isb	sy
 800db42:	f3bf 8f4f 	dsb	sy
 800db46:	627b      	str	r3, [r7, #36]	; 0x24
}
 800db48:	bf00      	nop
 800db4a:	e7fe      	b.n	800db4a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	2b02      	cmp	r3, #2
 800db50:	d103      	bne.n	800db5a <xQueueGenericSendFromISR+0x6a>
 800db52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db56:	2b01      	cmp	r3, #1
 800db58:	d101      	bne.n	800db5e <xQueueGenericSendFromISR+0x6e>
 800db5a:	2301      	movs	r3, #1
 800db5c:	e000      	b.n	800db60 <xQueueGenericSendFromISR+0x70>
 800db5e:	2300      	movs	r3, #0
 800db60:	2b00      	cmp	r3, #0
 800db62:	d10a      	bne.n	800db7a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800db64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db68:	f383 8811 	msr	BASEPRI, r3
 800db6c:	f3bf 8f6f 	isb	sy
 800db70:	f3bf 8f4f 	dsb	sy
 800db74:	623b      	str	r3, [r7, #32]
}
 800db76:	bf00      	nop
 800db78:	e7fe      	b.n	800db78 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800db7a:	f002 fbdd 	bl	8010338 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800db7e:	f3ef 8211 	mrs	r2, BASEPRI
 800db82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db86:	f383 8811 	msr	BASEPRI, r3
 800db8a:	f3bf 8f6f 	isb	sy
 800db8e:	f3bf 8f4f 	dsb	sy
 800db92:	61fa      	str	r2, [r7, #28]
 800db94:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800db96:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800db98:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800db9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dba2:	429a      	cmp	r2, r3
 800dba4:	d302      	bcc.n	800dbac <xQueueGenericSendFromISR+0xbc>
 800dba6:	683b      	ldr	r3, [r7, #0]
 800dba8:	2b02      	cmp	r3, #2
 800dbaa:	d12f      	bne.n	800dc0c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800dbac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dbb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dbb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbba:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800dbbc:	683a      	ldr	r2, [r7, #0]
 800dbbe:	68b9      	ldr	r1, [r7, #8]
 800dbc0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dbc2:	f000 fab5 	bl	800e130 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800dbc6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800dbca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbce:	d112      	bne.n	800dbf6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dbd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d016      	beq.n	800dc06 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dbd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbda:	3324      	adds	r3, #36	; 0x24
 800dbdc:	4618      	mov	r0, r3
 800dbde:	f001 fb75 	bl	800f2cc <xTaskRemoveFromEventList>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d00e      	beq.n	800dc06 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d00b      	beq.n	800dc06 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2201      	movs	r2, #1
 800dbf2:	601a      	str	r2, [r3, #0]
 800dbf4:	e007      	b.n	800dc06 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800dbf6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dbfa:	3301      	adds	r3, #1
 800dbfc:	b2db      	uxtb	r3, r3
 800dbfe:	b25a      	sxtb	r2, r3
 800dc00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800dc06:	2301      	movs	r3, #1
 800dc08:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800dc0a:	e001      	b.n	800dc10 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc12:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dc14:	697b      	ldr	r3, [r7, #20]
 800dc16:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800dc1a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dc1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800dc1e:	4618      	mov	r0, r3
 800dc20:	3740      	adds	r7, #64	; 0x40
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}
	...

0800dc28 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b08c      	sub	sp, #48	; 0x30
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	60f8      	str	r0, [r7, #12]
 800dc30:	60b9      	str	r1, [r7, #8]
 800dc32:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800dc34:	2300      	movs	r3, #0
 800dc36:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dc3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d10a      	bne.n	800dc58 <xQueueReceive+0x30>
	__asm volatile
 800dc42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc46:	f383 8811 	msr	BASEPRI, r3
 800dc4a:	f3bf 8f6f 	isb	sy
 800dc4e:	f3bf 8f4f 	dsb	sy
 800dc52:	623b      	str	r3, [r7, #32]
}
 800dc54:	bf00      	nop
 800dc56:	e7fe      	b.n	800dc56 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d103      	bne.n	800dc66 <xQueueReceive+0x3e>
 800dc5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d101      	bne.n	800dc6a <xQueueReceive+0x42>
 800dc66:	2301      	movs	r3, #1
 800dc68:	e000      	b.n	800dc6c <xQueueReceive+0x44>
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d10a      	bne.n	800dc86 <xQueueReceive+0x5e>
	__asm volatile
 800dc70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc74:	f383 8811 	msr	BASEPRI, r3
 800dc78:	f3bf 8f6f 	isb	sy
 800dc7c:	f3bf 8f4f 	dsb	sy
 800dc80:	61fb      	str	r3, [r7, #28]
}
 800dc82:	bf00      	nop
 800dc84:	e7fe      	b.n	800dc84 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dc86:	f001 fd15 	bl	800f6b4 <xTaskGetSchedulerState>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d102      	bne.n	800dc96 <xQueueReceive+0x6e>
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d101      	bne.n	800dc9a <xQueueReceive+0x72>
 800dc96:	2301      	movs	r3, #1
 800dc98:	e000      	b.n	800dc9c <xQueueReceive+0x74>
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d10a      	bne.n	800dcb6 <xQueueReceive+0x8e>
	__asm volatile
 800dca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dca4:	f383 8811 	msr	BASEPRI, r3
 800dca8:	f3bf 8f6f 	isb	sy
 800dcac:	f3bf 8f4f 	dsb	sy
 800dcb0:	61bb      	str	r3, [r7, #24]
}
 800dcb2:	bf00      	nop
 800dcb4:	e7fe      	b.n	800dcb4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dcb6:	f002 fa5d 	bl	8010174 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dcba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcbe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dcc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d01f      	beq.n	800dd06 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dcc6:	68b9      	ldr	r1, [r7, #8]
 800dcc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcca:	f000 fa9b 	bl	800e204 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dcce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcd0:	1e5a      	subs	r2, r3, #1
 800dcd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dcd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd8:	691b      	ldr	r3, [r3, #16]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d00f      	beq.n	800dcfe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dcde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dce0:	3310      	adds	r3, #16
 800dce2:	4618      	mov	r0, r3
 800dce4:	f001 faf2 	bl	800f2cc <xTaskRemoveFromEventList>
 800dce8:	4603      	mov	r3, r0
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d007      	beq.n	800dcfe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dcee:	4b3d      	ldr	r3, [pc, #244]	; (800dde4 <xQueueReceive+0x1bc>)
 800dcf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcf4:	601a      	str	r2, [r3, #0]
 800dcf6:	f3bf 8f4f 	dsb	sy
 800dcfa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dcfe:	f002 fa69 	bl	80101d4 <vPortExitCritical>
				return pdPASS;
 800dd02:	2301      	movs	r3, #1
 800dd04:	e069      	b.n	800ddda <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d103      	bne.n	800dd14 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dd0c:	f002 fa62 	bl	80101d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dd10:	2300      	movs	r3, #0
 800dd12:	e062      	b.n	800ddda <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dd14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d106      	bne.n	800dd28 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dd1a:	f107 0310 	add.w	r3, r7, #16
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f001 fb5c 	bl	800f3dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dd24:	2301      	movs	r3, #1
 800dd26:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dd28:	f002 fa54 	bl	80101d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dd2c:	f001 f8c8 	bl	800eec0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dd30:	f002 fa20 	bl	8010174 <vPortEnterCritical>
 800dd34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd3a:	b25b      	sxtb	r3, r3
 800dd3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd40:	d103      	bne.n	800dd4a <xQueueReceive+0x122>
 800dd42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd44:	2200      	movs	r2, #0
 800dd46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dd50:	b25b      	sxtb	r3, r3
 800dd52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd56:	d103      	bne.n	800dd60 <xQueueReceive+0x138>
 800dd58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dd60:	f002 fa38 	bl	80101d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dd64:	1d3a      	adds	r2, r7, #4
 800dd66:	f107 0310 	add.w	r3, r7, #16
 800dd6a:	4611      	mov	r1, r2
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f001 fb4b 	bl	800f408 <xTaskCheckForTimeOut>
 800dd72:	4603      	mov	r3, r0
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d123      	bne.n	800ddc0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dd78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd7a:	f000 fabb 	bl	800e2f4 <prvIsQueueEmpty>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d017      	beq.n	800ddb4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dd84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd86:	3324      	adds	r3, #36	; 0x24
 800dd88:	687a      	ldr	r2, [r7, #4]
 800dd8a:	4611      	mov	r1, r2
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	f001 fa79 	bl	800f284 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dd92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd94:	f000 fa5c 	bl	800e250 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dd98:	f001 f8a0 	bl	800eedc <xTaskResumeAll>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d189      	bne.n	800dcb6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800dda2:	4b10      	ldr	r3, [pc, #64]	; (800dde4 <xQueueReceive+0x1bc>)
 800dda4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dda8:	601a      	str	r2, [r3, #0]
 800ddaa:	f3bf 8f4f 	dsb	sy
 800ddae:	f3bf 8f6f 	isb	sy
 800ddb2:	e780      	b.n	800dcb6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ddb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddb6:	f000 fa4b 	bl	800e250 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ddba:	f001 f88f 	bl	800eedc <xTaskResumeAll>
 800ddbe:	e77a      	b.n	800dcb6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ddc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddc2:	f000 fa45 	bl	800e250 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ddc6:	f001 f889 	bl	800eedc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ddca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddcc:	f000 fa92 	bl	800e2f4 <prvIsQueueEmpty>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	f43f af6f 	beq.w	800dcb6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ddd8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ddda:	4618      	mov	r0, r3
 800dddc:	3730      	adds	r7, #48	; 0x30
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}
 800dde2:	bf00      	nop
 800dde4:	e000ed04 	.word	0xe000ed04

0800dde8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b08e      	sub	sp, #56	; 0x38
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
 800ddf0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ddfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de00:	2b00      	cmp	r3, #0
 800de02:	d10a      	bne.n	800de1a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800de04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de08:	f383 8811 	msr	BASEPRI, r3
 800de0c:	f3bf 8f6f 	isb	sy
 800de10:	f3bf 8f4f 	dsb	sy
 800de14:	623b      	str	r3, [r7, #32]
}
 800de16:	bf00      	nop
 800de18:	e7fe      	b.n	800de18 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800de1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d00a      	beq.n	800de38 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800de22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de26:	f383 8811 	msr	BASEPRI, r3
 800de2a:	f3bf 8f6f 	isb	sy
 800de2e:	f3bf 8f4f 	dsb	sy
 800de32:	61fb      	str	r3, [r7, #28]
}
 800de34:	bf00      	nop
 800de36:	e7fe      	b.n	800de36 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800de38:	f001 fc3c 	bl	800f6b4 <xTaskGetSchedulerState>
 800de3c:	4603      	mov	r3, r0
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d102      	bne.n	800de48 <xQueueSemaphoreTake+0x60>
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d101      	bne.n	800de4c <xQueueSemaphoreTake+0x64>
 800de48:	2301      	movs	r3, #1
 800de4a:	e000      	b.n	800de4e <xQueueSemaphoreTake+0x66>
 800de4c:	2300      	movs	r3, #0
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d10a      	bne.n	800de68 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800de52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de56:	f383 8811 	msr	BASEPRI, r3
 800de5a:	f3bf 8f6f 	isb	sy
 800de5e:	f3bf 8f4f 	dsb	sy
 800de62:	61bb      	str	r3, [r7, #24]
}
 800de64:	bf00      	nop
 800de66:	e7fe      	b.n	800de66 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800de68:	f002 f984 	bl	8010174 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800de6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de70:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800de72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de74:	2b00      	cmp	r3, #0
 800de76:	d024      	beq.n	800dec2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800de78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de7a:	1e5a      	subs	r2, r3, #1
 800de7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de7e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800de80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d104      	bne.n	800de92 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800de88:	f001 fdbc 	bl	800fa04 <pvTaskIncrementMutexHeldCount>
 800de8c:	4602      	mov	r2, r0
 800de8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de90:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de94:	691b      	ldr	r3, [r3, #16]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d00f      	beq.n	800deba <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de9c:	3310      	adds	r3, #16
 800de9e:	4618      	mov	r0, r3
 800dea0:	f001 fa14 	bl	800f2cc <xTaskRemoveFromEventList>
 800dea4:	4603      	mov	r3, r0
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d007      	beq.n	800deba <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800deaa:	4b54      	ldr	r3, [pc, #336]	; (800dffc <xQueueSemaphoreTake+0x214>)
 800deac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800deb0:	601a      	str	r2, [r3, #0]
 800deb2:	f3bf 8f4f 	dsb	sy
 800deb6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800deba:	f002 f98b 	bl	80101d4 <vPortExitCritical>
				return pdPASS;
 800debe:	2301      	movs	r3, #1
 800dec0:	e097      	b.n	800dff2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d111      	bne.n	800deec <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800dec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deca:	2b00      	cmp	r3, #0
 800decc:	d00a      	beq.n	800dee4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800dece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ded2:	f383 8811 	msr	BASEPRI, r3
 800ded6:	f3bf 8f6f 	isb	sy
 800deda:	f3bf 8f4f 	dsb	sy
 800dede:	617b      	str	r3, [r7, #20]
}
 800dee0:	bf00      	nop
 800dee2:	e7fe      	b.n	800dee2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800dee4:	f002 f976 	bl	80101d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dee8:	2300      	movs	r3, #0
 800deea:	e082      	b.n	800dff2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800deec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800deee:	2b00      	cmp	r3, #0
 800def0:	d106      	bne.n	800df00 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800def2:	f107 030c 	add.w	r3, r7, #12
 800def6:	4618      	mov	r0, r3
 800def8:	f001 fa70 	bl	800f3dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800defc:	2301      	movs	r3, #1
 800defe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800df00:	f002 f968 	bl	80101d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800df04:	f000 ffdc 	bl	800eec0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800df08:	f002 f934 	bl	8010174 <vPortEnterCritical>
 800df0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800df12:	b25b      	sxtb	r3, r3
 800df14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df18:	d103      	bne.n	800df22 <xQueueSemaphoreTake+0x13a>
 800df1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df1c:	2200      	movs	r2, #0
 800df1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800df22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800df28:	b25b      	sxtb	r3, r3
 800df2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df2e:	d103      	bne.n	800df38 <xQueueSemaphoreTake+0x150>
 800df30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df32:	2200      	movs	r2, #0
 800df34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800df38:	f002 f94c 	bl	80101d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800df3c:	463a      	mov	r2, r7
 800df3e:	f107 030c 	add.w	r3, r7, #12
 800df42:	4611      	mov	r1, r2
 800df44:	4618      	mov	r0, r3
 800df46:	f001 fa5f 	bl	800f408 <xTaskCheckForTimeOut>
 800df4a:	4603      	mov	r3, r0
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d132      	bne.n	800dfb6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800df50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df52:	f000 f9cf 	bl	800e2f4 <prvIsQueueEmpty>
 800df56:	4603      	mov	r3, r0
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d026      	beq.n	800dfaa <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800df5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d109      	bne.n	800df78 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800df64:	f002 f906 	bl	8010174 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800df68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df6a:	689b      	ldr	r3, [r3, #8]
 800df6c:	4618      	mov	r0, r3
 800df6e:	f001 fbbf 	bl	800f6f0 <xTaskPriorityInherit>
 800df72:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800df74:	f002 f92e 	bl	80101d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800df78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df7a:	3324      	adds	r3, #36	; 0x24
 800df7c:	683a      	ldr	r2, [r7, #0]
 800df7e:	4611      	mov	r1, r2
 800df80:	4618      	mov	r0, r3
 800df82:	f001 f97f 	bl	800f284 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800df86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df88:	f000 f962 	bl	800e250 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800df8c:	f000 ffa6 	bl	800eedc <xTaskResumeAll>
 800df90:	4603      	mov	r3, r0
 800df92:	2b00      	cmp	r3, #0
 800df94:	f47f af68 	bne.w	800de68 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800df98:	4b18      	ldr	r3, [pc, #96]	; (800dffc <xQueueSemaphoreTake+0x214>)
 800df9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df9e:	601a      	str	r2, [r3, #0]
 800dfa0:	f3bf 8f4f 	dsb	sy
 800dfa4:	f3bf 8f6f 	isb	sy
 800dfa8:	e75e      	b.n	800de68 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800dfaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dfac:	f000 f950 	bl	800e250 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dfb0:	f000 ff94 	bl	800eedc <xTaskResumeAll>
 800dfb4:	e758      	b.n	800de68 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800dfb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dfb8:	f000 f94a 	bl	800e250 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dfbc:	f000 ff8e 	bl	800eedc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dfc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dfc2:	f000 f997 	bl	800e2f4 <prvIsQueueEmpty>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	f43f af4d 	beq.w	800de68 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800dfce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d00d      	beq.n	800dff0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800dfd4:	f002 f8ce 	bl	8010174 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800dfd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dfda:	f000 f891 	bl	800e100 <prvGetDisinheritPriorityAfterTimeout>
 800dfde:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800dfe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfe2:	689b      	ldr	r3, [r3, #8]
 800dfe4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f001 fc7e 	bl	800f8e8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800dfec:	f002 f8f2 	bl	80101d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dff0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dff2:	4618      	mov	r0, r3
 800dff4:	3738      	adds	r7, #56	; 0x38
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd80      	pop	{r7, pc}
 800dffa:	bf00      	nop
 800dffc:	e000ed04 	.word	0xe000ed04

0800e000 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b08e      	sub	sp, #56	; 0x38
 800e004:	af00      	add	r7, sp, #0
 800e006:	60f8      	str	r0, [r7, #12]
 800e008:	60b9      	str	r1, [r7, #8]
 800e00a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e012:	2b00      	cmp	r3, #0
 800e014:	d10a      	bne.n	800e02c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800e016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e01a:	f383 8811 	msr	BASEPRI, r3
 800e01e:	f3bf 8f6f 	isb	sy
 800e022:	f3bf 8f4f 	dsb	sy
 800e026:	623b      	str	r3, [r7, #32]
}
 800e028:	bf00      	nop
 800e02a:	e7fe      	b.n	800e02a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e02c:	68bb      	ldr	r3, [r7, #8]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d103      	bne.n	800e03a <xQueueReceiveFromISR+0x3a>
 800e032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e036:	2b00      	cmp	r3, #0
 800e038:	d101      	bne.n	800e03e <xQueueReceiveFromISR+0x3e>
 800e03a:	2301      	movs	r3, #1
 800e03c:	e000      	b.n	800e040 <xQueueReceiveFromISR+0x40>
 800e03e:	2300      	movs	r3, #0
 800e040:	2b00      	cmp	r3, #0
 800e042:	d10a      	bne.n	800e05a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800e044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e048:	f383 8811 	msr	BASEPRI, r3
 800e04c:	f3bf 8f6f 	isb	sy
 800e050:	f3bf 8f4f 	dsb	sy
 800e054:	61fb      	str	r3, [r7, #28]
}
 800e056:	bf00      	nop
 800e058:	e7fe      	b.n	800e058 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e05a:	f002 f96d 	bl	8010338 <vPortValidateInterruptPriority>
	__asm volatile
 800e05e:	f3ef 8211 	mrs	r2, BASEPRI
 800e062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e066:	f383 8811 	msr	BASEPRI, r3
 800e06a:	f3bf 8f6f 	isb	sy
 800e06e:	f3bf 8f4f 	dsb	sy
 800e072:	61ba      	str	r2, [r7, #24]
 800e074:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e076:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e078:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e07e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e082:	2b00      	cmp	r3, #0
 800e084:	d02f      	beq.n	800e0e6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e088:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e08c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e090:	68b9      	ldr	r1, [r7, #8]
 800e092:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e094:	f000 f8b6 	bl	800e204 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e09a:	1e5a      	subs	r2, r3, #1
 800e09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e09e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e0a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e0a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0a8:	d112      	bne.n	800e0d0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ac:	691b      	ldr	r3, [r3, #16]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d016      	beq.n	800e0e0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0b4:	3310      	adds	r3, #16
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f001 f908 	bl	800f2cc <xTaskRemoveFromEventList>
 800e0bc:	4603      	mov	r3, r0
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d00e      	beq.n	800e0e0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d00b      	beq.n	800e0e0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2201      	movs	r2, #1
 800e0cc:	601a      	str	r2, [r3, #0]
 800e0ce:	e007      	b.n	800e0e0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e0d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0d4:	3301      	adds	r3, #1
 800e0d6:	b2db      	uxtb	r3, r3
 800e0d8:	b25a      	sxtb	r2, r3
 800e0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800e0e0:	2301      	movs	r3, #1
 800e0e2:	637b      	str	r3, [r7, #52]	; 0x34
 800e0e4:	e001      	b.n	800e0ea <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	637b      	str	r3, [r7, #52]	; 0x34
 800e0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e0ee:	693b      	ldr	r3, [r7, #16]
 800e0f0:	f383 8811 	msr	BASEPRI, r3
}
 800e0f4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e0f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	3738      	adds	r7, #56	; 0x38
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}

0800e100 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e100:	b480      	push	{r7}
 800e102:	b085      	sub	sp, #20
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d006      	beq.n	800e11e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	f1c3 0307 	rsb	r3, r3, #7
 800e11a:	60fb      	str	r3, [r7, #12]
 800e11c:	e001      	b.n	800e122 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e11e:	2300      	movs	r3, #0
 800e120:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e122:	68fb      	ldr	r3, [r7, #12]
	}
 800e124:	4618      	mov	r0, r3
 800e126:	3714      	adds	r7, #20
 800e128:	46bd      	mov	sp, r7
 800e12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12e:	4770      	bx	lr

0800e130 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b086      	sub	sp, #24
 800e134:	af00      	add	r7, sp, #0
 800e136:	60f8      	str	r0, [r7, #12]
 800e138:	60b9      	str	r1, [r7, #8]
 800e13a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e13c:	2300      	movs	r3, #0
 800e13e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e144:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d10d      	bne.n	800e16a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d14d      	bne.n	800e1f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	689b      	ldr	r3, [r3, #8]
 800e15a:	4618      	mov	r0, r3
 800e15c:	f001 fb3e 	bl	800f7dc <xTaskPriorityDisinherit>
 800e160:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	2200      	movs	r2, #0
 800e166:	609a      	str	r2, [r3, #8]
 800e168:	e043      	b.n	800e1f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d119      	bne.n	800e1a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	6858      	ldr	r0, [r3, #4]
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e178:	461a      	mov	r2, r3
 800e17a:	68b9      	ldr	r1, [r7, #8]
 800e17c:	f002 fe4c 	bl	8010e18 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	685a      	ldr	r2, [r3, #4]
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e188:	441a      	add	r2, r3
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	685a      	ldr	r2, [r3, #4]
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	689b      	ldr	r3, [r3, #8]
 800e196:	429a      	cmp	r2, r3
 800e198:	d32b      	bcc.n	800e1f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	681a      	ldr	r2, [r3, #0]
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	605a      	str	r2, [r3, #4]
 800e1a2:	e026      	b.n	800e1f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	68d8      	ldr	r0, [r3, #12]
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1ac:	461a      	mov	r2, r3
 800e1ae:	68b9      	ldr	r1, [r7, #8]
 800e1b0:	f002 fe32 	bl	8010e18 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	68da      	ldr	r2, [r3, #12]
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1bc:	425b      	negs	r3, r3
 800e1be:	441a      	add	r2, r3
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	68da      	ldr	r2, [r3, #12]
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	429a      	cmp	r2, r3
 800e1ce:	d207      	bcs.n	800e1e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	689a      	ldr	r2, [r3, #8]
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1d8:	425b      	negs	r3, r3
 800e1da:	441a      	add	r2, r3
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	2b02      	cmp	r3, #2
 800e1e4:	d105      	bne.n	800e1f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e1e6:	693b      	ldr	r3, [r7, #16]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d002      	beq.n	800e1f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e1ec:	693b      	ldr	r3, [r7, #16]
 800e1ee:	3b01      	subs	r3, #1
 800e1f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e1f2:	693b      	ldr	r3, [r7, #16]
 800e1f4:	1c5a      	adds	r2, r3, #1
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800e1fa:	697b      	ldr	r3, [r7, #20]
}
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	3718      	adds	r7, #24
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}

0800e204 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e204:	b580      	push	{r7, lr}
 800e206:	b082      	sub	sp, #8
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
 800e20c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e212:	2b00      	cmp	r3, #0
 800e214:	d018      	beq.n	800e248 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	68da      	ldr	r2, [r3, #12]
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e21e:	441a      	add	r2, r3
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	68da      	ldr	r2, [r3, #12]
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	689b      	ldr	r3, [r3, #8]
 800e22c:	429a      	cmp	r2, r3
 800e22e:	d303      	bcc.n	800e238 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681a      	ldr	r2, [r3, #0]
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	68d9      	ldr	r1, [r3, #12]
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e240:	461a      	mov	r2, r3
 800e242:	6838      	ldr	r0, [r7, #0]
 800e244:	f002 fde8 	bl	8010e18 <memcpy>
	}
}
 800e248:	bf00      	nop
 800e24a:	3708      	adds	r7, #8
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}

0800e250 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b084      	sub	sp, #16
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e258:	f001 ff8c 	bl	8010174 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e262:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e264:	e011      	b.n	800e28a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d012      	beq.n	800e294 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	3324      	adds	r3, #36	; 0x24
 800e272:	4618      	mov	r0, r3
 800e274:	f001 f82a 	bl	800f2cc <xTaskRemoveFromEventList>
 800e278:	4603      	mov	r3, r0
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d001      	beq.n	800e282 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e27e:	f001 f925 	bl	800f4cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e282:	7bfb      	ldrb	r3, [r7, #15]
 800e284:	3b01      	subs	r3, #1
 800e286:	b2db      	uxtb	r3, r3
 800e288:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e28a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	dce9      	bgt.n	800e266 <prvUnlockQueue+0x16>
 800e292:	e000      	b.n	800e296 <prvUnlockQueue+0x46>
					break;
 800e294:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	22ff      	movs	r2, #255	; 0xff
 800e29a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e29e:	f001 ff99 	bl	80101d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e2a2:	f001 ff67 	bl	8010174 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e2ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e2ae:	e011      	b.n	800e2d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	691b      	ldr	r3, [r3, #16]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d012      	beq.n	800e2de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	3310      	adds	r3, #16
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f001 f805 	bl	800f2cc <xTaskRemoveFromEventList>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d001      	beq.n	800e2cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e2c8:	f001 f900 	bl	800f4cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e2cc:	7bbb      	ldrb	r3, [r7, #14]
 800e2ce:	3b01      	subs	r3, #1
 800e2d0:	b2db      	uxtb	r3, r3
 800e2d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e2d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	dce9      	bgt.n	800e2b0 <prvUnlockQueue+0x60>
 800e2dc:	e000      	b.n	800e2e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e2de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	22ff      	movs	r2, #255	; 0xff
 800e2e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e2e8:	f001 ff74 	bl	80101d4 <vPortExitCritical>
}
 800e2ec:	bf00      	nop
 800e2ee:	3710      	adds	r7, #16
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bd80      	pop	{r7, pc}

0800e2f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b084      	sub	sp, #16
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e2fc:	f001 ff3a 	bl	8010174 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e304:	2b00      	cmp	r3, #0
 800e306:	d102      	bne.n	800e30e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e308:	2301      	movs	r3, #1
 800e30a:	60fb      	str	r3, [r7, #12]
 800e30c:	e001      	b.n	800e312 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e30e:	2300      	movs	r3, #0
 800e310:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e312:	f001 ff5f 	bl	80101d4 <vPortExitCritical>

	return xReturn;
 800e316:	68fb      	ldr	r3, [r7, #12]
}
 800e318:	4618      	mov	r0, r3
 800e31a:	3710      	adds	r7, #16
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bd80      	pop	{r7, pc}

0800e320 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b084      	sub	sp, #16
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e328:	f001 ff24 	bl	8010174 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e334:	429a      	cmp	r2, r3
 800e336:	d102      	bne.n	800e33e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e338:	2301      	movs	r3, #1
 800e33a:	60fb      	str	r3, [r7, #12]
 800e33c:	e001      	b.n	800e342 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e33e:	2300      	movs	r3, #0
 800e340:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e342:	f001 ff47 	bl	80101d4 <vPortExitCritical>

	return xReturn;
 800e346:	68fb      	ldr	r3, [r7, #12]
}
 800e348:	4618      	mov	r0, r3
 800e34a:	3710      	adds	r7, #16
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}

0800e350 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 800e350:	b580      	push	{r7, lr}
 800e352:	b08c      	sub	sp, #48	; 0x30
 800e354:	af02      	add	r7, sp, #8
 800e356:	60f8      	str	r0, [r7, #12]
 800e358:	60b9      	str	r1, [r7, #8]
 800e35a:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2b01      	cmp	r3, #1
 800e360:	d110      	bne.n	800e384 <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 800e362:	2301      	movs	r3, #1
 800e364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	2b04      	cmp	r3, #4
 800e36c:	d81b      	bhi.n	800e3a6 <xStreamBufferGenericCreate+0x56>
	__asm volatile
 800e36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e372:	f383 8811 	msr	BASEPRI, r3
 800e376:	f3bf 8f6f 	isb	sy
 800e37a:	f3bf 8f4f 	dsb	sy
 800e37e:	61fb      	str	r3, [r7, #28]
}
 800e380:	bf00      	nop
 800e382:	e7fe      	b.n	800e382 <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 800e384:	2300      	movs	r3, #0
 800e386:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d10a      	bne.n	800e3a6 <xStreamBufferGenericCreate+0x56>
	__asm volatile
 800e390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e394:	f383 8811 	msr	BASEPRI, r3
 800e398:	f3bf 8f6f 	isb	sy
 800e39c:	f3bf 8f4f 	dsb	sy
 800e3a0:	61bb      	str	r3, [r7, #24]
}
 800e3a2:	bf00      	nop
 800e3a4:	e7fe      	b.n	800e3a4 <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 800e3a6:	68ba      	ldr	r2, [r7, #8]
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	429a      	cmp	r2, r3
 800e3ac:	d90a      	bls.n	800e3c4 <xStreamBufferGenericCreate+0x74>
	__asm volatile
 800e3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3b2:	f383 8811 	msr	BASEPRI, r3
 800e3b6:	f3bf 8f6f 	isb	sy
 800e3ba:	f3bf 8f4f 	dsb	sy
 800e3be:	617b      	str	r3, [r7, #20]
}
 800e3c0:	bf00      	nop
 800e3c2:	e7fe      	b.n	800e3c2 <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 800e3c4:	68bb      	ldr	r3, [r7, #8]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d101      	bne.n	800e3ce <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 800e3ca:	2301      	movs	r3, #1
 800e3cc:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	3301      	adds	r3, #1
 800e3d2:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	3320      	adds	r3, #32
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f001 ffed 	bl	80103b8 <pvPortMalloc>
 800e3de:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 800e3e0:	6a3b      	ldr	r3, [r7, #32]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d00a      	beq.n	800e3fc <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 800e3e6:	6a3b      	ldr	r3, [r7, #32]
 800e3e8:	f103 0120 	add.w	r1, r3, #32
 800e3ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e3f0:	9300      	str	r3, [sp, #0]
 800e3f2:	68bb      	ldr	r3, [r7, #8]
 800e3f4:	68fa      	ldr	r2, [r7, #12]
 800e3f6:	6a38      	ldr	r0, [r7, #32]
 800e3f8:	f000 fafd 	bl	800e9f6 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 800e3fc:	6a3b      	ldr	r3, [r7, #32]
	}
 800e3fe:	4618      	mov	r0, r3
 800e400:	3728      	adds	r7, #40	; 0x28
 800e402:	46bd      	mov	sp, r7
 800e404:	bd80      	pop	{r7, pc}

0800e406 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 800e406:	b480      	push	{r7}
 800e408:	b087      	sub	sp, #28
 800e40a:	af00      	add	r7, sp, #0
 800e40c:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 800e412:	693b      	ldr	r3, [r7, #16]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d10a      	bne.n	800e42e <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 800e418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e41c:	f383 8811 	msr	BASEPRI, r3
 800e420:	f3bf 8f6f 	isb	sy
 800e424:	f3bf 8f4f 	dsb	sy
 800e428:	60fb      	str	r3, [r7, #12]
}
 800e42a:	bf00      	nop
 800e42c:	e7fe      	b.n	800e42c <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 800e42e:	693b      	ldr	r3, [r7, #16]
 800e430:	689a      	ldr	r2, [r3, #8]
 800e432:	693b      	ldr	r3, [r7, #16]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	4413      	add	r3, r2
 800e438:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 800e43a:	693b      	ldr	r3, [r7, #16]
 800e43c:	685b      	ldr	r3, [r3, #4]
 800e43e:	697a      	ldr	r2, [r7, #20]
 800e440:	1ad3      	subs	r3, r2, r3
 800e442:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 800e444:	697b      	ldr	r3, [r7, #20]
 800e446:	3b01      	subs	r3, #1
 800e448:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 800e44a:	693b      	ldr	r3, [r7, #16]
 800e44c:	689b      	ldr	r3, [r3, #8]
 800e44e:	697a      	ldr	r2, [r7, #20]
 800e450:	429a      	cmp	r2, r3
 800e452:	d304      	bcc.n	800e45e <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 800e454:	693b      	ldr	r3, [r7, #16]
 800e456:	689b      	ldr	r3, [r3, #8]
 800e458:	697a      	ldr	r2, [r7, #20]
 800e45a:	1ad3      	subs	r3, r2, r3
 800e45c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 800e45e:	697b      	ldr	r3, [r7, #20]
}
 800e460:	4618      	mov	r0, r3
 800e462:	371c      	adds	r7, #28
 800e464:	46bd      	mov	sp, r7
 800e466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46a:	4770      	bx	lr

0800e46c <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b090      	sub	sp, #64	; 0x40
 800e470:	af02      	add	r7, sp, #8
 800e472:	60f8      	str	r0, [r7, #12]
 800e474:	60b9      	str	r1, [r7, #8]
 800e476:	607a      	str	r2, [r7, #4]
 800e478:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 800e47e:	2300      	movs	r3, #0
 800e480:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 800e486:	68bb      	ldr	r3, [r7, #8]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d10a      	bne.n	800e4a2 <xStreamBufferSend+0x36>
	__asm volatile
 800e48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e490:	f383 8811 	msr	BASEPRI, r3
 800e494:	f3bf 8f6f 	isb	sy
 800e498:	f3bf 8f4f 	dsb	sy
 800e49c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e49e:	bf00      	nop
 800e4a0:	e7fe      	b.n	800e4a0 <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 800e4a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d10a      	bne.n	800e4be <xStreamBufferSend+0x52>
	__asm volatile
 800e4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ac:	f383 8811 	msr	BASEPRI, r3
 800e4b0:	f3bf 8f6f 	isb	sy
 800e4b4:	f3bf 8f4f 	dsb	sy
 800e4b8:	623b      	str	r3, [r7, #32]
}
 800e4ba:	bf00      	nop
 800e4bc:	e7fe      	b.n	800e4bc <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800e4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c0:	7f1b      	ldrb	r3, [r3, #28]
 800e4c2:	f003 0301 	and.w	r3, r3, #1
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d011      	beq.n	800e4ee <xStreamBufferSend+0x82>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800e4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4cc:	3304      	adds	r3, #4
 800e4ce:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 800e4d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	429a      	cmp	r2, r3
 800e4d6:	d80a      	bhi.n	800e4ee <xStreamBufferSend+0x82>
	__asm volatile
 800e4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4dc:	f383 8811 	msr	BASEPRI, r3
 800e4e0:	f3bf 8f6f 	isb	sy
 800e4e4:	f3bf 8f4f 	dsb	sy
 800e4e8:	61fb      	str	r3, [r7, #28]
}
 800e4ea:	bf00      	nop
 800e4ec:	e7fe      	b.n	800e4ec <xStreamBufferSend+0x80>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d03e      	beq.n	800e572 <xStreamBufferSend+0x106>
	{
		vTaskSetTimeOutState( &xTimeOut );
 800e4f4:	f107 0310 	add.w	r3, r7, #16
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f000 ff49 	bl	800f390 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 800e4fe:	f001 fe39 	bl	8010174 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800e502:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e504:	f7ff ff7f 	bl	800e406 <xStreamBufferSpacesAvailable>
 800e508:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 800e50a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e50e:	429a      	cmp	r2, r3
 800e510:	d217      	bcs.n	800e542 <xStreamBufferSend+0xd6>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 800e512:	2000      	movs	r0, #0
 800e514:	f001 fc74 	bl	800fe00 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 800e518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e51a:	695b      	ldr	r3, [r3, #20]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d00a      	beq.n	800e536 <xStreamBufferSend+0xca>
	__asm volatile
 800e520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e524:	f383 8811 	msr	BASEPRI, r3
 800e528:	f3bf 8f6f 	isb	sy
 800e52c:	f3bf 8f4f 	dsb	sy
 800e530:	61bb      	str	r3, [r7, #24]
}
 800e532:	bf00      	nop
 800e534:	e7fe      	b.n	800e534 <xStreamBufferSend+0xc8>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 800e536:	f001 f8ad 	bl	800f694 <xTaskGetCurrentTaskHandle>
 800e53a:	4602      	mov	r2, r0
 800e53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e53e:	615a      	str	r2, [r3, #20]
 800e540:	e002      	b.n	800e548 <xStreamBufferSend+0xdc>
				}
				else
				{
					taskEXIT_CRITICAL();
 800e542:	f001 fe47 	bl	80101d4 <vPortExitCritical>
					break;
 800e546:	e014      	b.n	800e572 <xStreamBufferSend+0x106>
				}
			}
			taskEXIT_CRITICAL();
 800e548:	f001 fe44 	bl	80101d4 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	2200      	movs	r2, #0
 800e550:	2100      	movs	r1, #0
 800e552:	2000      	movs	r0, #0
 800e554:	f001 fab2 	bl	800fabc <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 800e558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e55a:	2200      	movs	r2, #0
 800e55c:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 800e55e:	463a      	mov	r2, r7
 800e560:	f107 0310 	add.w	r3, r7, #16
 800e564:	4611      	mov	r1, r2
 800e566:	4618      	mov	r0, r3
 800e568:	f000 ff4e 	bl	800f408 <xTaskCheckForTimeOut>
 800e56c:	4603      	mov	r3, r0
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d0c5      	beq.n	800e4fe <xStreamBufferSend+0x92>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 800e572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e574:	2b00      	cmp	r3, #0
 800e576:	d103      	bne.n	800e580 <xStreamBufferSend+0x114>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800e578:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e57a:	f7ff ff44 	bl	800e406 <xStreamBufferSpacesAvailable>
 800e57e:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 800e580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e582:	9300      	str	r3, [sp, #0]
 800e584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e586:	687a      	ldr	r2, [r7, #4]
 800e588:	68b9      	ldr	r1, [r7, #8]
 800e58a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e58c:	f000 f823 	bl	800e5d6 <prvWriteMessageToBuffer>
 800e590:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 800e592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e594:	2b00      	cmp	r3, #0
 800e596:	d019      	beq.n	800e5cc <xStreamBufferSend+0x160>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 800e598:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e59a:	f000 fa0c 	bl	800e9b6 <prvBytesInBuffer>
 800e59e:	4602      	mov	r2, r0
 800e5a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5a2:	68db      	ldr	r3, [r3, #12]
 800e5a4:	429a      	cmp	r2, r3
 800e5a6:	d311      	bcc.n	800e5cc <xStreamBufferSend+0x160>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 800e5a8:	f000 fc8a 	bl	800eec0 <vTaskSuspendAll>
 800e5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ae:	691b      	ldr	r3, [r3, #16]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d009      	beq.n	800e5c8 <xStreamBufferSend+0x15c>
 800e5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5b6:	6918      	ldr	r0, [r3, #16]
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	2100      	movs	r1, #0
 800e5be:	f001 fad7 	bl	800fb70 <xTaskGenericNotify>
 800e5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	611a      	str	r2, [r3, #16]
 800e5c8:	f000 fc88 	bl	800eedc <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 800e5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	3738      	adds	r7, #56	; 0x38
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	bd80      	pop	{r7, pc}

0800e5d6 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 800e5d6:	b580      	push	{r7, lr}
 800e5d8:	b086      	sub	sp, #24
 800e5da:	af00      	add	r7, sp, #0
 800e5dc:	60f8      	str	r0, [r7, #12]
 800e5de:	60b9      	str	r1, [r7, #8]
 800e5e0:	607a      	str	r2, [r7, #4]
 800e5e2:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d102      	bne.n	800e5f0 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	617b      	str	r3, [r7, #20]
 800e5ee:	e01d      	b.n	800e62c <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	7f1b      	ldrb	r3, [r3, #28]
 800e5f4:	f003 0301 	and.w	r3, r3, #1
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d108      	bne.n	800e60e <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 800e600:	687a      	ldr	r2, [r7, #4]
 800e602:	683b      	ldr	r3, [r7, #0]
 800e604:	4293      	cmp	r3, r2
 800e606:	bf28      	it	cs
 800e608:	4613      	movcs	r3, r2
 800e60a:	607b      	str	r3, [r7, #4]
 800e60c:	e00e      	b.n	800e62c <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 800e60e:	683a      	ldr	r2, [r7, #0]
 800e610:	6a3b      	ldr	r3, [r7, #32]
 800e612:	429a      	cmp	r2, r3
 800e614:	d308      	bcc.n	800e628 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 800e616:	2301      	movs	r3, #1
 800e618:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800e61a:	1d3b      	adds	r3, r7, #4
 800e61c:	2204      	movs	r2, #4
 800e61e:	4619      	mov	r1, r3
 800e620:	68f8      	ldr	r0, [r7, #12]
 800e622:	f000 f8dc 	bl	800e7de <prvWriteBytesToBuffer>
 800e626:	e001      	b.n	800e62c <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 800e628:	2300      	movs	r3, #0
 800e62a:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 800e62c:	697b      	ldr	r3, [r7, #20]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d007      	beq.n	800e642 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	461a      	mov	r2, r3
 800e636:	68b9      	ldr	r1, [r7, #8]
 800e638:	68f8      	ldr	r0, [r7, #12]
 800e63a:	f000 f8d0 	bl	800e7de <prvWriteBytesToBuffer>
 800e63e:	6138      	str	r0, [r7, #16]
 800e640:	e001      	b.n	800e646 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 800e642:	2300      	movs	r3, #0
 800e644:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 800e646:	693b      	ldr	r3, [r7, #16]
}
 800e648:	4618      	mov	r0, r3
 800e64a:	3718      	adds	r7, #24
 800e64c:	46bd      	mov	sp, r7
 800e64e:	bd80      	pop	{r7, pc}

0800e650 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b08e      	sub	sp, #56	; 0x38
 800e654:	af02      	add	r7, sp, #8
 800e656:	60f8      	str	r0, [r7, #12]
 800e658:	60b9      	str	r1, [r7, #8]
 800e65a:	607a      	str	r2, [r7, #4]
 800e65c:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 800e662:	2300      	movs	r3, #0
 800e664:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 800e666:	68bb      	ldr	r3, [r7, #8]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d10a      	bne.n	800e682 <xStreamBufferReceive+0x32>
	__asm volatile
 800e66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e670:	f383 8811 	msr	BASEPRI, r3
 800e674:	f3bf 8f6f 	isb	sy
 800e678:	f3bf 8f4f 	dsb	sy
 800e67c:	61fb      	str	r3, [r7, #28]
}
 800e67e:	bf00      	nop
 800e680:	e7fe      	b.n	800e680 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 800e682:	6a3b      	ldr	r3, [r7, #32]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d10a      	bne.n	800e69e <xStreamBufferReceive+0x4e>
	__asm volatile
 800e688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e68c:	f383 8811 	msr	BASEPRI, r3
 800e690:	f3bf 8f6f 	isb	sy
 800e694:	f3bf 8f4f 	dsb	sy
 800e698:	61bb      	str	r3, [r7, #24]
}
 800e69a:	bf00      	nop
 800e69c:	e7fe      	b.n	800e69c <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800e69e:	6a3b      	ldr	r3, [r7, #32]
 800e6a0:	7f1b      	ldrb	r3, [r3, #28]
 800e6a2:	f003 0301 	and.w	r3, r3, #1
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d002      	beq.n	800e6b0 <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800e6aa:	2304      	movs	r3, #4
 800e6ac:	627b      	str	r3, [r7, #36]	; 0x24
 800e6ae:	e001      	b.n	800e6b4 <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d034      	beq.n	800e724 <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 800e6ba:	f001 fd5b 	bl	8010174 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800e6be:	6a38      	ldr	r0, [r7, #32]
 800e6c0:	f000 f979 	bl	800e9b6 <prvBytesInBuffer>
 800e6c4:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 800e6c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ca:	429a      	cmp	r2, r3
 800e6cc:	d816      	bhi.n	800e6fc <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 800e6ce:	2000      	movs	r0, #0
 800e6d0:	f001 fb96 	bl	800fe00 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 800e6d4:	6a3b      	ldr	r3, [r7, #32]
 800e6d6:	691b      	ldr	r3, [r3, #16]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d00a      	beq.n	800e6f2 <xStreamBufferReceive+0xa2>
	__asm volatile
 800e6dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6e0:	f383 8811 	msr	BASEPRI, r3
 800e6e4:	f3bf 8f6f 	isb	sy
 800e6e8:	f3bf 8f4f 	dsb	sy
 800e6ec:	617b      	str	r3, [r7, #20]
}
 800e6ee:	bf00      	nop
 800e6f0:	e7fe      	b.n	800e6f0 <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 800e6f2:	f000 ffcf 	bl	800f694 <xTaskGetCurrentTaskHandle>
 800e6f6:	4602      	mov	r2, r0
 800e6f8:	6a3b      	ldr	r3, [r7, #32]
 800e6fa:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e6fc:	f001 fd6a 	bl	80101d4 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 800e700:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e704:	429a      	cmp	r2, r3
 800e706:	d811      	bhi.n	800e72c <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	2200      	movs	r2, #0
 800e70c:	2100      	movs	r1, #0
 800e70e:	2000      	movs	r0, #0
 800e710:	f001 f9d4 	bl	800fabc <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 800e714:	6a3b      	ldr	r3, [r7, #32]
 800e716:	2200      	movs	r2, #0
 800e718:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800e71a:	6a38      	ldr	r0, [r7, #32]
 800e71c:	f000 f94b 	bl	800e9b6 <prvBytesInBuffer>
 800e720:	62b8      	str	r0, [r7, #40]	; 0x28
 800e722:	e003      	b.n	800e72c <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800e724:	6a38      	ldr	r0, [r7, #32]
 800e726:	f000 f946 	bl	800e9b6 <prvBytesInBuffer>
 800e72a:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 800e72c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e730:	429a      	cmp	r2, r3
 800e732:	d91d      	bls.n	800e770 <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 800e734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e736:	9300      	str	r3, [sp, #0]
 800e738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e73a:	687a      	ldr	r2, [r7, #4]
 800e73c:	68b9      	ldr	r1, [r7, #8]
 800e73e:	6a38      	ldr	r0, [r7, #32]
 800e740:	f000 f81b 	bl	800e77a <prvReadMessageFromBuffer>
 800e744:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 800e746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d011      	beq.n	800e770 <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 800e74c:	f000 fbb8 	bl	800eec0 <vTaskSuspendAll>
 800e750:	6a3b      	ldr	r3, [r7, #32]
 800e752:	695b      	ldr	r3, [r3, #20]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d009      	beq.n	800e76c <xStreamBufferReceive+0x11c>
 800e758:	6a3b      	ldr	r3, [r7, #32]
 800e75a:	6958      	ldr	r0, [r3, #20]
 800e75c:	2300      	movs	r3, #0
 800e75e:	2200      	movs	r2, #0
 800e760:	2100      	movs	r1, #0
 800e762:	f001 fa05 	bl	800fb70 <xTaskGenericNotify>
 800e766:	6a3b      	ldr	r3, [r7, #32]
 800e768:	2200      	movs	r2, #0
 800e76a:	615a      	str	r2, [r3, #20]
 800e76c:	f000 fbb6 	bl	800eedc <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 800e770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e772:	4618      	mov	r0, r3
 800e774:	3730      	adds	r7, #48	; 0x30
 800e776:	46bd      	mov	sp, r7
 800e778:	bd80      	pop	{r7, pc}

0800e77a <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 800e77a:	b580      	push	{r7, lr}
 800e77c:	b088      	sub	sp, #32
 800e77e:	af00      	add	r7, sp, #0
 800e780:	60f8      	str	r0, [r7, #12]
 800e782:	60b9      	str	r1, [r7, #8]
 800e784:	607a      	str	r2, [r7, #4]
 800e786:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 800e788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d019      	beq.n	800e7c2 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 800e794:	f107 0110 	add.w	r1, r7, #16
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e79c:	68f8      	ldr	r0, [r7, #12]
 800e79e:	f000 f890 	bl	800e8c2 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 800e7a2:	693b      	ldr	r3, [r7, #16]
 800e7a4:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 800e7a6:	683a      	ldr	r2, [r7, #0]
 800e7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7aa:	1ad3      	subs	r3, r2, r3
 800e7ac:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 800e7ae:	69fa      	ldr	r2, [r7, #28]
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	429a      	cmp	r2, r3
 800e7b4:	d907      	bls.n	800e7c6 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	69ba      	ldr	r2, [r7, #24]
 800e7ba:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 800e7bc:	2300      	movs	r3, #0
 800e7be:	61fb      	str	r3, [r7, #28]
 800e7c0:	e001      	b.n	800e7c6 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	69fa      	ldr	r2, [r7, #28]
 800e7ca:	68b9      	ldr	r1, [r7, #8]
 800e7cc:	68f8      	ldr	r0, [r7, #12]
 800e7ce:	f000 f878 	bl	800e8c2 <prvReadBytesFromBuffer>
 800e7d2:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 800e7d4:	697b      	ldr	r3, [r7, #20]
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	3720      	adds	r7, #32
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}

0800e7de <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 800e7de:	b580      	push	{r7, lr}
 800e7e0:	b08a      	sub	sp, #40	; 0x28
 800e7e2:	af00      	add	r7, sp, #0
 800e7e4:	60f8      	str	r0, [r7, #12]
 800e7e6:	60b9      	str	r1, [r7, #8]
 800e7e8:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d10a      	bne.n	800e806 <prvWriteBytesToBuffer+0x28>
	__asm volatile
 800e7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7f4:	f383 8811 	msr	BASEPRI, r3
 800e7f8:	f3bf 8f6f 	isb	sy
 800e7fc:	f3bf 8f4f 	dsb	sy
 800e800:	61fb      	str	r3, [r7, #28]
}
 800e802:	bf00      	nop
 800e804:	e7fe      	b.n	800e804 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	685b      	ldr	r3, [r3, #4]
 800e80a:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	689a      	ldr	r2, [r3, #8]
 800e810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e812:	1ad3      	subs	r3, r2, r3
 800e814:	687a      	ldr	r2, [r7, #4]
 800e816:	4293      	cmp	r3, r2
 800e818:	bf28      	it	cs
 800e81a:	4613      	movcs	r3, r2
 800e81c:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 800e81e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e820:	6a3b      	ldr	r3, [r7, #32]
 800e822:	441a      	add	r2, r3
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	689b      	ldr	r3, [r3, #8]
 800e828:	429a      	cmp	r2, r3
 800e82a:	d90a      	bls.n	800e842 <prvWriteBytesToBuffer+0x64>
	__asm volatile
 800e82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e830:	f383 8811 	msr	BASEPRI, r3
 800e834:	f3bf 8f6f 	isb	sy
 800e838:	f3bf 8f4f 	dsb	sy
 800e83c:	61bb      	str	r3, [r7, #24]
}
 800e83e:	bf00      	nop
 800e840:	e7fe      	b.n	800e840 <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	699a      	ldr	r2, [r3, #24]
 800e846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e848:	4413      	add	r3, r2
 800e84a:	6a3a      	ldr	r2, [r7, #32]
 800e84c:	68b9      	ldr	r1, [r7, #8]
 800e84e:	4618      	mov	r0, r3
 800e850:	f002 fae2 	bl	8010e18 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 800e854:	687a      	ldr	r2, [r7, #4]
 800e856:	6a3b      	ldr	r3, [r7, #32]
 800e858:	429a      	cmp	r2, r3
 800e85a:	d91c      	bls.n	800e896 <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 800e85c:	687a      	ldr	r2, [r7, #4]
 800e85e:	6a3b      	ldr	r3, [r7, #32]
 800e860:	1ad2      	subs	r2, r2, r3
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	689b      	ldr	r3, [r3, #8]
 800e866:	429a      	cmp	r2, r3
 800e868:	d90a      	bls.n	800e880 <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 800e86a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e86e:	f383 8811 	msr	BASEPRI, r3
 800e872:	f3bf 8f6f 	isb	sy
 800e876:	f3bf 8f4f 	dsb	sy
 800e87a:	617b      	str	r3, [r7, #20]
}
 800e87c:	bf00      	nop
 800e87e:	e7fe      	b.n	800e87e <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	6998      	ldr	r0, [r3, #24]
 800e884:	68ba      	ldr	r2, [r7, #8]
 800e886:	6a3b      	ldr	r3, [r7, #32]
 800e888:	18d1      	adds	r1, r2, r3
 800e88a:	687a      	ldr	r2, [r7, #4]
 800e88c:	6a3b      	ldr	r3, [r7, #32]
 800e88e:	1ad3      	subs	r3, r2, r3
 800e890:	461a      	mov	r2, r3
 800e892:	f002 fac1 	bl	8010e18 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 800e896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	4413      	add	r3, r2
 800e89c:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	689b      	ldr	r3, [r3, #8]
 800e8a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8a4:	429a      	cmp	r2, r3
 800e8a6:	d304      	bcc.n	800e8b2 <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	689b      	ldr	r3, [r3, #8]
 800e8ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8ae:	1ad3      	subs	r3, r2, r3
 800e8b0:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8b6:	605a      	str	r2, [r3, #4]

	return xCount;
 800e8b8:	687b      	ldr	r3, [r7, #4]
}
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	3728      	adds	r7, #40	; 0x28
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	bd80      	pop	{r7, pc}

0800e8c2 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 800e8c2:	b580      	push	{r7, lr}
 800e8c4:	b08a      	sub	sp, #40	; 0x28
 800e8c6:	af00      	add	r7, sp, #0
 800e8c8:	60f8      	str	r0, [r7, #12]
 800e8ca:	60b9      	str	r1, [r7, #8]
 800e8cc:	607a      	str	r2, [r7, #4]
 800e8ce:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 800e8d0:	687a      	ldr	r2, [r7, #4]
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	4293      	cmp	r3, r2
 800e8d6:	bf28      	it	cs
 800e8d8:	4613      	movcs	r3, r2
 800e8da:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 800e8dc:	6a3b      	ldr	r3, [r7, #32]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d064      	beq.n	800e9ac <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	689a      	ldr	r2, [r3, #8]
 800e8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ee:	1ad3      	subs	r3, r2, r3
 800e8f0:	6a3a      	ldr	r2, [r7, #32]
 800e8f2:	4293      	cmp	r3, r2
 800e8f4:	bf28      	it	cs
 800e8f6:	4613      	movcs	r3, r2
 800e8f8:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 800e8fa:	69fa      	ldr	r2, [r7, #28]
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	429a      	cmp	r2, r3
 800e900:	d90a      	bls.n	800e918 <prvReadBytesFromBuffer+0x56>
	__asm volatile
 800e902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e906:	f383 8811 	msr	BASEPRI, r3
 800e90a:	f3bf 8f6f 	isb	sy
 800e90e:	f3bf 8f4f 	dsb	sy
 800e912:	61bb      	str	r3, [r7, #24]
}
 800e914:	bf00      	nop
 800e916:	e7fe      	b.n	800e916 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 800e918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e91a:	69fb      	ldr	r3, [r7, #28]
 800e91c:	441a      	add	r2, r3
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	689b      	ldr	r3, [r3, #8]
 800e922:	429a      	cmp	r2, r3
 800e924:	d90a      	bls.n	800e93c <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 800e926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e92a:	f383 8811 	msr	BASEPRI, r3
 800e92e:	f3bf 8f6f 	isb	sy
 800e932:	f3bf 8f4f 	dsb	sy
 800e936:	617b      	str	r3, [r7, #20]
}
 800e938:	bf00      	nop
 800e93a:	e7fe      	b.n	800e93a <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	699a      	ldr	r2, [r3, #24]
 800e940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e942:	4413      	add	r3, r2
 800e944:	69fa      	ldr	r2, [r7, #28]
 800e946:	4619      	mov	r1, r3
 800e948:	68b8      	ldr	r0, [r7, #8]
 800e94a:	f002 fa65 	bl	8010e18 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 800e94e:	6a3a      	ldr	r2, [r7, #32]
 800e950:	69fb      	ldr	r3, [r7, #28]
 800e952:	429a      	cmp	r2, r3
 800e954:	d919      	bls.n	800e98a <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 800e956:	6a3a      	ldr	r2, [r7, #32]
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	429a      	cmp	r2, r3
 800e95c:	d90a      	bls.n	800e974 <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 800e95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e962:	f383 8811 	msr	BASEPRI, r3
 800e966:	f3bf 8f6f 	isb	sy
 800e96a:	f3bf 8f4f 	dsb	sy
 800e96e:	613b      	str	r3, [r7, #16]
}
 800e970:	bf00      	nop
 800e972:	e7fe      	b.n	800e972 <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800e974:	68ba      	ldr	r2, [r7, #8]
 800e976:	69fb      	ldr	r3, [r7, #28]
 800e978:	18d0      	adds	r0, r2, r3
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	6999      	ldr	r1, [r3, #24]
 800e97e:	6a3a      	ldr	r2, [r7, #32]
 800e980:	69fb      	ldr	r3, [r7, #28]
 800e982:	1ad3      	subs	r3, r2, r3
 800e984:	461a      	mov	r2, r3
 800e986:	f002 fa47 	bl	8010e18 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 800e98a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e98c:	6a3b      	ldr	r3, [r7, #32]
 800e98e:	4413      	add	r3, r2
 800e990:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	689b      	ldr	r3, [r3, #8]
 800e996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e998:	429a      	cmp	r2, r3
 800e99a:	d304      	bcc.n	800e9a6 <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	689b      	ldr	r3, [r3, #8]
 800e9a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9a2:	1ad3      	subs	r3, r2, r3
 800e9a4:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9aa:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800e9ac:	6a3b      	ldr	r3, [r7, #32]
}
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	3728      	adds	r7, #40	; 0x28
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	bd80      	pop	{r7, pc}

0800e9b6 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 800e9b6:	b480      	push	{r7}
 800e9b8:	b085      	sub	sp, #20
 800e9ba:	af00      	add	r7, sp, #0
 800e9bc:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	689a      	ldr	r2, [r3, #8]
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	685b      	ldr	r3, [r3, #4]
 800e9c6:	4413      	add	r3, r2
 800e9c8:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	68fa      	ldr	r2, [r7, #12]
 800e9d0:	1ad3      	subs	r3, r2, r3
 800e9d2:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	689b      	ldr	r3, [r3, #8]
 800e9d8:	68fa      	ldr	r2, [r7, #12]
 800e9da:	429a      	cmp	r2, r3
 800e9dc:	d304      	bcc.n	800e9e8 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	689b      	ldr	r3, [r3, #8]
 800e9e2:	68fa      	ldr	r2, [r7, #12]
 800e9e4:	1ad3      	subs	r3, r2, r3
 800e9e6:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
}
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	3714      	adds	r7, #20
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f4:	4770      	bx	lr

0800e9f6 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 800e9f6:	b580      	push	{r7, lr}
 800e9f8:	b086      	sub	sp, #24
 800e9fa:	af00      	add	r7, sp, #0
 800e9fc:	60f8      	str	r0, [r7, #12]
 800e9fe:	60b9      	str	r1, [r7, #8]
 800ea00:	607a      	str	r2, [r7, #4]
 800ea02:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 800ea04:	2355      	movs	r3, #85	; 0x55
 800ea06:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 800ea08:	687a      	ldr	r2, [r7, #4]
 800ea0a:	6979      	ldr	r1, [r7, #20]
 800ea0c:	68b8      	ldr	r0, [r7, #8]
 800ea0e:	f002 fa11 	bl	8010e34 <memset>
 800ea12:	4602      	mov	r2, r0
 800ea14:	68bb      	ldr	r3, [r7, #8]
 800ea16:	4293      	cmp	r3, r2
 800ea18:	d00a      	beq.n	800ea30 <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 800ea1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea1e:	f383 8811 	msr	BASEPRI, r3
 800ea22:	f3bf 8f6f 	isb	sy
 800ea26:	f3bf 8f4f 	dsb	sy
 800ea2a:	613b      	str	r3, [r7, #16]
}
 800ea2c:	bf00      	nop
 800ea2e:	e7fe      	b.n	800ea2e <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 800ea30:	2220      	movs	r2, #32
 800ea32:	2100      	movs	r1, #0
 800ea34:	68f8      	ldr	r0, [r7, #12]
 800ea36:	f002 f9fd 	bl	8010e34 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	68ba      	ldr	r2, [r7, #8]
 800ea3e:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	687a      	ldr	r2, [r7, #4]
 800ea44:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	683a      	ldr	r2, [r7, #0]
 800ea4a:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	f897 2020 	ldrb.w	r2, [r7, #32]
 800ea52:	771a      	strb	r2, [r3, #28]
}
 800ea54:	bf00      	nop
 800ea56:	3718      	adds	r7, #24
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	bd80      	pop	{r7, pc}

0800ea5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	b08e      	sub	sp, #56	; 0x38
 800ea60:	af04      	add	r7, sp, #16
 800ea62:	60f8      	str	r0, [r7, #12]
 800ea64:	60b9      	str	r1, [r7, #8]
 800ea66:	607a      	str	r2, [r7, #4]
 800ea68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ea6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d10a      	bne.n	800ea86 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ea70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea74:	f383 8811 	msr	BASEPRI, r3
 800ea78:	f3bf 8f6f 	isb	sy
 800ea7c:	f3bf 8f4f 	dsb	sy
 800ea80:	623b      	str	r3, [r7, #32]
}
 800ea82:	bf00      	nop
 800ea84:	e7fe      	b.n	800ea84 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ea86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d10a      	bne.n	800eaa2 <xTaskCreateStatic+0x46>
	__asm volatile
 800ea8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea90:	f383 8811 	msr	BASEPRI, r3
 800ea94:	f3bf 8f6f 	isb	sy
 800ea98:	f3bf 8f4f 	dsb	sy
 800ea9c:	61fb      	str	r3, [r7, #28]
}
 800ea9e:	bf00      	nop
 800eaa0:	e7fe      	b.n	800eaa0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800eaa2:	2358      	movs	r3, #88	; 0x58
 800eaa4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800eaa6:	693b      	ldr	r3, [r7, #16]
 800eaa8:	2b58      	cmp	r3, #88	; 0x58
 800eaaa:	d00a      	beq.n	800eac2 <xTaskCreateStatic+0x66>
	__asm volatile
 800eaac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eab0:	f383 8811 	msr	BASEPRI, r3
 800eab4:	f3bf 8f6f 	isb	sy
 800eab8:	f3bf 8f4f 	dsb	sy
 800eabc:	61bb      	str	r3, [r7, #24]
}
 800eabe:	bf00      	nop
 800eac0:	e7fe      	b.n	800eac0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800eac2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800eac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d01e      	beq.n	800eb08 <xTaskCreateStatic+0xac>
 800eaca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d01b      	beq.n	800eb08 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ead0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ead2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ead4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ead6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ead8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800eada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eadc:	2202      	movs	r2, #2
 800eade:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800eae2:	2300      	movs	r3, #0
 800eae4:	9303      	str	r3, [sp, #12]
 800eae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eae8:	9302      	str	r3, [sp, #8]
 800eaea:	f107 0314 	add.w	r3, r7, #20
 800eaee:	9301      	str	r3, [sp, #4]
 800eaf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaf2:	9300      	str	r3, [sp, #0]
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	687a      	ldr	r2, [r7, #4]
 800eaf8:	68b9      	ldr	r1, [r7, #8]
 800eafa:	68f8      	ldr	r0, [r7, #12]
 800eafc:	f000 f850 	bl	800eba0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800eb00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb02:	f000 f8df 	bl	800ecc4 <prvAddNewTaskToReadyList>
 800eb06:	e001      	b.n	800eb0c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800eb08:	2300      	movs	r3, #0
 800eb0a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800eb0c:	697b      	ldr	r3, [r7, #20]
	}
 800eb0e:	4618      	mov	r0, r3
 800eb10:	3728      	adds	r7, #40	; 0x28
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}

0800eb16 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800eb16:	b580      	push	{r7, lr}
 800eb18:	b08c      	sub	sp, #48	; 0x30
 800eb1a:	af04      	add	r7, sp, #16
 800eb1c:	60f8      	str	r0, [r7, #12]
 800eb1e:	60b9      	str	r1, [r7, #8]
 800eb20:	603b      	str	r3, [r7, #0]
 800eb22:	4613      	mov	r3, r2
 800eb24:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800eb26:	88fb      	ldrh	r3, [r7, #6]
 800eb28:	009b      	lsls	r3, r3, #2
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	f001 fc44 	bl	80103b8 <pvPortMalloc>
 800eb30:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800eb32:	697b      	ldr	r3, [r7, #20]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d00e      	beq.n	800eb56 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800eb38:	2058      	movs	r0, #88	; 0x58
 800eb3a:	f001 fc3d 	bl	80103b8 <pvPortMalloc>
 800eb3e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800eb40:	69fb      	ldr	r3, [r7, #28]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d003      	beq.n	800eb4e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800eb46:	69fb      	ldr	r3, [r7, #28]
 800eb48:	697a      	ldr	r2, [r7, #20]
 800eb4a:	631a      	str	r2, [r3, #48]	; 0x30
 800eb4c:	e005      	b.n	800eb5a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800eb4e:	6978      	ldr	r0, [r7, #20]
 800eb50:	f001 fd02 	bl	8010558 <vPortFree>
 800eb54:	e001      	b.n	800eb5a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800eb56:	2300      	movs	r3, #0
 800eb58:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800eb5a:	69fb      	ldr	r3, [r7, #28]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d017      	beq.n	800eb90 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800eb60:	69fb      	ldr	r3, [r7, #28]
 800eb62:	2200      	movs	r2, #0
 800eb64:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800eb68:	88fa      	ldrh	r2, [r7, #6]
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	9303      	str	r3, [sp, #12]
 800eb6e:	69fb      	ldr	r3, [r7, #28]
 800eb70:	9302      	str	r3, [sp, #8]
 800eb72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb74:	9301      	str	r3, [sp, #4]
 800eb76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb78:	9300      	str	r3, [sp, #0]
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	68b9      	ldr	r1, [r7, #8]
 800eb7e:	68f8      	ldr	r0, [r7, #12]
 800eb80:	f000 f80e 	bl	800eba0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800eb84:	69f8      	ldr	r0, [r7, #28]
 800eb86:	f000 f89d 	bl	800ecc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	61bb      	str	r3, [r7, #24]
 800eb8e:	e002      	b.n	800eb96 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800eb90:	f04f 33ff 	mov.w	r3, #4294967295
 800eb94:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800eb96:	69bb      	ldr	r3, [r7, #24]
	}
 800eb98:	4618      	mov	r0, r3
 800eb9a:	3720      	adds	r7, #32
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd80      	pop	{r7, pc}

0800eba0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b088      	sub	sp, #32
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	60f8      	str	r0, [r7, #12]
 800eba8:	60b9      	str	r1, [r7, #8]
 800ebaa:	607a      	str	r2, [r7, #4]
 800ebac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ebae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebb0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	009b      	lsls	r3, r3, #2
 800ebb6:	461a      	mov	r2, r3
 800ebb8:	21a5      	movs	r1, #165	; 0xa5
 800ebba:	f002 f93b 	bl	8010e34 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ebbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ebc8:	3b01      	subs	r3, #1
 800ebca:	009b      	lsls	r3, r3, #2
 800ebcc:	4413      	add	r3, r2
 800ebce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ebd0:	69bb      	ldr	r3, [r7, #24]
 800ebd2:	f023 0307 	bic.w	r3, r3, #7
 800ebd6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ebd8:	69bb      	ldr	r3, [r7, #24]
 800ebda:	f003 0307 	and.w	r3, r3, #7
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d00a      	beq.n	800ebf8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ebe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebe6:	f383 8811 	msr	BASEPRI, r3
 800ebea:	f3bf 8f6f 	isb	sy
 800ebee:	f3bf 8f4f 	dsb	sy
 800ebf2:	617b      	str	r3, [r7, #20]
}
 800ebf4:	bf00      	nop
 800ebf6:	e7fe      	b.n	800ebf6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ebf8:	68bb      	ldr	r3, [r7, #8]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d01f      	beq.n	800ec3e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ebfe:	2300      	movs	r3, #0
 800ec00:	61fb      	str	r3, [r7, #28]
 800ec02:	e012      	b.n	800ec2a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ec04:	68ba      	ldr	r2, [r7, #8]
 800ec06:	69fb      	ldr	r3, [r7, #28]
 800ec08:	4413      	add	r3, r2
 800ec0a:	7819      	ldrb	r1, [r3, #0]
 800ec0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec0e:	69fb      	ldr	r3, [r7, #28]
 800ec10:	4413      	add	r3, r2
 800ec12:	3334      	adds	r3, #52	; 0x34
 800ec14:	460a      	mov	r2, r1
 800ec16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ec18:	68ba      	ldr	r2, [r7, #8]
 800ec1a:	69fb      	ldr	r3, [r7, #28]
 800ec1c:	4413      	add	r3, r2
 800ec1e:	781b      	ldrb	r3, [r3, #0]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d006      	beq.n	800ec32 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ec24:	69fb      	ldr	r3, [r7, #28]
 800ec26:	3301      	adds	r3, #1
 800ec28:	61fb      	str	r3, [r7, #28]
 800ec2a:	69fb      	ldr	r3, [r7, #28]
 800ec2c:	2b0f      	cmp	r3, #15
 800ec2e:	d9e9      	bls.n	800ec04 <prvInitialiseNewTask+0x64>
 800ec30:	e000      	b.n	800ec34 <prvInitialiseNewTask+0x94>
			{
				break;
 800ec32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ec34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec36:	2200      	movs	r2, #0
 800ec38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ec3c:	e003      	b.n	800ec46 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ec3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec40:	2200      	movs	r2, #0
 800ec42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ec46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec48:	2b06      	cmp	r3, #6
 800ec4a:	d901      	bls.n	800ec50 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ec4c:	2306      	movs	r3, #6
 800ec4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ec50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ec56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec5a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ec5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec5e:	2200      	movs	r2, #0
 800ec60:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ec62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec64:	3304      	adds	r3, #4
 800ec66:	4618      	mov	r0, r3
 800ec68:	f7fe fc44 	bl	800d4f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ec6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec6e:	3318      	adds	r3, #24
 800ec70:	4618      	mov	r0, r3
 800ec72:	f7fe fc3f 	bl	800d4f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ec76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec7e:	f1c3 0207 	rsb	r2, r3, #7
 800ec82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ec86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800ec8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec8e:	2200      	movs	r2, #0
 800ec90:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ec92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec94:	2200      	movs	r2, #0
 800ec96:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ec98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800eca0:	683a      	ldr	r2, [r7, #0]
 800eca2:	68f9      	ldr	r1, [r7, #12]
 800eca4:	69b8      	ldr	r0, [r7, #24]
 800eca6:	f001 f937 	bl	800ff18 <pxPortInitialiseStack>
 800ecaa:	4602      	mov	r2, r0
 800ecac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ecb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d002      	beq.n	800ecbc <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ecb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ecba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ecbc:	bf00      	nop
 800ecbe:	3720      	adds	r7, #32
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}

0800ecc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b082      	sub	sp, #8
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800eccc:	f001 fa52 	bl	8010174 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ecd0:	4b2a      	ldr	r3, [pc, #168]	; (800ed7c <prvAddNewTaskToReadyList+0xb8>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	3301      	adds	r3, #1
 800ecd6:	4a29      	ldr	r2, [pc, #164]	; (800ed7c <prvAddNewTaskToReadyList+0xb8>)
 800ecd8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ecda:	4b29      	ldr	r3, [pc, #164]	; (800ed80 <prvAddNewTaskToReadyList+0xbc>)
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d109      	bne.n	800ecf6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ece2:	4a27      	ldr	r2, [pc, #156]	; (800ed80 <prvAddNewTaskToReadyList+0xbc>)
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ece8:	4b24      	ldr	r3, [pc, #144]	; (800ed7c <prvAddNewTaskToReadyList+0xb8>)
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	2b01      	cmp	r3, #1
 800ecee:	d110      	bne.n	800ed12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ecf0:	f000 fc12 	bl	800f518 <prvInitialiseTaskLists>
 800ecf4:	e00d      	b.n	800ed12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ecf6:	4b23      	ldr	r3, [pc, #140]	; (800ed84 <prvAddNewTaskToReadyList+0xc0>)
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d109      	bne.n	800ed12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ecfe:	4b20      	ldr	r3, [pc, #128]	; (800ed80 <prvAddNewTaskToReadyList+0xbc>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed08:	429a      	cmp	r2, r3
 800ed0a:	d802      	bhi.n	800ed12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ed0c:	4a1c      	ldr	r2, [pc, #112]	; (800ed80 <prvAddNewTaskToReadyList+0xbc>)
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ed12:	4b1d      	ldr	r3, [pc, #116]	; (800ed88 <prvAddNewTaskToReadyList+0xc4>)
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	3301      	adds	r3, #1
 800ed18:	4a1b      	ldr	r2, [pc, #108]	; (800ed88 <prvAddNewTaskToReadyList+0xc4>)
 800ed1a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed20:	2201      	movs	r2, #1
 800ed22:	409a      	lsls	r2, r3
 800ed24:	4b19      	ldr	r3, [pc, #100]	; (800ed8c <prvAddNewTaskToReadyList+0xc8>)
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	4313      	orrs	r3, r2
 800ed2a:	4a18      	ldr	r2, [pc, #96]	; (800ed8c <prvAddNewTaskToReadyList+0xc8>)
 800ed2c:	6013      	str	r3, [r2, #0]
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed32:	4613      	mov	r3, r2
 800ed34:	009b      	lsls	r3, r3, #2
 800ed36:	4413      	add	r3, r2
 800ed38:	009b      	lsls	r3, r3, #2
 800ed3a:	4a15      	ldr	r2, [pc, #84]	; (800ed90 <prvAddNewTaskToReadyList+0xcc>)
 800ed3c:	441a      	add	r2, r3
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	3304      	adds	r3, #4
 800ed42:	4619      	mov	r1, r3
 800ed44:	4610      	mov	r0, r2
 800ed46:	f7fe fbe2 	bl	800d50e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ed4a:	f001 fa43 	bl	80101d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ed4e:	4b0d      	ldr	r3, [pc, #52]	; (800ed84 <prvAddNewTaskToReadyList+0xc0>)
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d00e      	beq.n	800ed74 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ed56:	4b0a      	ldr	r3, [pc, #40]	; (800ed80 <prvAddNewTaskToReadyList+0xbc>)
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed60:	429a      	cmp	r2, r3
 800ed62:	d207      	bcs.n	800ed74 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ed64:	4b0b      	ldr	r3, [pc, #44]	; (800ed94 <prvAddNewTaskToReadyList+0xd0>)
 800ed66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed6a:	601a      	str	r2, [r3, #0]
 800ed6c:	f3bf 8f4f 	dsb	sy
 800ed70:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ed74:	bf00      	nop
 800ed76:	3708      	adds	r7, #8
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	bd80      	pop	{r7, pc}
 800ed7c:	20000900 	.word	0x20000900
 800ed80:	20000800 	.word	0x20000800
 800ed84:	2000090c 	.word	0x2000090c
 800ed88:	2000091c 	.word	0x2000091c
 800ed8c:	20000908 	.word	0x20000908
 800ed90:	20000804 	.word	0x20000804
 800ed94:	e000ed04 	.word	0xe000ed04

0800ed98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b084      	sub	sp, #16
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800eda0:	2300      	movs	r3, #0
 800eda2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d017      	beq.n	800edda <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800edaa:	4b13      	ldr	r3, [pc, #76]	; (800edf8 <vTaskDelay+0x60>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d00a      	beq.n	800edc8 <vTaskDelay+0x30>
	__asm volatile
 800edb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edb6:	f383 8811 	msr	BASEPRI, r3
 800edba:	f3bf 8f6f 	isb	sy
 800edbe:	f3bf 8f4f 	dsb	sy
 800edc2:	60bb      	str	r3, [r7, #8]
}
 800edc4:	bf00      	nop
 800edc6:	e7fe      	b.n	800edc6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800edc8:	f000 f87a 	bl	800eec0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800edcc:	2100      	movs	r1, #0
 800edce:	6878      	ldr	r0, [r7, #4]
 800edd0:	f001 f83c 	bl	800fe4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800edd4:	f000 f882 	bl	800eedc <xTaskResumeAll>
 800edd8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d107      	bne.n	800edf0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ede0:	4b06      	ldr	r3, [pc, #24]	; (800edfc <vTaskDelay+0x64>)
 800ede2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ede6:	601a      	str	r2, [r3, #0]
 800ede8:	f3bf 8f4f 	dsb	sy
 800edec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800edf0:	bf00      	nop
 800edf2:	3710      	adds	r7, #16
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}
 800edf8:	20000928 	.word	0x20000928
 800edfc:	e000ed04 	.word	0xe000ed04

0800ee00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b08a      	sub	sp, #40	; 0x28
 800ee04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ee06:	2300      	movs	r3, #0
 800ee08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ee0e:	463a      	mov	r2, r7
 800ee10:	1d39      	adds	r1, r7, #4
 800ee12:	f107 0308 	add.w	r3, r7, #8
 800ee16:	4618      	mov	r0, r3
 800ee18:	f7f1 feac 	bl	8000b74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ee1c:	6839      	ldr	r1, [r7, #0]
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	68ba      	ldr	r2, [r7, #8]
 800ee22:	9202      	str	r2, [sp, #8]
 800ee24:	9301      	str	r3, [sp, #4]
 800ee26:	2300      	movs	r3, #0
 800ee28:	9300      	str	r3, [sp, #0]
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	460a      	mov	r2, r1
 800ee2e:	491e      	ldr	r1, [pc, #120]	; (800eea8 <vTaskStartScheduler+0xa8>)
 800ee30:	481e      	ldr	r0, [pc, #120]	; (800eeac <vTaskStartScheduler+0xac>)
 800ee32:	f7ff fe13 	bl	800ea5c <xTaskCreateStatic>
 800ee36:	4603      	mov	r3, r0
 800ee38:	4a1d      	ldr	r2, [pc, #116]	; (800eeb0 <vTaskStartScheduler+0xb0>)
 800ee3a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ee3c:	4b1c      	ldr	r3, [pc, #112]	; (800eeb0 <vTaskStartScheduler+0xb0>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d002      	beq.n	800ee4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ee44:	2301      	movs	r3, #1
 800ee46:	617b      	str	r3, [r7, #20]
 800ee48:	e001      	b.n	800ee4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ee4e:	697b      	ldr	r3, [r7, #20]
 800ee50:	2b01      	cmp	r3, #1
 800ee52:	d116      	bne.n	800ee82 <vTaskStartScheduler+0x82>
	__asm volatile
 800ee54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee58:	f383 8811 	msr	BASEPRI, r3
 800ee5c:	f3bf 8f6f 	isb	sy
 800ee60:	f3bf 8f4f 	dsb	sy
 800ee64:	613b      	str	r3, [r7, #16]
}
 800ee66:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ee68:	4b12      	ldr	r3, [pc, #72]	; (800eeb4 <vTaskStartScheduler+0xb4>)
 800ee6a:	f04f 32ff 	mov.w	r2, #4294967295
 800ee6e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ee70:	4b11      	ldr	r3, [pc, #68]	; (800eeb8 <vTaskStartScheduler+0xb8>)
 800ee72:	2201      	movs	r2, #1
 800ee74:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ee76:	4b11      	ldr	r3, [pc, #68]	; (800eebc <vTaskStartScheduler+0xbc>)
 800ee78:	2200      	movs	r2, #0
 800ee7a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ee7c:	f001 f8d8 	bl	8010030 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ee80:	e00e      	b.n	800eea0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ee82:	697b      	ldr	r3, [r7, #20]
 800ee84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee88:	d10a      	bne.n	800eea0 <vTaskStartScheduler+0xa0>
	__asm volatile
 800ee8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee8e:	f383 8811 	msr	BASEPRI, r3
 800ee92:	f3bf 8f6f 	isb	sy
 800ee96:	f3bf 8f4f 	dsb	sy
 800ee9a:	60fb      	str	r3, [r7, #12]
}
 800ee9c:	bf00      	nop
 800ee9e:	e7fe      	b.n	800ee9e <vTaskStartScheduler+0x9e>
}
 800eea0:	bf00      	nop
 800eea2:	3718      	adds	r7, #24
 800eea4:	46bd      	mov	sp, r7
 800eea6:	bd80      	pop	{r7, pc}
 800eea8:	08012344 	.word	0x08012344
 800eeac:	0800f4e5 	.word	0x0800f4e5
 800eeb0:	20000924 	.word	0x20000924
 800eeb4:	20000920 	.word	0x20000920
 800eeb8:	2000090c 	.word	0x2000090c
 800eebc:	20000904 	.word	0x20000904

0800eec0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800eec0:	b480      	push	{r7}
 800eec2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800eec4:	4b04      	ldr	r3, [pc, #16]	; (800eed8 <vTaskSuspendAll+0x18>)
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	3301      	adds	r3, #1
 800eeca:	4a03      	ldr	r2, [pc, #12]	; (800eed8 <vTaskSuspendAll+0x18>)
 800eecc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800eece:	bf00      	nop
 800eed0:	46bd      	mov	sp, r7
 800eed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed6:	4770      	bx	lr
 800eed8:	20000928 	.word	0x20000928

0800eedc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b084      	sub	sp, #16
 800eee0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800eee2:	2300      	movs	r3, #0
 800eee4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800eee6:	2300      	movs	r3, #0
 800eee8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800eeea:	4b41      	ldr	r3, [pc, #260]	; (800eff0 <xTaskResumeAll+0x114>)
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d10a      	bne.n	800ef08 <xTaskResumeAll+0x2c>
	__asm volatile
 800eef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eef6:	f383 8811 	msr	BASEPRI, r3
 800eefa:	f3bf 8f6f 	isb	sy
 800eefe:	f3bf 8f4f 	dsb	sy
 800ef02:	603b      	str	r3, [r7, #0]
}
 800ef04:	bf00      	nop
 800ef06:	e7fe      	b.n	800ef06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ef08:	f001 f934 	bl	8010174 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ef0c:	4b38      	ldr	r3, [pc, #224]	; (800eff0 <xTaskResumeAll+0x114>)
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	3b01      	subs	r3, #1
 800ef12:	4a37      	ldr	r2, [pc, #220]	; (800eff0 <xTaskResumeAll+0x114>)
 800ef14:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ef16:	4b36      	ldr	r3, [pc, #216]	; (800eff0 <xTaskResumeAll+0x114>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d161      	bne.n	800efe2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ef1e:	4b35      	ldr	r3, [pc, #212]	; (800eff4 <xTaskResumeAll+0x118>)
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d05d      	beq.n	800efe2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ef26:	e02e      	b.n	800ef86 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef28:	4b33      	ldr	r3, [pc, #204]	; (800eff8 <xTaskResumeAll+0x11c>)
 800ef2a:	68db      	ldr	r3, [r3, #12]
 800ef2c:	68db      	ldr	r3, [r3, #12]
 800ef2e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	3318      	adds	r3, #24
 800ef34:	4618      	mov	r0, r3
 800ef36:	f7fe fb47 	bl	800d5c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	3304      	adds	r3, #4
 800ef3e:	4618      	mov	r0, r3
 800ef40:	f7fe fb42 	bl	800d5c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef48:	2201      	movs	r2, #1
 800ef4a:	409a      	lsls	r2, r3
 800ef4c:	4b2b      	ldr	r3, [pc, #172]	; (800effc <xTaskResumeAll+0x120>)
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	4313      	orrs	r3, r2
 800ef52:	4a2a      	ldr	r2, [pc, #168]	; (800effc <xTaskResumeAll+0x120>)
 800ef54:	6013      	str	r3, [r2, #0]
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef5a:	4613      	mov	r3, r2
 800ef5c:	009b      	lsls	r3, r3, #2
 800ef5e:	4413      	add	r3, r2
 800ef60:	009b      	lsls	r3, r3, #2
 800ef62:	4a27      	ldr	r2, [pc, #156]	; (800f000 <xTaskResumeAll+0x124>)
 800ef64:	441a      	add	r2, r3
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	3304      	adds	r3, #4
 800ef6a:	4619      	mov	r1, r3
 800ef6c:	4610      	mov	r0, r2
 800ef6e:	f7fe face 	bl	800d50e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef76:	4b23      	ldr	r3, [pc, #140]	; (800f004 <xTaskResumeAll+0x128>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef7c:	429a      	cmp	r2, r3
 800ef7e:	d302      	bcc.n	800ef86 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800ef80:	4b21      	ldr	r3, [pc, #132]	; (800f008 <xTaskResumeAll+0x12c>)
 800ef82:	2201      	movs	r2, #1
 800ef84:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ef86:	4b1c      	ldr	r3, [pc, #112]	; (800eff8 <xTaskResumeAll+0x11c>)
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d1cc      	bne.n	800ef28 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d001      	beq.n	800ef98 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ef94:	f000 fb5e 	bl	800f654 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ef98:	4b1c      	ldr	r3, [pc, #112]	; (800f00c <xTaskResumeAll+0x130>)
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d010      	beq.n	800efc6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800efa4:	f000 f836 	bl	800f014 <xTaskIncrementTick>
 800efa8:	4603      	mov	r3, r0
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d002      	beq.n	800efb4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800efae:	4b16      	ldr	r3, [pc, #88]	; (800f008 <xTaskResumeAll+0x12c>)
 800efb0:	2201      	movs	r2, #1
 800efb2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	3b01      	subs	r3, #1
 800efb8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d1f1      	bne.n	800efa4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800efc0:	4b12      	ldr	r3, [pc, #72]	; (800f00c <xTaskResumeAll+0x130>)
 800efc2:	2200      	movs	r2, #0
 800efc4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800efc6:	4b10      	ldr	r3, [pc, #64]	; (800f008 <xTaskResumeAll+0x12c>)
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d009      	beq.n	800efe2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800efce:	2301      	movs	r3, #1
 800efd0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800efd2:	4b0f      	ldr	r3, [pc, #60]	; (800f010 <xTaskResumeAll+0x134>)
 800efd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efd8:	601a      	str	r2, [r3, #0]
 800efda:	f3bf 8f4f 	dsb	sy
 800efde:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800efe2:	f001 f8f7 	bl	80101d4 <vPortExitCritical>

	return xAlreadyYielded;
 800efe6:	68bb      	ldr	r3, [r7, #8]
}
 800efe8:	4618      	mov	r0, r3
 800efea:	3710      	adds	r7, #16
 800efec:	46bd      	mov	sp, r7
 800efee:	bd80      	pop	{r7, pc}
 800eff0:	20000928 	.word	0x20000928
 800eff4:	20000900 	.word	0x20000900
 800eff8:	200008c0 	.word	0x200008c0
 800effc:	20000908 	.word	0x20000908
 800f000:	20000804 	.word	0x20000804
 800f004:	20000800 	.word	0x20000800
 800f008:	20000914 	.word	0x20000914
 800f00c:	20000910 	.word	0x20000910
 800f010:	e000ed04 	.word	0xe000ed04

0800f014 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b086      	sub	sp, #24
 800f018:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f01a:	2300      	movs	r3, #0
 800f01c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f01e:	4b4e      	ldr	r3, [pc, #312]	; (800f158 <xTaskIncrementTick+0x144>)
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	2b00      	cmp	r3, #0
 800f024:	f040 808e 	bne.w	800f144 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f028:	4b4c      	ldr	r3, [pc, #304]	; (800f15c <xTaskIncrementTick+0x148>)
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	3301      	adds	r3, #1
 800f02e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f030:	4a4a      	ldr	r2, [pc, #296]	; (800f15c <xTaskIncrementTick+0x148>)
 800f032:	693b      	ldr	r3, [r7, #16]
 800f034:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f036:	693b      	ldr	r3, [r7, #16]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d120      	bne.n	800f07e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f03c:	4b48      	ldr	r3, [pc, #288]	; (800f160 <xTaskIncrementTick+0x14c>)
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d00a      	beq.n	800f05c <xTaskIncrementTick+0x48>
	__asm volatile
 800f046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f04a:	f383 8811 	msr	BASEPRI, r3
 800f04e:	f3bf 8f6f 	isb	sy
 800f052:	f3bf 8f4f 	dsb	sy
 800f056:	603b      	str	r3, [r7, #0]
}
 800f058:	bf00      	nop
 800f05a:	e7fe      	b.n	800f05a <xTaskIncrementTick+0x46>
 800f05c:	4b40      	ldr	r3, [pc, #256]	; (800f160 <xTaskIncrementTick+0x14c>)
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	60fb      	str	r3, [r7, #12]
 800f062:	4b40      	ldr	r3, [pc, #256]	; (800f164 <xTaskIncrementTick+0x150>)
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	4a3e      	ldr	r2, [pc, #248]	; (800f160 <xTaskIncrementTick+0x14c>)
 800f068:	6013      	str	r3, [r2, #0]
 800f06a:	4a3e      	ldr	r2, [pc, #248]	; (800f164 <xTaskIncrementTick+0x150>)
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	6013      	str	r3, [r2, #0]
 800f070:	4b3d      	ldr	r3, [pc, #244]	; (800f168 <xTaskIncrementTick+0x154>)
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	3301      	adds	r3, #1
 800f076:	4a3c      	ldr	r2, [pc, #240]	; (800f168 <xTaskIncrementTick+0x154>)
 800f078:	6013      	str	r3, [r2, #0]
 800f07a:	f000 faeb 	bl	800f654 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f07e:	4b3b      	ldr	r3, [pc, #236]	; (800f16c <xTaskIncrementTick+0x158>)
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	693a      	ldr	r2, [r7, #16]
 800f084:	429a      	cmp	r2, r3
 800f086:	d348      	bcc.n	800f11a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f088:	4b35      	ldr	r3, [pc, #212]	; (800f160 <xTaskIncrementTick+0x14c>)
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d104      	bne.n	800f09c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f092:	4b36      	ldr	r3, [pc, #216]	; (800f16c <xTaskIncrementTick+0x158>)
 800f094:	f04f 32ff 	mov.w	r2, #4294967295
 800f098:	601a      	str	r2, [r3, #0]
					break;
 800f09a:	e03e      	b.n	800f11a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f09c:	4b30      	ldr	r3, [pc, #192]	; (800f160 <xTaskIncrementTick+0x14c>)
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	68db      	ldr	r3, [r3, #12]
 800f0a2:	68db      	ldr	r3, [r3, #12]
 800f0a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f0a6:	68bb      	ldr	r3, [r7, #8]
 800f0a8:	685b      	ldr	r3, [r3, #4]
 800f0aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f0ac:	693a      	ldr	r2, [r7, #16]
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	429a      	cmp	r2, r3
 800f0b2:	d203      	bcs.n	800f0bc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f0b4:	4a2d      	ldr	r2, [pc, #180]	; (800f16c <xTaskIncrementTick+0x158>)
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f0ba:	e02e      	b.n	800f11a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	3304      	adds	r3, #4
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	f7fe fa81 	bl	800d5c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d004      	beq.n	800f0d8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f0ce:	68bb      	ldr	r3, [r7, #8]
 800f0d0:	3318      	adds	r3, #24
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f7fe fa78 	bl	800d5c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f0d8:	68bb      	ldr	r3, [r7, #8]
 800f0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0dc:	2201      	movs	r2, #1
 800f0de:	409a      	lsls	r2, r3
 800f0e0:	4b23      	ldr	r3, [pc, #140]	; (800f170 <xTaskIncrementTick+0x15c>)
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	4313      	orrs	r3, r2
 800f0e6:	4a22      	ldr	r2, [pc, #136]	; (800f170 <xTaskIncrementTick+0x15c>)
 800f0e8:	6013      	str	r3, [r2, #0]
 800f0ea:	68bb      	ldr	r3, [r7, #8]
 800f0ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0ee:	4613      	mov	r3, r2
 800f0f0:	009b      	lsls	r3, r3, #2
 800f0f2:	4413      	add	r3, r2
 800f0f4:	009b      	lsls	r3, r3, #2
 800f0f6:	4a1f      	ldr	r2, [pc, #124]	; (800f174 <xTaskIncrementTick+0x160>)
 800f0f8:	441a      	add	r2, r3
 800f0fa:	68bb      	ldr	r3, [r7, #8]
 800f0fc:	3304      	adds	r3, #4
 800f0fe:	4619      	mov	r1, r3
 800f100:	4610      	mov	r0, r2
 800f102:	f7fe fa04 	bl	800d50e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f106:	68bb      	ldr	r3, [r7, #8]
 800f108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f10a:	4b1b      	ldr	r3, [pc, #108]	; (800f178 <xTaskIncrementTick+0x164>)
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f110:	429a      	cmp	r2, r3
 800f112:	d3b9      	bcc.n	800f088 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f114:	2301      	movs	r3, #1
 800f116:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f118:	e7b6      	b.n	800f088 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f11a:	4b17      	ldr	r3, [pc, #92]	; (800f178 <xTaskIncrementTick+0x164>)
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f120:	4914      	ldr	r1, [pc, #80]	; (800f174 <xTaskIncrementTick+0x160>)
 800f122:	4613      	mov	r3, r2
 800f124:	009b      	lsls	r3, r3, #2
 800f126:	4413      	add	r3, r2
 800f128:	009b      	lsls	r3, r3, #2
 800f12a:	440b      	add	r3, r1
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	2b01      	cmp	r3, #1
 800f130:	d901      	bls.n	800f136 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800f132:	2301      	movs	r3, #1
 800f134:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f136:	4b11      	ldr	r3, [pc, #68]	; (800f17c <xTaskIncrementTick+0x168>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d007      	beq.n	800f14e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800f13e:	2301      	movs	r3, #1
 800f140:	617b      	str	r3, [r7, #20]
 800f142:	e004      	b.n	800f14e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f144:	4b0e      	ldr	r3, [pc, #56]	; (800f180 <xTaskIncrementTick+0x16c>)
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	3301      	adds	r3, #1
 800f14a:	4a0d      	ldr	r2, [pc, #52]	; (800f180 <xTaskIncrementTick+0x16c>)
 800f14c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f14e:	697b      	ldr	r3, [r7, #20]
}
 800f150:	4618      	mov	r0, r3
 800f152:	3718      	adds	r7, #24
 800f154:	46bd      	mov	sp, r7
 800f156:	bd80      	pop	{r7, pc}
 800f158:	20000928 	.word	0x20000928
 800f15c:	20000904 	.word	0x20000904
 800f160:	200008b8 	.word	0x200008b8
 800f164:	200008bc 	.word	0x200008bc
 800f168:	20000918 	.word	0x20000918
 800f16c:	20000920 	.word	0x20000920
 800f170:	20000908 	.word	0x20000908
 800f174:	20000804 	.word	0x20000804
 800f178:	20000800 	.word	0x20000800
 800f17c:	20000914 	.word	0x20000914
 800f180:	20000910 	.word	0x20000910

0800f184 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f184:	b580      	push	{r7, lr}
 800f186:	b088      	sub	sp, #32
 800f188:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f18a:	4b39      	ldr	r3, [pc, #228]	; (800f270 <vTaskSwitchContext+0xec>)
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d003      	beq.n	800f19a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f192:	4b38      	ldr	r3, [pc, #224]	; (800f274 <vTaskSwitchContext+0xf0>)
 800f194:	2201      	movs	r2, #1
 800f196:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f198:	e066      	b.n	800f268 <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 800f19a:	4b36      	ldr	r3, [pc, #216]	; (800f274 <vTaskSwitchContext+0xf0>)
 800f19c:	2200      	movs	r2, #0
 800f19e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800f1a0:	4b35      	ldr	r3, [pc, #212]	; (800f278 <vTaskSwitchContext+0xf4>)
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1a6:	61fb      	str	r3, [r7, #28]
 800f1a8:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800f1ac:	61bb      	str	r3, [r7, #24]
 800f1ae:	69fb      	ldr	r3, [r7, #28]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	69ba      	ldr	r2, [r7, #24]
 800f1b4:	429a      	cmp	r2, r3
 800f1b6:	d111      	bne.n	800f1dc <vTaskSwitchContext+0x58>
 800f1b8:	69fb      	ldr	r3, [r7, #28]
 800f1ba:	3304      	adds	r3, #4
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	69ba      	ldr	r2, [r7, #24]
 800f1c0:	429a      	cmp	r2, r3
 800f1c2:	d10b      	bne.n	800f1dc <vTaskSwitchContext+0x58>
 800f1c4:	69fb      	ldr	r3, [r7, #28]
 800f1c6:	3308      	adds	r3, #8
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	69ba      	ldr	r2, [r7, #24]
 800f1cc:	429a      	cmp	r2, r3
 800f1ce:	d105      	bne.n	800f1dc <vTaskSwitchContext+0x58>
 800f1d0:	69fb      	ldr	r3, [r7, #28]
 800f1d2:	330c      	adds	r3, #12
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	69ba      	ldr	r2, [r7, #24]
 800f1d8:	429a      	cmp	r2, r3
 800f1da:	d008      	beq.n	800f1ee <vTaskSwitchContext+0x6a>
 800f1dc:	4b26      	ldr	r3, [pc, #152]	; (800f278 <vTaskSwitchContext+0xf4>)
 800f1de:	681a      	ldr	r2, [r3, #0]
 800f1e0:	4b25      	ldr	r3, [pc, #148]	; (800f278 <vTaskSwitchContext+0xf4>)
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	3334      	adds	r3, #52	; 0x34
 800f1e6:	4619      	mov	r1, r3
 800f1e8:	4610      	mov	r0, r2
 800f1ea:	f7f1 fcb0 	bl	8000b4e <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1ee:	4b23      	ldr	r3, [pc, #140]	; (800f27c <vTaskSwitchContext+0xf8>)
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	fab3 f383 	clz	r3, r3
 800f1fa:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800f1fc:	7afb      	ldrb	r3, [r7, #11]
 800f1fe:	f1c3 031f 	rsb	r3, r3, #31
 800f202:	617b      	str	r3, [r7, #20]
 800f204:	491e      	ldr	r1, [pc, #120]	; (800f280 <vTaskSwitchContext+0xfc>)
 800f206:	697a      	ldr	r2, [r7, #20]
 800f208:	4613      	mov	r3, r2
 800f20a:	009b      	lsls	r3, r3, #2
 800f20c:	4413      	add	r3, r2
 800f20e:	009b      	lsls	r3, r3, #2
 800f210:	440b      	add	r3, r1
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d10a      	bne.n	800f22e <vTaskSwitchContext+0xaa>
	__asm volatile
 800f218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f21c:	f383 8811 	msr	BASEPRI, r3
 800f220:	f3bf 8f6f 	isb	sy
 800f224:	f3bf 8f4f 	dsb	sy
 800f228:	607b      	str	r3, [r7, #4]
}
 800f22a:	bf00      	nop
 800f22c:	e7fe      	b.n	800f22c <vTaskSwitchContext+0xa8>
 800f22e:	697a      	ldr	r2, [r7, #20]
 800f230:	4613      	mov	r3, r2
 800f232:	009b      	lsls	r3, r3, #2
 800f234:	4413      	add	r3, r2
 800f236:	009b      	lsls	r3, r3, #2
 800f238:	4a11      	ldr	r2, [pc, #68]	; (800f280 <vTaskSwitchContext+0xfc>)
 800f23a:	4413      	add	r3, r2
 800f23c:	613b      	str	r3, [r7, #16]
 800f23e:	693b      	ldr	r3, [r7, #16]
 800f240:	685b      	ldr	r3, [r3, #4]
 800f242:	685a      	ldr	r2, [r3, #4]
 800f244:	693b      	ldr	r3, [r7, #16]
 800f246:	605a      	str	r2, [r3, #4]
 800f248:	693b      	ldr	r3, [r7, #16]
 800f24a:	685a      	ldr	r2, [r3, #4]
 800f24c:	693b      	ldr	r3, [r7, #16]
 800f24e:	3308      	adds	r3, #8
 800f250:	429a      	cmp	r2, r3
 800f252:	d104      	bne.n	800f25e <vTaskSwitchContext+0xda>
 800f254:	693b      	ldr	r3, [r7, #16]
 800f256:	685b      	ldr	r3, [r3, #4]
 800f258:	685a      	ldr	r2, [r3, #4]
 800f25a:	693b      	ldr	r3, [r7, #16]
 800f25c:	605a      	str	r2, [r3, #4]
 800f25e:	693b      	ldr	r3, [r7, #16]
 800f260:	685b      	ldr	r3, [r3, #4]
 800f262:	68db      	ldr	r3, [r3, #12]
 800f264:	4a04      	ldr	r2, [pc, #16]	; (800f278 <vTaskSwitchContext+0xf4>)
 800f266:	6013      	str	r3, [r2, #0]
}
 800f268:	bf00      	nop
 800f26a:	3720      	adds	r7, #32
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd80      	pop	{r7, pc}
 800f270:	20000928 	.word	0x20000928
 800f274:	20000914 	.word	0x20000914
 800f278:	20000800 	.word	0x20000800
 800f27c:	20000908 	.word	0x20000908
 800f280:	20000804 	.word	0x20000804

0800f284 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b084      	sub	sp, #16
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]
 800f28c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d10a      	bne.n	800f2aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f298:	f383 8811 	msr	BASEPRI, r3
 800f29c:	f3bf 8f6f 	isb	sy
 800f2a0:	f3bf 8f4f 	dsb	sy
 800f2a4:	60fb      	str	r3, [r7, #12]
}
 800f2a6:	bf00      	nop
 800f2a8:	e7fe      	b.n	800f2a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f2aa:	4b07      	ldr	r3, [pc, #28]	; (800f2c8 <vTaskPlaceOnEventList+0x44>)
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	3318      	adds	r3, #24
 800f2b0:	4619      	mov	r1, r3
 800f2b2:	6878      	ldr	r0, [r7, #4]
 800f2b4:	f7fe f94f 	bl	800d556 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f2b8:	2101      	movs	r1, #1
 800f2ba:	6838      	ldr	r0, [r7, #0]
 800f2bc:	f000 fdc6 	bl	800fe4c <prvAddCurrentTaskToDelayedList>
}
 800f2c0:	bf00      	nop
 800f2c2:	3710      	adds	r7, #16
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	bd80      	pop	{r7, pc}
 800f2c8:	20000800 	.word	0x20000800

0800f2cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b086      	sub	sp, #24
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	68db      	ldr	r3, [r3, #12]
 800f2d8:	68db      	ldr	r3, [r3, #12]
 800f2da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f2dc:	693b      	ldr	r3, [r7, #16]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d10a      	bne.n	800f2f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2e6:	f383 8811 	msr	BASEPRI, r3
 800f2ea:	f3bf 8f6f 	isb	sy
 800f2ee:	f3bf 8f4f 	dsb	sy
 800f2f2:	60fb      	str	r3, [r7, #12]
}
 800f2f4:	bf00      	nop
 800f2f6:	e7fe      	b.n	800f2f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f2f8:	693b      	ldr	r3, [r7, #16]
 800f2fa:	3318      	adds	r3, #24
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	f7fe f963 	bl	800d5c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f302:	4b1d      	ldr	r3, [pc, #116]	; (800f378 <xTaskRemoveFromEventList+0xac>)
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d11c      	bne.n	800f344 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f30a:	693b      	ldr	r3, [r7, #16]
 800f30c:	3304      	adds	r3, #4
 800f30e:	4618      	mov	r0, r3
 800f310:	f7fe f95a 	bl	800d5c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f314:	693b      	ldr	r3, [r7, #16]
 800f316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f318:	2201      	movs	r2, #1
 800f31a:	409a      	lsls	r2, r3
 800f31c:	4b17      	ldr	r3, [pc, #92]	; (800f37c <xTaskRemoveFromEventList+0xb0>)
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	4313      	orrs	r3, r2
 800f322:	4a16      	ldr	r2, [pc, #88]	; (800f37c <xTaskRemoveFromEventList+0xb0>)
 800f324:	6013      	str	r3, [r2, #0]
 800f326:	693b      	ldr	r3, [r7, #16]
 800f328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f32a:	4613      	mov	r3, r2
 800f32c:	009b      	lsls	r3, r3, #2
 800f32e:	4413      	add	r3, r2
 800f330:	009b      	lsls	r3, r3, #2
 800f332:	4a13      	ldr	r2, [pc, #76]	; (800f380 <xTaskRemoveFromEventList+0xb4>)
 800f334:	441a      	add	r2, r3
 800f336:	693b      	ldr	r3, [r7, #16]
 800f338:	3304      	adds	r3, #4
 800f33a:	4619      	mov	r1, r3
 800f33c:	4610      	mov	r0, r2
 800f33e:	f7fe f8e6 	bl	800d50e <vListInsertEnd>
 800f342:	e005      	b.n	800f350 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f344:	693b      	ldr	r3, [r7, #16]
 800f346:	3318      	adds	r3, #24
 800f348:	4619      	mov	r1, r3
 800f34a:	480e      	ldr	r0, [pc, #56]	; (800f384 <xTaskRemoveFromEventList+0xb8>)
 800f34c:	f7fe f8df 	bl	800d50e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f350:	693b      	ldr	r3, [r7, #16]
 800f352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f354:	4b0c      	ldr	r3, [pc, #48]	; (800f388 <xTaskRemoveFromEventList+0xbc>)
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f35a:	429a      	cmp	r2, r3
 800f35c:	d905      	bls.n	800f36a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f35e:	2301      	movs	r3, #1
 800f360:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f362:	4b0a      	ldr	r3, [pc, #40]	; (800f38c <xTaskRemoveFromEventList+0xc0>)
 800f364:	2201      	movs	r2, #1
 800f366:	601a      	str	r2, [r3, #0]
 800f368:	e001      	b.n	800f36e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800f36a:	2300      	movs	r3, #0
 800f36c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f36e:	697b      	ldr	r3, [r7, #20]
}
 800f370:	4618      	mov	r0, r3
 800f372:	3718      	adds	r7, #24
 800f374:	46bd      	mov	sp, r7
 800f376:	bd80      	pop	{r7, pc}
 800f378:	20000928 	.word	0x20000928
 800f37c:	20000908 	.word	0x20000908
 800f380:	20000804 	.word	0x20000804
 800f384:	200008c0 	.word	0x200008c0
 800f388:	20000800 	.word	0x20000800
 800f38c:	20000914 	.word	0x20000914

0800f390 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f390:	b580      	push	{r7, lr}
 800f392:	b084      	sub	sp, #16
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d10a      	bne.n	800f3b4 <vTaskSetTimeOutState+0x24>
	__asm volatile
 800f39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3a2:	f383 8811 	msr	BASEPRI, r3
 800f3a6:	f3bf 8f6f 	isb	sy
 800f3aa:	f3bf 8f4f 	dsb	sy
 800f3ae:	60fb      	str	r3, [r7, #12]
}
 800f3b0:	bf00      	nop
 800f3b2:	e7fe      	b.n	800f3b2 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800f3b4:	f000 fede 	bl	8010174 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f3b8:	4b06      	ldr	r3, [pc, #24]	; (800f3d4 <vTaskSetTimeOutState+0x44>)
 800f3ba:	681a      	ldr	r2, [r3, #0]
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800f3c0:	4b05      	ldr	r3, [pc, #20]	; (800f3d8 <vTaskSetTimeOutState+0x48>)
 800f3c2:	681a      	ldr	r2, [r3, #0]
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800f3c8:	f000 ff04 	bl	80101d4 <vPortExitCritical>
}
 800f3cc:	bf00      	nop
 800f3ce:	3710      	adds	r7, #16
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd80      	pop	{r7, pc}
 800f3d4:	20000918 	.word	0x20000918
 800f3d8:	20000904 	.word	0x20000904

0800f3dc <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f3dc:	b480      	push	{r7}
 800f3de:	b083      	sub	sp, #12
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f3e4:	4b06      	ldr	r3, [pc, #24]	; (800f400 <vTaskInternalSetTimeOutState+0x24>)
 800f3e6:	681a      	ldr	r2, [r3, #0]
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f3ec:	4b05      	ldr	r3, [pc, #20]	; (800f404 <vTaskInternalSetTimeOutState+0x28>)
 800f3ee:	681a      	ldr	r2, [r3, #0]
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	605a      	str	r2, [r3, #4]
}
 800f3f4:	bf00      	nop
 800f3f6:	370c      	adds	r7, #12
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fe:	4770      	bx	lr
 800f400:	20000918 	.word	0x20000918
 800f404:	20000904 	.word	0x20000904

0800f408 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b088      	sub	sp, #32
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
 800f410:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d10a      	bne.n	800f42e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f41c:	f383 8811 	msr	BASEPRI, r3
 800f420:	f3bf 8f6f 	isb	sy
 800f424:	f3bf 8f4f 	dsb	sy
 800f428:	613b      	str	r3, [r7, #16]
}
 800f42a:	bf00      	nop
 800f42c:	e7fe      	b.n	800f42c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d10a      	bne.n	800f44a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f438:	f383 8811 	msr	BASEPRI, r3
 800f43c:	f3bf 8f6f 	isb	sy
 800f440:	f3bf 8f4f 	dsb	sy
 800f444:	60fb      	str	r3, [r7, #12]
}
 800f446:	bf00      	nop
 800f448:	e7fe      	b.n	800f448 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f44a:	f000 fe93 	bl	8010174 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f44e:	4b1d      	ldr	r3, [pc, #116]	; (800f4c4 <xTaskCheckForTimeOut+0xbc>)
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	685b      	ldr	r3, [r3, #4]
 800f458:	69ba      	ldr	r2, [r7, #24]
 800f45a:	1ad3      	subs	r3, r2, r3
 800f45c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f45e:	683b      	ldr	r3, [r7, #0]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f466:	d102      	bne.n	800f46e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f468:	2300      	movs	r3, #0
 800f46a:	61fb      	str	r3, [r7, #28]
 800f46c:	e023      	b.n	800f4b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	681a      	ldr	r2, [r3, #0]
 800f472:	4b15      	ldr	r3, [pc, #84]	; (800f4c8 <xTaskCheckForTimeOut+0xc0>)
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	429a      	cmp	r2, r3
 800f478:	d007      	beq.n	800f48a <xTaskCheckForTimeOut+0x82>
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	685b      	ldr	r3, [r3, #4]
 800f47e:	69ba      	ldr	r2, [r7, #24]
 800f480:	429a      	cmp	r2, r3
 800f482:	d302      	bcc.n	800f48a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f484:	2301      	movs	r3, #1
 800f486:	61fb      	str	r3, [r7, #28]
 800f488:	e015      	b.n	800f4b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f48a:	683b      	ldr	r3, [r7, #0]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	697a      	ldr	r2, [r7, #20]
 800f490:	429a      	cmp	r2, r3
 800f492:	d20b      	bcs.n	800f4ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	681a      	ldr	r2, [r3, #0]
 800f498:	697b      	ldr	r3, [r7, #20]
 800f49a:	1ad2      	subs	r2, r2, r3
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f4a0:	6878      	ldr	r0, [r7, #4]
 800f4a2:	f7ff ff9b 	bl	800f3dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	61fb      	str	r3, [r7, #28]
 800f4aa:	e004      	b.n	800f4b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f4ac:	683b      	ldr	r3, [r7, #0]
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f4b2:	2301      	movs	r3, #1
 800f4b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f4b6:	f000 fe8d 	bl	80101d4 <vPortExitCritical>

	return xReturn;
 800f4ba:	69fb      	ldr	r3, [r7, #28]
}
 800f4bc:	4618      	mov	r0, r3
 800f4be:	3720      	adds	r7, #32
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd80      	pop	{r7, pc}
 800f4c4:	20000904 	.word	0x20000904
 800f4c8:	20000918 	.word	0x20000918

0800f4cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f4cc:	b480      	push	{r7}
 800f4ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f4d0:	4b03      	ldr	r3, [pc, #12]	; (800f4e0 <vTaskMissedYield+0x14>)
 800f4d2:	2201      	movs	r2, #1
 800f4d4:	601a      	str	r2, [r3, #0]
}
 800f4d6:	bf00      	nop
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4de:	4770      	bx	lr
 800f4e0:	20000914 	.word	0x20000914

0800f4e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b082      	sub	sp, #8
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f4ec:	f000 f854 	bl	800f598 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f4f0:	4b07      	ldr	r3, [pc, #28]	; (800f510 <prvIdleTask+0x2c>)
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	2b01      	cmp	r3, #1
 800f4f6:	d907      	bls.n	800f508 <prvIdleTask+0x24>
			{
				taskYIELD();
 800f4f8:	4b06      	ldr	r3, [pc, #24]	; (800f514 <prvIdleTask+0x30>)
 800f4fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f4fe:	601a      	str	r2, [r3, #0]
 800f500:	f3bf 8f4f 	dsb	sy
 800f504:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800f508:	f7f1 fb1a 	bl	8000b40 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800f50c:	e7ee      	b.n	800f4ec <prvIdleTask+0x8>
 800f50e:	bf00      	nop
 800f510:	20000804 	.word	0x20000804
 800f514:	e000ed04 	.word	0xe000ed04

0800f518 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b082      	sub	sp, #8
 800f51c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f51e:	2300      	movs	r3, #0
 800f520:	607b      	str	r3, [r7, #4]
 800f522:	e00c      	b.n	800f53e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f524:	687a      	ldr	r2, [r7, #4]
 800f526:	4613      	mov	r3, r2
 800f528:	009b      	lsls	r3, r3, #2
 800f52a:	4413      	add	r3, r2
 800f52c:	009b      	lsls	r3, r3, #2
 800f52e:	4a12      	ldr	r2, [pc, #72]	; (800f578 <prvInitialiseTaskLists+0x60>)
 800f530:	4413      	add	r3, r2
 800f532:	4618      	mov	r0, r3
 800f534:	f7fd ffbe 	bl	800d4b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	3301      	adds	r3, #1
 800f53c:	607b      	str	r3, [r7, #4]
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	2b06      	cmp	r3, #6
 800f542:	d9ef      	bls.n	800f524 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f544:	480d      	ldr	r0, [pc, #52]	; (800f57c <prvInitialiseTaskLists+0x64>)
 800f546:	f7fd ffb5 	bl	800d4b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f54a:	480d      	ldr	r0, [pc, #52]	; (800f580 <prvInitialiseTaskLists+0x68>)
 800f54c:	f7fd ffb2 	bl	800d4b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f550:	480c      	ldr	r0, [pc, #48]	; (800f584 <prvInitialiseTaskLists+0x6c>)
 800f552:	f7fd ffaf 	bl	800d4b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f556:	480c      	ldr	r0, [pc, #48]	; (800f588 <prvInitialiseTaskLists+0x70>)
 800f558:	f7fd ffac 	bl	800d4b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f55c:	480b      	ldr	r0, [pc, #44]	; (800f58c <prvInitialiseTaskLists+0x74>)
 800f55e:	f7fd ffa9 	bl	800d4b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f562:	4b0b      	ldr	r3, [pc, #44]	; (800f590 <prvInitialiseTaskLists+0x78>)
 800f564:	4a05      	ldr	r2, [pc, #20]	; (800f57c <prvInitialiseTaskLists+0x64>)
 800f566:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f568:	4b0a      	ldr	r3, [pc, #40]	; (800f594 <prvInitialiseTaskLists+0x7c>)
 800f56a:	4a05      	ldr	r2, [pc, #20]	; (800f580 <prvInitialiseTaskLists+0x68>)
 800f56c:	601a      	str	r2, [r3, #0]
}
 800f56e:	bf00      	nop
 800f570:	3708      	adds	r7, #8
 800f572:	46bd      	mov	sp, r7
 800f574:	bd80      	pop	{r7, pc}
 800f576:	bf00      	nop
 800f578:	20000804 	.word	0x20000804
 800f57c:	20000890 	.word	0x20000890
 800f580:	200008a4 	.word	0x200008a4
 800f584:	200008c0 	.word	0x200008c0
 800f588:	200008d4 	.word	0x200008d4
 800f58c:	200008ec 	.word	0x200008ec
 800f590:	200008b8 	.word	0x200008b8
 800f594:	200008bc 	.word	0x200008bc

0800f598 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b082      	sub	sp, #8
 800f59c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f59e:	e019      	b.n	800f5d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f5a0:	f000 fde8 	bl	8010174 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f5a4:	4b10      	ldr	r3, [pc, #64]	; (800f5e8 <prvCheckTasksWaitingTermination+0x50>)
 800f5a6:	68db      	ldr	r3, [r3, #12]
 800f5a8:	68db      	ldr	r3, [r3, #12]
 800f5aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	3304      	adds	r3, #4
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	f7fe f809 	bl	800d5c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f5b6:	4b0d      	ldr	r3, [pc, #52]	; (800f5ec <prvCheckTasksWaitingTermination+0x54>)
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	3b01      	subs	r3, #1
 800f5bc:	4a0b      	ldr	r2, [pc, #44]	; (800f5ec <prvCheckTasksWaitingTermination+0x54>)
 800f5be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f5c0:	4b0b      	ldr	r3, [pc, #44]	; (800f5f0 <prvCheckTasksWaitingTermination+0x58>)
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	3b01      	subs	r3, #1
 800f5c6:	4a0a      	ldr	r2, [pc, #40]	; (800f5f0 <prvCheckTasksWaitingTermination+0x58>)
 800f5c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f5ca:	f000 fe03 	bl	80101d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f5ce:	6878      	ldr	r0, [r7, #4]
 800f5d0:	f000 f810 	bl	800f5f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f5d4:	4b06      	ldr	r3, [pc, #24]	; (800f5f0 <prvCheckTasksWaitingTermination+0x58>)
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d1e1      	bne.n	800f5a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f5dc:	bf00      	nop
 800f5de:	bf00      	nop
 800f5e0:	3708      	adds	r7, #8
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	bd80      	pop	{r7, pc}
 800f5e6:	bf00      	nop
 800f5e8:	200008d4 	.word	0x200008d4
 800f5ec:	20000900 	.word	0x20000900
 800f5f0:	200008e8 	.word	0x200008e8

0800f5f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b084      	sub	sp, #16
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800f602:	2b00      	cmp	r3, #0
 800f604:	d108      	bne.n	800f618 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f60a:	4618      	mov	r0, r3
 800f60c:	f000 ffa4 	bl	8010558 <vPortFree>
				vPortFree( pxTCB );
 800f610:	6878      	ldr	r0, [r7, #4]
 800f612:	f000 ffa1 	bl	8010558 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f616:	e018      	b.n	800f64a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800f61e:	2b01      	cmp	r3, #1
 800f620:	d103      	bne.n	800f62a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f622:	6878      	ldr	r0, [r7, #4]
 800f624:	f000 ff98 	bl	8010558 <vPortFree>
	}
 800f628:	e00f      	b.n	800f64a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800f630:	2b02      	cmp	r3, #2
 800f632:	d00a      	beq.n	800f64a <prvDeleteTCB+0x56>
	__asm volatile
 800f634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f638:	f383 8811 	msr	BASEPRI, r3
 800f63c:	f3bf 8f6f 	isb	sy
 800f640:	f3bf 8f4f 	dsb	sy
 800f644:	60fb      	str	r3, [r7, #12]
}
 800f646:	bf00      	nop
 800f648:	e7fe      	b.n	800f648 <prvDeleteTCB+0x54>
	}
 800f64a:	bf00      	nop
 800f64c:	3710      	adds	r7, #16
 800f64e:	46bd      	mov	sp, r7
 800f650:	bd80      	pop	{r7, pc}
	...

0800f654 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f654:	b480      	push	{r7}
 800f656:	b083      	sub	sp, #12
 800f658:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f65a:	4b0c      	ldr	r3, [pc, #48]	; (800f68c <prvResetNextTaskUnblockTime+0x38>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d104      	bne.n	800f66e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f664:	4b0a      	ldr	r3, [pc, #40]	; (800f690 <prvResetNextTaskUnblockTime+0x3c>)
 800f666:	f04f 32ff 	mov.w	r2, #4294967295
 800f66a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f66c:	e008      	b.n	800f680 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f66e:	4b07      	ldr	r3, [pc, #28]	; (800f68c <prvResetNextTaskUnblockTime+0x38>)
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	68db      	ldr	r3, [r3, #12]
 800f674:	68db      	ldr	r3, [r3, #12]
 800f676:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	685b      	ldr	r3, [r3, #4]
 800f67c:	4a04      	ldr	r2, [pc, #16]	; (800f690 <prvResetNextTaskUnblockTime+0x3c>)
 800f67e:	6013      	str	r3, [r2, #0]
}
 800f680:	bf00      	nop
 800f682:	370c      	adds	r7, #12
 800f684:	46bd      	mov	sp, r7
 800f686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68a:	4770      	bx	lr
 800f68c:	200008b8 	.word	0x200008b8
 800f690:	20000920 	.word	0x20000920

0800f694 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800f694:	b480      	push	{r7}
 800f696:	b083      	sub	sp, #12
 800f698:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800f69a:	4b05      	ldr	r3, [pc, #20]	; (800f6b0 <xTaskGetCurrentTaskHandle+0x1c>)
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800f6a0:	687b      	ldr	r3, [r7, #4]
	}
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	370c      	adds	r7, #12
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ac:	4770      	bx	lr
 800f6ae:	bf00      	nop
 800f6b0:	20000800 	.word	0x20000800

0800f6b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f6b4:	b480      	push	{r7}
 800f6b6:	b083      	sub	sp, #12
 800f6b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f6ba:	4b0b      	ldr	r3, [pc, #44]	; (800f6e8 <xTaskGetSchedulerState+0x34>)
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d102      	bne.n	800f6c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f6c2:	2301      	movs	r3, #1
 800f6c4:	607b      	str	r3, [r7, #4]
 800f6c6:	e008      	b.n	800f6da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f6c8:	4b08      	ldr	r3, [pc, #32]	; (800f6ec <xTaskGetSchedulerState+0x38>)
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d102      	bne.n	800f6d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f6d0:	2302      	movs	r3, #2
 800f6d2:	607b      	str	r3, [r7, #4]
 800f6d4:	e001      	b.n	800f6da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f6da:	687b      	ldr	r3, [r7, #4]
	}
 800f6dc:	4618      	mov	r0, r3
 800f6de:	370c      	adds	r7, #12
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e6:	4770      	bx	lr
 800f6e8:	2000090c 	.word	0x2000090c
 800f6ec:	20000928 	.word	0x20000928

0800f6f0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b084      	sub	sp, #16
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d05e      	beq.n	800f7c4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f706:	68bb      	ldr	r3, [r7, #8]
 800f708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f70a:	4b31      	ldr	r3, [pc, #196]	; (800f7d0 <xTaskPriorityInherit+0xe0>)
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f710:	429a      	cmp	r2, r3
 800f712:	d24e      	bcs.n	800f7b2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f714:	68bb      	ldr	r3, [r7, #8]
 800f716:	699b      	ldr	r3, [r3, #24]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	db06      	blt.n	800f72a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f71c:	4b2c      	ldr	r3, [pc, #176]	; (800f7d0 <xTaskPriorityInherit+0xe0>)
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f722:	f1c3 0207 	rsb	r2, r3, #7
 800f726:	68bb      	ldr	r3, [r7, #8]
 800f728:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f72a:	68bb      	ldr	r3, [r7, #8]
 800f72c:	6959      	ldr	r1, [r3, #20]
 800f72e:	68bb      	ldr	r3, [r7, #8]
 800f730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f732:	4613      	mov	r3, r2
 800f734:	009b      	lsls	r3, r3, #2
 800f736:	4413      	add	r3, r2
 800f738:	009b      	lsls	r3, r3, #2
 800f73a:	4a26      	ldr	r2, [pc, #152]	; (800f7d4 <xTaskPriorityInherit+0xe4>)
 800f73c:	4413      	add	r3, r2
 800f73e:	4299      	cmp	r1, r3
 800f740:	d12f      	bne.n	800f7a2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f742:	68bb      	ldr	r3, [r7, #8]
 800f744:	3304      	adds	r3, #4
 800f746:	4618      	mov	r0, r3
 800f748:	f7fd ff3e 	bl	800d5c8 <uxListRemove>
 800f74c:	4603      	mov	r3, r0
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d10a      	bne.n	800f768 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800f752:	68bb      	ldr	r3, [r7, #8]
 800f754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f756:	2201      	movs	r2, #1
 800f758:	fa02 f303 	lsl.w	r3, r2, r3
 800f75c:	43da      	mvns	r2, r3
 800f75e:	4b1e      	ldr	r3, [pc, #120]	; (800f7d8 <xTaskPriorityInherit+0xe8>)
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	4013      	ands	r3, r2
 800f764:	4a1c      	ldr	r2, [pc, #112]	; (800f7d8 <xTaskPriorityInherit+0xe8>)
 800f766:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f768:	4b19      	ldr	r3, [pc, #100]	; (800f7d0 <xTaskPriorityInherit+0xe0>)
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f76e:	68bb      	ldr	r3, [r7, #8]
 800f770:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f772:	68bb      	ldr	r3, [r7, #8]
 800f774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f776:	2201      	movs	r2, #1
 800f778:	409a      	lsls	r2, r3
 800f77a:	4b17      	ldr	r3, [pc, #92]	; (800f7d8 <xTaskPriorityInherit+0xe8>)
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	4313      	orrs	r3, r2
 800f780:	4a15      	ldr	r2, [pc, #84]	; (800f7d8 <xTaskPriorityInherit+0xe8>)
 800f782:	6013      	str	r3, [r2, #0]
 800f784:	68bb      	ldr	r3, [r7, #8]
 800f786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f788:	4613      	mov	r3, r2
 800f78a:	009b      	lsls	r3, r3, #2
 800f78c:	4413      	add	r3, r2
 800f78e:	009b      	lsls	r3, r3, #2
 800f790:	4a10      	ldr	r2, [pc, #64]	; (800f7d4 <xTaskPriorityInherit+0xe4>)
 800f792:	441a      	add	r2, r3
 800f794:	68bb      	ldr	r3, [r7, #8]
 800f796:	3304      	adds	r3, #4
 800f798:	4619      	mov	r1, r3
 800f79a:	4610      	mov	r0, r2
 800f79c:	f7fd feb7 	bl	800d50e <vListInsertEnd>
 800f7a0:	e004      	b.n	800f7ac <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f7a2:	4b0b      	ldr	r3, [pc, #44]	; (800f7d0 <xTaskPriorityInherit+0xe0>)
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7a8:	68bb      	ldr	r3, [r7, #8]
 800f7aa:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f7ac:	2301      	movs	r3, #1
 800f7ae:	60fb      	str	r3, [r7, #12]
 800f7b0:	e008      	b.n	800f7c4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f7b2:	68bb      	ldr	r3, [r7, #8]
 800f7b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f7b6:	4b06      	ldr	r3, [pc, #24]	; (800f7d0 <xTaskPriorityInherit+0xe0>)
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7bc:	429a      	cmp	r2, r3
 800f7be:	d201      	bcs.n	800f7c4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f7c0:	2301      	movs	r3, #1
 800f7c2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f7c4:	68fb      	ldr	r3, [r7, #12]
	}
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	3710      	adds	r7, #16
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	bd80      	pop	{r7, pc}
 800f7ce:	bf00      	nop
 800f7d0:	20000800 	.word	0x20000800
 800f7d4:	20000804 	.word	0x20000804
 800f7d8:	20000908 	.word	0x20000908

0800f7dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b086      	sub	sp, #24
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d06e      	beq.n	800f8d0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f7f2:	4b3a      	ldr	r3, [pc, #232]	; (800f8dc <xTaskPriorityDisinherit+0x100>)
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	693a      	ldr	r2, [r7, #16]
 800f7f8:	429a      	cmp	r2, r3
 800f7fa:	d00a      	beq.n	800f812 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f800:	f383 8811 	msr	BASEPRI, r3
 800f804:	f3bf 8f6f 	isb	sy
 800f808:	f3bf 8f4f 	dsb	sy
 800f80c:	60fb      	str	r3, [r7, #12]
}
 800f80e:	bf00      	nop
 800f810:	e7fe      	b.n	800f810 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f812:	693b      	ldr	r3, [r7, #16]
 800f814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f816:	2b00      	cmp	r3, #0
 800f818:	d10a      	bne.n	800f830 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f81e:	f383 8811 	msr	BASEPRI, r3
 800f822:	f3bf 8f6f 	isb	sy
 800f826:	f3bf 8f4f 	dsb	sy
 800f82a:	60bb      	str	r3, [r7, #8]
}
 800f82c:	bf00      	nop
 800f82e:	e7fe      	b.n	800f82e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f830:	693b      	ldr	r3, [r7, #16]
 800f832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f834:	1e5a      	subs	r2, r3, #1
 800f836:	693b      	ldr	r3, [r7, #16]
 800f838:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f83a:	693b      	ldr	r3, [r7, #16]
 800f83c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f83e:	693b      	ldr	r3, [r7, #16]
 800f840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f842:	429a      	cmp	r2, r3
 800f844:	d044      	beq.n	800f8d0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f846:	693b      	ldr	r3, [r7, #16]
 800f848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d140      	bne.n	800f8d0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f84e:	693b      	ldr	r3, [r7, #16]
 800f850:	3304      	adds	r3, #4
 800f852:	4618      	mov	r0, r3
 800f854:	f7fd feb8 	bl	800d5c8 <uxListRemove>
 800f858:	4603      	mov	r3, r0
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d115      	bne.n	800f88a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f85e:	693b      	ldr	r3, [r7, #16]
 800f860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f862:	491f      	ldr	r1, [pc, #124]	; (800f8e0 <xTaskPriorityDisinherit+0x104>)
 800f864:	4613      	mov	r3, r2
 800f866:	009b      	lsls	r3, r3, #2
 800f868:	4413      	add	r3, r2
 800f86a:	009b      	lsls	r3, r3, #2
 800f86c:	440b      	add	r3, r1
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d10a      	bne.n	800f88a <xTaskPriorityDisinherit+0xae>
 800f874:	693b      	ldr	r3, [r7, #16]
 800f876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f878:	2201      	movs	r2, #1
 800f87a:	fa02 f303 	lsl.w	r3, r2, r3
 800f87e:	43da      	mvns	r2, r3
 800f880:	4b18      	ldr	r3, [pc, #96]	; (800f8e4 <xTaskPriorityDisinherit+0x108>)
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	4013      	ands	r3, r2
 800f886:	4a17      	ldr	r2, [pc, #92]	; (800f8e4 <xTaskPriorityDisinherit+0x108>)
 800f888:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f88a:	693b      	ldr	r3, [r7, #16]
 800f88c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f88e:	693b      	ldr	r3, [r7, #16]
 800f890:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f892:	693b      	ldr	r3, [r7, #16]
 800f894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f896:	f1c3 0207 	rsb	r2, r3, #7
 800f89a:	693b      	ldr	r3, [r7, #16]
 800f89c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f89e:	693b      	ldr	r3, [r7, #16]
 800f8a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8a2:	2201      	movs	r2, #1
 800f8a4:	409a      	lsls	r2, r3
 800f8a6:	4b0f      	ldr	r3, [pc, #60]	; (800f8e4 <xTaskPriorityDisinherit+0x108>)
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	4313      	orrs	r3, r2
 800f8ac:	4a0d      	ldr	r2, [pc, #52]	; (800f8e4 <xTaskPriorityDisinherit+0x108>)
 800f8ae:	6013      	str	r3, [r2, #0]
 800f8b0:	693b      	ldr	r3, [r7, #16]
 800f8b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8b4:	4613      	mov	r3, r2
 800f8b6:	009b      	lsls	r3, r3, #2
 800f8b8:	4413      	add	r3, r2
 800f8ba:	009b      	lsls	r3, r3, #2
 800f8bc:	4a08      	ldr	r2, [pc, #32]	; (800f8e0 <xTaskPriorityDisinherit+0x104>)
 800f8be:	441a      	add	r2, r3
 800f8c0:	693b      	ldr	r3, [r7, #16]
 800f8c2:	3304      	adds	r3, #4
 800f8c4:	4619      	mov	r1, r3
 800f8c6:	4610      	mov	r0, r2
 800f8c8:	f7fd fe21 	bl	800d50e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f8cc:	2301      	movs	r3, #1
 800f8ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f8d0:	697b      	ldr	r3, [r7, #20]
	}
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	3718      	adds	r7, #24
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}
 800f8da:	bf00      	nop
 800f8dc:	20000800 	.word	0x20000800
 800f8e0:	20000804 	.word	0x20000804
 800f8e4:	20000908 	.word	0x20000908

0800f8e8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b088      	sub	sp, #32
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
 800f8f0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f8f6:	2301      	movs	r3, #1
 800f8f8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d077      	beq.n	800f9f0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f900:	69bb      	ldr	r3, [r7, #24]
 800f902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f904:	2b00      	cmp	r3, #0
 800f906:	d10a      	bne.n	800f91e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800f908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f90c:	f383 8811 	msr	BASEPRI, r3
 800f910:	f3bf 8f6f 	isb	sy
 800f914:	f3bf 8f4f 	dsb	sy
 800f918:	60fb      	str	r3, [r7, #12]
}
 800f91a:	bf00      	nop
 800f91c:	e7fe      	b.n	800f91c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f91e:	69bb      	ldr	r3, [r7, #24]
 800f920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f922:	683a      	ldr	r2, [r7, #0]
 800f924:	429a      	cmp	r2, r3
 800f926:	d902      	bls.n	800f92e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f928:	683b      	ldr	r3, [r7, #0]
 800f92a:	61fb      	str	r3, [r7, #28]
 800f92c:	e002      	b.n	800f934 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f92e:	69bb      	ldr	r3, [r7, #24]
 800f930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f932:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f934:	69bb      	ldr	r3, [r7, #24]
 800f936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f938:	69fa      	ldr	r2, [r7, #28]
 800f93a:	429a      	cmp	r2, r3
 800f93c:	d058      	beq.n	800f9f0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f93e:	69bb      	ldr	r3, [r7, #24]
 800f940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f942:	697a      	ldr	r2, [r7, #20]
 800f944:	429a      	cmp	r2, r3
 800f946:	d153      	bne.n	800f9f0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f948:	4b2b      	ldr	r3, [pc, #172]	; (800f9f8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	69ba      	ldr	r2, [r7, #24]
 800f94e:	429a      	cmp	r2, r3
 800f950:	d10a      	bne.n	800f968 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800f952:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f956:	f383 8811 	msr	BASEPRI, r3
 800f95a:	f3bf 8f6f 	isb	sy
 800f95e:	f3bf 8f4f 	dsb	sy
 800f962:	60bb      	str	r3, [r7, #8]
}
 800f964:	bf00      	nop
 800f966:	e7fe      	b.n	800f966 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f968:	69bb      	ldr	r3, [r7, #24]
 800f96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f96c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f96e:	69bb      	ldr	r3, [r7, #24]
 800f970:	69fa      	ldr	r2, [r7, #28]
 800f972:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f974:	69bb      	ldr	r3, [r7, #24]
 800f976:	699b      	ldr	r3, [r3, #24]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	db04      	blt.n	800f986 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f97c:	69fb      	ldr	r3, [r7, #28]
 800f97e:	f1c3 0207 	rsb	r2, r3, #7
 800f982:	69bb      	ldr	r3, [r7, #24]
 800f984:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f986:	69bb      	ldr	r3, [r7, #24]
 800f988:	6959      	ldr	r1, [r3, #20]
 800f98a:	693a      	ldr	r2, [r7, #16]
 800f98c:	4613      	mov	r3, r2
 800f98e:	009b      	lsls	r3, r3, #2
 800f990:	4413      	add	r3, r2
 800f992:	009b      	lsls	r3, r3, #2
 800f994:	4a19      	ldr	r2, [pc, #100]	; (800f9fc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800f996:	4413      	add	r3, r2
 800f998:	4299      	cmp	r1, r3
 800f99a:	d129      	bne.n	800f9f0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f99c:	69bb      	ldr	r3, [r7, #24]
 800f99e:	3304      	adds	r3, #4
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	f7fd fe11 	bl	800d5c8 <uxListRemove>
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d10a      	bne.n	800f9c2 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800f9ac:	69bb      	ldr	r3, [r7, #24]
 800f9ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9b0:	2201      	movs	r2, #1
 800f9b2:	fa02 f303 	lsl.w	r3, r2, r3
 800f9b6:	43da      	mvns	r2, r3
 800f9b8:	4b11      	ldr	r3, [pc, #68]	; (800fa00 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	4013      	ands	r3, r2
 800f9be:	4a10      	ldr	r2, [pc, #64]	; (800fa00 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f9c0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f9c2:	69bb      	ldr	r3, [r7, #24]
 800f9c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9c6:	2201      	movs	r2, #1
 800f9c8:	409a      	lsls	r2, r3
 800f9ca:	4b0d      	ldr	r3, [pc, #52]	; (800fa00 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	4313      	orrs	r3, r2
 800f9d0:	4a0b      	ldr	r2, [pc, #44]	; (800fa00 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f9d2:	6013      	str	r3, [r2, #0]
 800f9d4:	69bb      	ldr	r3, [r7, #24]
 800f9d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9d8:	4613      	mov	r3, r2
 800f9da:	009b      	lsls	r3, r3, #2
 800f9dc:	4413      	add	r3, r2
 800f9de:	009b      	lsls	r3, r3, #2
 800f9e0:	4a06      	ldr	r2, [pc, #24]	; (800f9fc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800f9e2:	441a      	add	r2, r3
 800f9e4:	69bb      	ldr	r3, [r7, #24]
 800f9e6:	3304      	adds	r3, #4
 800f9e8:	4619      	mov	r1, r3
 800f9ea:	4610      	mov	r0, r2
 800f9ec:	f7fd fd8f 	bl	800d50e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f9f0:	bf00      	nop
 800f9f2:	3720      	adds	r7, #32
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	bd80      	pop	{r7, pc}
 800f9f8:	20000800 	.word	0x20000800
 800f9fc:	20000804 	.word	0x20000804
 800fa00:	20000908 	.word	0x20000908

0800fa04 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800fa04:	b480      	push	{r7}
 800fa06:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800fa08:	4b07      	ldr	r3, [pc, #28]	; (800fa28 <pvTaskIncrementMutexHeldCount+0x24>)
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d004      	beq.n	800fa1a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800fa10:	4b05      	ldr	r3, [pc, #20]	; (800fa28 <pvTaskIncrementMutexHeldCount+0x24>)
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fa16:	3201      	adds	r2, #1
 800fa18:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800fa1a:	4b03      	ldr	r3, [pc, #12]	; (800fa28 <pvTaskIncrementMutexHeldCount+0x24>)
 800fa1c:	681b      	ldr	r3, [r3, #0]
	}
 800fa1e:	4618      	mov	r0, r3
 800fa20:	46bd      	mov	sp, r7
 800fa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa26:	4770      	bx	lr
 800fa28:	20000800 	.word	0x20000800

0800fa2c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	b084      	sub	sp, #16
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	6078      	str	r0, [r7, #4]
 800fa34:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800fa36:	f000 fb9d 	bl	8010174 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800fa3a:	4b1e      	ldr	r3, [pc, #120]	; (800fab4 <ulTaskNotifyTake+0x88>)
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d113      	bne.n	800fa6c <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800fa44:	4b1b      	ldr	r3, [pc, #108]	; (800fab4 <ulTaskNotifyTake+0x88>)
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	2201      	movs	r2, #1
 800fa4a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

				if( xTicksToWait > ( TickType_t ) 0 )
 800fa4e:	683b      	ldr	r3, [r7, #0]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d00b      	beq.n	800fa6c <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fa54:	2101      	movs	r1, #1
 800fa56:	6838      	ldr	r0, [r7, #0]
 800fa58:	f000 f9f8 	bl	800fe4c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800fa5c:	4b16      	ldr	r3, [pc, #88]	; (800fab8 <ulTaskNotifyTake+0x8c>)
 800fa5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa62:	601a      	str	r2, [r3, #0]
 800fa64:	f3bf 8f4f 	dsb	sy
 800fa68:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800fa6c:	f000 fbb2 	bl	80101d4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800fa70:	f000 fb80 	bl	8010174 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800fa74:	4b0f      	ldr	r3, [pc, #60]	; (800fab4 <ulTaskNotifyTake+0x88>)
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa7a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d00c      	beq.n	800fa9c <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d004      	beq.n	800fa92 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800fa88:	4b0a      	ldr	r3, [pc, #40]	; (800fab4 <ulTaskNotifyTake+0x88>)
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	2200      	movs	r2, #0
 800fa8e:	651a      	str	r2, [r3, #80]	; 0x50
 800fa90:	e004      	b.n	800fa9c <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800fa92:	4b08      	ldr	r3, [pc, #32]	; (800fab4 <ulTaskNotifyTake+0x88>)
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	68fa      	ldr	r2, [r7, #12]
 800fa98:	3a01      	subs	r2, #1
 800fa9a:	651a      	str	r2, [r3, #80]	; 0x50
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fa9c:	4b05      	ldr	r3, [pc, #20]	; (800fab4 <ulTaskNotifyTake+0x88>)
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	2200      	movs	r2, #0
 800faa2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 800faa6:	f000 fb95 	bl	80101d4 <vPortExitCritical>

		return ulReturn;
 800faaa:	68fb      	ldr	r3, [r7, #12]
	}
 800faac:	4618      	mov	r0, r3
 800faae:	3710      	adds	r7, #16
 800fab0:	46bd      	mov	sp, r7
 800fab2:	bd80      	pop	{r7, pc}
 800fab4:	20000800 	.word	0x20000800
 800fab8:	e000ed04 	.word	0xe000ed04

0800fabc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b086      	sub	sp, #24
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	60f8      	str	r0, [r7, #12]
 800fac4:	60b9      	str	r1, [r7, #8]
 800fac6:	607a      	str	r2, [r7, #4]
 800fac8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800faca:	f000 fb53 	bl	8010174 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800face:	4b26      	ldr	r3, [pc, #152]	; (800fb68 <xTaskNotifyWait+0xac>)
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800fad6:	b2db      	uxtb	r3, r3
 800fad8:	2b02      	cmp	r3, #2
 800fada:	d01a      	beq.n	800fb12 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800fadc:	4b22      	ldr	r3, [pc, #136]	; (800fb68 <xTaskNotifyWait+0xac>)
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800fae2:	68fa      	ldr	r2, [r7, #12]
 800fae4:	43d2      	mvns	r2, r2
 800fae6:	400a      	ands	r2, r1
 800fae8:	651a      	str	r2, [r3, #80]	; 0x50

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800faea:	4b1f      	ldr	r3, [pc, #124]	; (800fb68 <xTaskNotifyWait+0xac>)
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	2201      	movs	r2, #1
 800faf0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

				if( xTicksToWait > ( TickType_t ) 0 )
 800faf4:	683b      	ldr	r3, [r7, #0]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d00b      	beq.n	800fb12 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fafa:	2101      	movs	r1, #1
 800fafc:	6838      	ldr	r0, [r7, #0]
 800fafe:	f000 f9a5 	bl	800fe4c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800fb02:	4b1a      	ldr	r3, [pc, #104]	; (800fb6c <xTaskNotifyWait+0xb0>)
 800fb04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb08:	601a      	str	r2, [r3, #0]
 800fb0a:	f3bf 8f4f 	dsb	sy
 800fb0e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800fb12:	f000 fb5f 	bl	80101d4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800fb16:	f000 fb2d 	bl	8010174 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d004      	beq.n	800fb2a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800fb20:	4b11      	ldr	r3, [pc, #68]	; (800fb68 <xTaskNotifyWait+0xac>)
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800fb2a:	4b0f      	ldr	r3, [pc, #60]	; (800fb68 <xTaskNotifyWait+0xac>)
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800fb32:	b2db      	uxtb	r3, r3
 800fb34:	2b02      	cmp	r3, #2
 800fb36:	d002      	beq.n	800fb3e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800fb38:	2300      	movs	r3, #0
 800fb3a:	617b      	str	r3, [r7, #20]
 800fb3c:	e008      	b.n	800fb50 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800fb3e:	4b0a      	ldr	r3, [pc, #40]	; (800fb68 <xTaskNotifyWait+0xac>)
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800fb44:	68ba      	ldr	r2, [r7, #8]
 800fb46:	43d2      	mvns	r2, r2
 800fb48:	400a      	ands	r2, r1
 800fb4a:	651a      	str	r2, [r3, #80]	; 0x50
				xReturn = pdTRUE;
 800fb4c:	2301      	movs	r3, #1
 800fb4e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fb50:	4b05      	ldr	r3, [pc, #20]	; (800fb68 <xTaskNotifyWait+0xac>)
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	2200      	movs	r2, #0
 800fb56:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 800fb5a:	f000 fb3b 	bl	80101d4 <vPortExitCritical>

		return xReturn;
 800fb5e:	697b      	ldr	r3, [r7, #20]
	}
 800fb60:	4618      	mov	r0, r3
 800fb62:	3718      	adds	r7, #24
 800fb64:	46bd      	mov	sp, r7
 800fb66:	bd80      	pop	{r7, pc}
 800fb68:	20000800 	.word	0x20000800
 800fb6c:	e000ed04 	.word	0xe000ed04

0800fb70 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b08a      	sub	sp, #40	; 0x28
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	60f8      	str	r0, [r7, #12]
 800fb78:	60b9      	str	r1, [r7, #8]
 800fb7a:	603b      	str	r3, [r7, #0]
 800fb7c:	4613      	mov	r3, r2
 800fb7e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800fb80:	2301      	movs	r3, #1
 800fb82:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d10a      	bne.n	800fba0 <xTaskGenericNotify+0x30>
	__asm volatile
 800fb8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb8e:	f383 8811 	msr	BASEPRI, r3
 800fb92:	f3bf 8f6f 	isb	sy
 800fb96:	f3bf 8f4f 	dsb	sy
 800fb9a:	61bb      	str	r3, [r7, #24]
}
 800fb9c:	bf00      	nop
 800fb9e:	e7fe      	b.n	800fb9e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800fba4:	f000 fae6 	bl	8010174 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800fba8:	683b      	ldr	r3, [r7, #0]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d003      	beq.n	800fbb6 <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800fbae:	6a3b      	ldr	r3, [r7, #32]
 800fbb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fbb2:	683b      	ldr	r3, [r7, #0]
 800fbb4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800fbb6:	6a3b      	ldr	r3, [r7, #32]
 800fbb8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800fbbc:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800fbbe:	6a3b      	ldr	r3, [r7, #32]
 800fbc0:	2202      	movs	r2, #2
 800fbc2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 800fbc6:	79fb      	ldrb	r3, [r7, #7]
 800fbc8:	2b04      	cmp	r3, #4
 800fbca:	d828      	bhi.n	800fc1e <xTaskGenericNotify+0xae>
 800fbcc:	a201      	add	r2, pc, #4	; (adr r2, 800fbd4 <xTaskGenericNotify+0x64>)
 800fbce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbd2:	bf00      	nop
 800fbd4:	0800fc3f 	.word	0x0800fc3f
 800fbd8:	0800fbe9 	.word	0x0800fbe9
 800fbdc:	0800fbf7 	.word	0x0800fbf7
 800fbe0:	0800fc03 	.word	0x0800fc03
 800fbe4:	0800fc0b 	.word	0x0800fc0b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800fbe8:	6a3b      	ldr	r3, [r7, #32]
 800fbea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fbec:	68bb      	ldr	r3, [r7, #8]
 800fbee:	431a      	orrs	r2, r3
 800fbf0:	6a3b      	ldr	r3, [r7, #32]
 800fbf2:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 800fbf4:	e026      	b.n	800fc44 <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800fbf6:	6a3b      	ldr	r3, [r7, #32]
 800fbf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fbfa:	1c5a      	adds	r2, r3, #1
 800fbfc:	6a3b      	ldr	r3, [r7, #32]
 800fbfe:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 800fc00:	e020      	b.n	800fc44 <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800fc02:	6a3b      	ldr	r3, [r7, #32]
 800fc04:	68ba      	ldr	r2, [r7, #8]
 800fc06:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 800fc08:	e01c      	b.n	800fc44 <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800fc0a:	7ffb      	ldrb	r3, [r7, #31]
 800fc0c:	2b02      	cmp	r3, #2
 800fc0e:	d003      	beq.n	800fc18 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800fc10:	6a3b      	ldr	r3, [r7, #32]
 800fc12:	68ba      	ldr	r2, [r7, #8]
 800fc14:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800fc16:	e015      	b.n	800fc44 <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800fc18:	2300      	movs	r3, #0
 800fc1a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800fc1c:	e012      	b.n	800fc44 <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800fc1e:	6a3b      	ldr	r3, [r7, #32]
 800fc20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc26:	d00c      	beq.n	800fc42 <xTaskGenericNotify+0xd2>
	__asm volatile
 800fc28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc2c:	f383 8811 	msr	BASEPRI, r3
 800fc30:	f3bf 8f6f 	isb	sy
 800fc34:	f3bf 8f4f 	dsb	sy
 800fc38:	617b      	str	r3, [r7, #20]
}
 800fc3a:	bf00      	nop
 800fc3c:	e7fe      	b.n	800fc3c <xTaskGenericNotify+0xcc>
					break;
 800fc3e:	bf00      	nop
 800fc40:	e000      	b.n	800fc44 <xTaskGenericNotify+0xd4>

					break;
 800fc42:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800fc44:	7ffb      	ldrb	r3, [r7, #31]
 800fc46:	2b01      	cmp	r3, #1
 800fc48:	d139      	bne.n	800fcbe <xTaskGenericNotify+0x14e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fc4a:	6a3b      	ldr	r3, [r7, #32]
 800fc4c:	3304      	adds	r3, #4
 800fc4e:	4618      	mov	r0, r3
 800fc50:	f7fd fcba 	bl	800d5c8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800fc54:	6a3b      	ldr	r3, [r7, #32]
 800fc56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc58:	2201      	movs	r2, #1
 800fc5a:	409a      	lsls	r2, r3
 800fc5c:	4b1b      	ldr	r3, [pc, #108]	; (800fccc <xTaskGenericNotify+0x15c>)
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	4313      	orrs	r3, r2
 800fc62:	4a1a      	ldr	r2, [pc, #104]	; (800fccc <xTaskGenericNotify+0x15c>)
 800fc64:	6013      	str	r3, [r2, #0]
 800fc66:	6a3b      	ldr	r3, [r7, #32]
 800fc68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc6a:	4613      	mov	r3, r2
 800fc6c:	009b      	lsls	r3, r3, #2
 800fc6e:	4413      	add	r3, r2
 800fc70:	009b      	lsls	r3, r3, #2
 800fc72:	4a17      	ldr	r2, [pc, #92]	; (800fcd0 <xTaskGenericNotify+0x160>)
 800fc74:	441a      	add	r2, r3
 800fc76:	6a3b      	ldr	r3, [r7, #32]
 800fc78:	3304      	adds	r3, #4
 800fc7a:	4619      	mov	r1, r3
 800fc7c:	4610      	mov	r0, r2
 800fc7e:	f7fd fc46 	bl	800d50e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800fc82:	6a3b      	ldr	r3, [r7, #32]
 800fc84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d00a      	beq.n	800fca0 <xTaskGenericNotify+0x130>
	__asm volatile
 800fc8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc8e:	f383 8811 	msr	BASEPRI, r3
 800fc92:	f3bf 8f6f 	isb	sy
 800fc96:	f3bf 8f4f 	dsb	sy
 800fc9a:	613b      	str	r3, [r7, #16]
}
 800fc9c:	bf00      	nop
 800fc9e:	e7fe      	b.n	800fc9e <xTaskGenericNotify+0x12e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fca0:	6a3b      	ldr	r3, [r7, #32]
 800fca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fca4:	4b0b      	ldr	r3, [pc, #44]	; (800fcd4 <xTaskGenericNotify+0x164>)
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcaa:	429a      	cmp	r2, r3
 800fcac:	d907      	bls.n	800fcbe <xTaskGenericNotify+0x14e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800fcae:	4b0a      	ldr	r3, [pc, #40]	; (800fcd8 <xTaskGenericNotify+0x168>)
 800fcb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcb4:	601a      	str	r2, [r3, #0]
 800fcb6:	f3bf 8f4f 	dsb	sy
 800fcba:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800fcbe:	f000 fa89 	bl	80101d4 <vPortExitCritical>

		return xReturn;
 800fcc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	3728      	adds	r7, #40	; 0x28
 800fcc8:	46bd      	mov	sp, r7
 800fcca:	bd80      	pop	{r7, pc}
 800fccc:	20000908 	.word	0x20000908
 800fcd0:	20000804 	.word	0x20000804
 800fcd4:	20000800 	.word	0x20000800
 800fcd8:	e000ed04 	.word	0xe000ed04

0800fcdc <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b08a      	sub	sp, #40	; 0x28
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
 800fce4:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d10a      	bne.n	800fd02 <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 800fcec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcf0:	f383 8811 	msr	BASEPRI, r3
 800fcf4:	f3bf 8f6f 	isb	sy
 800fcf8:	f3bf 8f4f 	dsb	sy
 800fcfc:	61bb      	str	r3, [r7, #24]
}
 800fcfe:	bf00      	nop
 800fd00:	e7fe      	b.n	800fd00 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fd02:	f000 fb19 	bl	8010338 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 800fd0a:	f3ef 8211 	mrs	r2, BASEPRI
 800fd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd12:	f383 8811 	msr	BASEPRI, r3
 800fd16:	f3bf 8f6f 	isb	sy
 800fd1a:	f3bf 8f4f 	dsb	sy
 800fd1e:	617a      	str	r2, [r7, #20]
 800fd20:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800fd22:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fd24:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800fd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd28:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800fd2c:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800fd2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd30:	2202      	movs	r2, #2
 800fd32:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800fd36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd3a:	1c5a      	adds	r2, r3, #1
 800fd3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd3e:	651a      	str	r2, [r3, #80]	; 0x50

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800fd40:	7ffb      	ldrb	r3, [r7, #31]
 800fd42:	2b01      	cmp	r3, #1
 800fd44:	d145      	bne.n	800fdd2 <vTaskNotifyGiveFromISR+0xf6>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800fd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d00a      	beq.n	800fd64 <vTaskNotifyGiveFromISR+0x88>
	__asm volatile
 800fd4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd52:	f383 8811 	msr	BASEPRI, r3
 800fd56:	f3bf 8f6f 	isb	sy
 800fd5a:	f3bf 8f4f 	dsb	sy
 800fd5e:	60fb      	str	r3, [r7, #12]
}
 800fd60:	bf00      	nop
 800fd62:	e7fe      	b.n	800fd62 <vTaskNotifyGiveFromISR+0x86>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fd64:	4b20      	ldr	r3, [pc, #128]	; (800fde8 <vTaskNotifyGiveFromISR+0x10c>)
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d11c      	bne.n	800fda6 <vTaskNotifyGiveFromISR+0xca>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fd6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd6e:	3304      	adds	r3, #4
 800fd70:	4618      	mov	r0, r3
 800fd72:	f7fd fc29 	bl	800d5c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fd76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd7a:	2201      	movs	r2, #1
 800fd7c:	409a      	lsls	r2, r3
 800fd7e:	4b1b      	ldr	r3, [pc, #108]	; (800fdec <vTaskNotifyGiveFromISR+0x110>)
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	4313      	orrs	r3, r2
 800fd84:	4a19      	ldr	r2, [pc, #100]	; (800fdec <vTaskNotifyGiveFromISR+0x110>)
 800fd86:	6013      	str	r3, [r2, #0]
 800fd88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd8c:	4613      	mov	r3, r2
 800fd8e:	009b      	lsls	r3, r3, #2
 800fd90:	4413      	add	r3, r2
 800fd92:	009b      	lsls	r3, r3, #2
 800fd94:	4a16      	ldr	r2, [pc, #88]	; (800fdf0 <vTaskNotifyGiveFromISR+0x114>)
 800fd96:	441a      	add	r2, r3
 800fd98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd9a:	3304      	adds	r3, #4
 800fd9c:	4619      	mov	r1, r3
 800fd9e:	4610      	mov	r0, r2
 800fda0:	f7fd fbb5 	bl	800d50e <vListInsertEnd>
 800fda4:	e005      	b.n	800fdb2 <vTaskNotifyGiveFromISR+0xd6>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800fda6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fda8:	3318      	adds	r3, #24
 800fdaa:	4619      	mov	r1, r3
 800fdac:	4811      	ldr	r0, [pc, #68]	; (800fdf4 <vTaskNotifyGiveFromISR+0x118>)
 800fdae:	f7fd fbae 	bl	800d50e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fdb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdb6:	4b10      	ldr	r3, [pc, #64]	; (800fdf8 <vTaskNotifyGiveFromISR+0x11c>)
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdbc:	429a      	cmp	r2, r3
 800fdbe:	d908      	bls.n	800fdd2 <vTaskNotifyGiveFromISR+0xf6>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800fdc0:	683b      	ldr	r3, [r7, #0]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d002      	beq.n	800fdcc <vTaskNotifyGiveFromISR+0xf0>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800fdc6:	683b      	ldr	r3, [r7, #0]
 800fdc8:	2201      	movs	r2, #1
 800fdca:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800fdcc:	4b0b      	ldr	r3, [pc, #44]	; (800fdfc <vTaskNotifyGiveFromISR+0x120>)
 800fdce:	2201      	movs	r2, #1
 800fdd0:	601a      	str	r2, [r3, #0]
 800fdd2:	6a3b      	ldr	r3, [r7, #32]
 800fdd4:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800fdd6:	68bb      	ldr	r3, [r7, #8]
 800fdd8:	f383 8811 	msr	BASEPRI, r3
}
 800fddc:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800fdde:	bf00      	nop
 800fde0:	3728      	adds	r7, #40	; 0x28
 800fde2:	46bd      	mov	sp, r7
 800fde4:	bd80      	pop	{r7, pc}
 800fde6:	bf00      	nop
 800fde8:	20000928 	.word	0x20000928
 800fdec:	20000908 	.word	0x20000908
 800fdf0:	20000804 	.word	0x20000804
 800fdf4:	200008c0 	.word	0x200008c0
 800fdf8:	20000800 	.word	0x20000800
 800fdfc:	20000914 	.word	0x20000914

0800fe00 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	b084      	sub	sp, #16
 800fe04:	af00      	add	r7, sp, #0
 800fe06:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d102      	bne.n	800fe14 <xTaskNotifyStateClear+0x14>
 800fe0e:	4b0e      	ldr	r3, [pc, #56]	; (800fe48 <xTaskNotifyStateClear+0x48>)
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	e000      	b.n	800fe16 <xTaskNotifyStateClear+0x16>
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 800fe18:	f000 f9ac 	bl	8010174 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800fe1c:	68bb      	ldr	r3, [r7, #8]
 800fe1e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800fe22:	b2db      	uxtb	r3, r3
 800fe24:	2b02      	cmp	r3, #2
 800fe26:	d106      	bne.n	800fe36 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fe28:	68bb      	ldr	r3, [r7, #8]
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
				xReturn = pdPASS;
 800fe30:	2301      	movs	r3, #1
 800fe32:	60fb      	str	r3, [r7, #12]
 800fe34:	e001      	b.n	800fe3a <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800fe36:	2300      	movs	r3, #0
 800fe38:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800fe3a:	f000 f9cb 	bl	80101d4 <vPortExitCritical>

		return xReturn;
 800fe3e:	68fb      	ldr	r3, [r7, #12]
	}
 800fe40:	4618      	mov	r0, r3
 800fe42:	3710      	adds	r7, #16
 800fe44:	46bd      	mov	sp, r7
 800fe46:	bd80      	pop	{r7, pc}
 800fe48:	20000800 	.word	0x20000800

0800fe4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b084      	sub	sp, #16
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	6078      	str	r0, [r7, #4]
 800fe54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fe56:	4b29      	ldr	r3, [pc, #164]	; (800fefc <prvAddCurrentTaskToDelayedList+0xb0>)
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fe5c:	4b28      	ldr	r3, [pc, #160]	; (800ff00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	3304      	adds	r3, #4
 800fe62:	4618      	mov	r0, r3
 800fe64:	f7fd fbb0 	bl	800d5c8 <uxListRemove>
 800fe68:	4603      	mov	r3, r0
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d10b      	bne.n	800fe86 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800fe6e:	4b24      	ldr	r3, [pc, #144]	; (800ff00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe74:	2201      	movs	r2, #1
 800fe76:	fa02 f303 	lsl.w	r3, r2, r3
 800fe7a:	43da      	mvns	r2, r3
 800fe7c:	4b21      	ldr	r3, [pc, #132]	; (800ff04 <prvAddCurrentTaskToDelayedList+0xb8>)
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	4013      	ands	r3, r2
 800fe82:	4a20      	ldr	r2, [pc, #128]	; (800ff04 <prvAddCurrentTaskToDelayedList+0xb8>)
 800fe84:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe8c:	d10a      	bne.n	800fea4 <prvAddCurrentTaskToDelayedList+0x58>
 800fe8e:	683b      	ldr	r3, [r7, #0]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d007      	beq.n	800fea4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fe94:	4b1a      	ldr	r3, [pc, #104]	; (800ff00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	3304      	adds	r3, #4
 800fe9a:	4619      	mov	r1, r3
 800fe9c:	481a      	ldr	r0, [pc, #104]	; (800ff08 <prvAddCurrentTaskToDelayedList+0xbc>)
 800fe9e:	f7fd fb36 	bl	800d50e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fea2:	e026      	b.n	800fef2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fea4:	68fa      	ldr	r2, [r7, #12]
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	4413      	add	r3, r2
 800feaa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800feac:	4b14      	ldr	r3, [pc, #80]	; (800ff00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	68ba      	ldr	r2, [r7, #8]
 800feb2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800feb4:	68ba      	ldr	r2, [r7, #8]
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	429a      	cmp	r2, r3
 800feba:	d209      	bcs.n	800fed0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800febc:	4b13      	ldr	r3, [pc, #76]	; (800ff0c <prvAddCurrentTaskToDelayedList+0xc0>)
 800febe:	681a      	ldr	r2, [r3, #0]
 800fec0:	4b0f      	ldr	r3, [pc, #60]	; (800ff00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	3304      	adds	r3, #4
 800fec6:	4619      	mov	r1, r3
 800fec8:	4610      	mov	r0, r2
 800feca:	f7fd fb44 	bl	800d556 <vListInsert>
}
 800fece:	e010      	b.n	800fef2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fed0:	4b0f      	ldr	r3, [pc, #60]	; (800ff10 <prvAddCurrentTaskToDelayedList+0xc4>)
 800fed2:	681a      	ldr	r2, [r3, #0]
 800fed4:	4b0a      	ldr	r3, [pc, #40]	; (800ff00 <prvAddCurrentTaskToDelayedList+0xb4>)
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	3304      	adds	r3, #4
 800feda:	4619      	mov	r1, r3
 800fedc:	4610      	mov	r0, r2
 800fede:	f7fd fb3a 	bl	800d556 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fee2:	4b0c      	ldr	r3, [pc, #48]	; (800ff14 <prvAddCurrentTaskToDelayedList+0xc8>)
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	68ba      	ldr	r2, [r7, #8]
 800fee8:	429a      	cmp	r2, r3
 800feea:	d202      	bcs.n	800fef2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800feec:	4a09      	ldr	r2, [pc, #36]	; (800ff14 <prvAddCurrentTaskToDelayedList+0xc8>)
 800feee:	68bb      	ldr	r3, [r7, #8]
 800fef0:	6013      	str	r3, [r2, #0]
}
 800fef2:	bf00      	nop
 800fef4:	3710      	adds	r7, #16
 800fef6:	46bd      	mov	sp, r7
 800fef8:	bd80      	pop	{r7, pc}
 800fefa:	bf00      	nop
 800fefc:	20000904 	.word	0x20000904
 800ff00:	20000800 	.word	0x20000800
 800ff04:	20000908 	.word	0x20000908
 800ff08:	200008ec 	.word	0x200008ec
 800ff0c:	200008bc 	.word	0x200008bc
 800ff10:	200008b8 	.word	0x200008b8
 800ff14:	20000920 	.word	0x20000920

0800ff18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ff18:	b480      	push	{r7}
 800ff1a:	b085      	sub	sp, #20
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	60f8      	str	r0, [r7, #12]
 800ff20:	60b9      	str	r1, [r7, #8]
 800ff22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	3b04      	subs	r3, #4
 800ff28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ff30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	3b04      	subs	r3, #4
 800ff36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ff38:	68bb      	ldr	r3, [r7, #8]
 800ff3a:	f023 0201 	bic.w	r2, r3, #1
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	3b04      	subs	r3, #4
 800ff46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ff48:	4a0c      	ldr	r2, [pc, #48]	; (800ff7c <pxPortInitialiseStack+0x64>)
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	3b14      	subs	r3, #20
 800ff52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ff54:	687a      	ldr	r2, [r7, #4]
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	3b04      	subs	r3, #4
 800ff5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	f06f 0202 	mvn.w	r2, #2
 800ff66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	3b20      	subs	r3, #32
 800ff6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ff6e:	68fb      	ldr	r3, [r7, #12]
}
 800ff70:	4618      	mov	r0, r3
 800ff72:	3714      	adds	r7, #20
 800ff74:	46bd      	mov	sp, r7
 800ff76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7a:	4770      	bx	lr
 800ff7c:	0800ff81 	.word	0x0800ff81

0800ff80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ff80:	b480      	push	{r7}
 800ff82:	b085      	sub	sp, #20
 800ff84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ff86:	2300      	movs	r3, #0
 800ff88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ff8a:	4b12      	ldr	r3, [pc, #72]	; (800ffd4 <prvTaskExitError+0x54>)
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff92:	d00a      	beq.n	800ffaa <prvTaskExitError+0x2a>
	__asm volatile
 800ff94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff98:	f383 8811 	msr	BASEPRI, r3
 800ff9c:	f3bf 8f6f 	isb	sy
 800ffa0:	f3bf 8f4f 	dsb	sy
 800ffa4:	60fb      	str	r3, [r7, #12]
}
 800ffa6:	bf00      	nop
 800ffa8:	e7fe      	b.n	800ffa8 <prvTaskExitError+0x28>
	__asm volatile
 800ffaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffae:	f383 8811 	msr	BASEPRI, r3
 800ffb2:	f3bf 8f6f 	isb	sy
 800ffb6:	f3bf 8f4f 	dsb	sy
 800ffba:	60bb      	str	r3, [r7, #8]
}
 800ffbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ffbe:	bf00      	nop
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d0fc      	beq.n	800ffc0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ffc6:	bf00      	nop
 800ffc8:	bf00      	nop
 800ffca:	3714      	adds	r7, #20
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd2:	4770      	bx	lr
 800ffd4:	20000074 	.word	0x20000074
	...

0800ffe0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ffe0:	4b07      	ldr	r3, [pc, #28]	; (8010000 <pxCurrentTCBConst2>)
 800ffe2:	6819      	ldr	r1, [r3, #0]
 800ffe4:	6808      	ldr	r0, [r1, #0]
 800ffe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffea:	f380 8809 	msr	PSP, r0
 800ffee:	f3bf 8f6f 	isb	sy
 800fff2:	f04f 0000 	mov.w	r0, #0
 800fff6:	f380 8811 	msr	BASEPRI, r0
 800fffa:	4770      	bx	lr
 800fffc:	f3af 8000 	nop.w

08010000 <pxCurrentTCBConst2>:
 8010000:	20000800 	.word	0x20000800
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010004:	bf00      	nop
 8010006:	bf00      	nop

08010008 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010008:	4808      	ldr	r0, [pc, #32]	; (801002c <prvPortStartFirstTask+0x24>)
 801000a:	6800      	ldr	r0, [r0, #0]
 801000c:	6800      	ldr	r0, [r0, #0]
 801000e:	f380 8808 	msr	MSP, r0
 8010012:	f04f 0000 	mov.w	r0, #0
 8010016:	f380 8814 	msr	CONTROL, r0
 801001a:	b662      	cpsie	i
 801001c:	b661      	cpsie	f
 801001e:	f3bf 8f4f 	dsb	sy
 8010022:	f3bf 8f6f 	isb	sy
 8010026:	df00      	svc	0
 8010028:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801002a:	bf00      	nop
 801002c:	e000ed08 	.word	0xe000ed08

08010030 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010030:	b580      	push	{r7, lr}
 8010032:	b086      	sub	sp, #24
 8010034:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010036:	4b46      	ldr	r3, [pc, #280]	; (8010150 <xPortStartScheduler+0x120>)
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	4a46      	ldr	r2, [pc, #280]	; (8010154 <xPortStartScheduler+0x124>)
 801003c:	4293      	cmp	r3, r2
 801003e:	d10a      	bne.n	8010056 <xPortStartScheduler+0x26>
	__asm volatile
 8010040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010044:	f383 8811 	msr	BASEPRI, r3
 8010048:	f3bf 8f6f 	isb	sy
 801004c:	f3bf 8f4f 	dsb	sy
 8010050:	613b      	str	r3, [r7, #16]
}
 8010052:	bf00      	nop
 8010054:	e7fe      	b.n	8010054 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010056:	4b3e      	ldr	r3, [pc, #248]	; (8010150 <xPortStartScheduler+0x120>)
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	4a3f      	ldr	r2, [pc, #252]	; (8010158 <xPortStartScheduler+0x128>)
 801005c:	4293      	cmp	r3, r2
 801005e:	d10a      	bne.n	8010076 <xPortStartScheduler+0x46>
	__asm volatile
 8010060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010064:	f383 8811 	msr	BASEPRI, r3
 8010068:	f3bf 8f6f 	isb	sy
 801006c:	f3bf 8f4f 	dsb	sy
 8010070:	60fb      	str	r3, [r7, #12]
}
 8010072:	bf00      	nop
 8010074:	e7fe      	b.n	8010074 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010076:	4b39      	ldr	r3, [pc, #228]	; (801015c <xPortStartScheduler+0x12c>)
 8010078:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801007a:	697b      	ldr	r3, [r7, #20]
 801007c:	781b      	ldrb	r3, [r3, #0]
 801007e:	b2db      	uxtb	r3, r3
 8010080:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010082:	697b      	ldr	r3, [r7, #20]
 8010084:	22ff      	movs	r2, #255	; 0xff
 8010086:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010088:	697b      	ldr	r3, [r7, #20]
 801008a:	781b      	ldrb	r3, [r3, #0]
 801008c:	b2db      	uxtb	r3, r3
 801008e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010090:	78fb      	ldrb	r3, [r7, #3]
 8010092:	b2db      	uxtb	r3, r3
 8010094:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010098:	b2da      	uxtb	r2, r3
 801009a:	4b31      	ldr	r3, [pc, #196]	; (8010160 <xPortStartScheduler+0x130>)
 801009c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801009e:	4b31      	ldr	r3, [pc, #196]	; (8010164 <xPortStartScheduler+0x134>)
 80100a0:	2207      	movs	r2, #7
 80100a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80100a4:	e009      	b.n	80100ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80100a6:	4b2f      	ldr	r3, [pc, #188]	; (8010164 <xPortStartScheduler+0x134>)
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	3b01      	subs	r3, #1
 80100ac:	4a2d      	ldr	r2, [pc, #180]	; (8010164 <xPortStartScheduler+0x134>)
 80100ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80100b0:	78fb      	ldrb	r3, [r7, #3]
 80100b2:	b2db      	uxtb	r3, r3
 80100b4:	005b      	lsls	r3, r3, #1
 80100b6:	b2db      	uxtb	r3, r3
 80100b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80100ba:	78fb      	ldrb	r3, [r7, #3]
 80100bc:	b2db      	uxtb	r3, r3
 80100be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80100c2:	2b80      	cmp	r3, #128	; 0x80
 80100c4:	d0ef      	beq.n	80100a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80100c6:	4b27      	ldr	r3, [pc, #156]	; (8010164 <xPortStartScheduler+0x134>)
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	f1c3 0307 	rsb	r3, r3, #7
 80100ce:	2b04      	cmp	r3, #4
 80100d0:	d00a      	beq.n	80100e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80100d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100d6:	f383 8811 	msr	BASEPRI, r3
 80100da:	f3bf 8f6f 	isb	sy
 80100de:	f3bf 8f4f 	dsb	sy
 80100e2:	60bb      	str	r3, [r7, #8]
}
 80100e4:	bf00      	nop
 80100e6:	e7fe      	b.n	80100e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80100e8:	4b1e      	ldr	r3, [pc, #120]	; (8010164 <xPortStartScheduler+0x134>)
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	021b      	lsls	r3, r3, #8
 80100ee:	4a1d      	ldr	r2, [pc, #116]	; (8010164 <xPortStartScheduler+0x134>)
 80100f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80100f2:	4b1c      	ldr	r3, [pc, #112]	; (8010164 <xPortStartScheduler+0x134>)
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80100fa:	4a1a      	ldr	r2, [pc, #104]	; (8010164 <xPortStartScheduler+0x134>)
 80100fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	b2da      	uxtb	r2, r3
 8010102:	697b      	ldr	r3, [r7, #20]
 8010104:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010106:	4b18      	ldr	r3, [pc, #96]	; (8010168 <xPortStartScheduler+0x138>)
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	4a17      	ldr	r2, [pc, #92]	; (8010168 <xPortStartScheduler+0x138>)
 801010c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010110:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010112:	4b15      	ldr	r3, [pc, #84]	; (8010168 <xPortStartScheduler+0x138>)
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	4a14      	ldr	r2, [pc, #80]	; (8010168 <xPortStartScheduler+0x138>)
 8010118:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801011c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801011e:	f000 f8dd 	bl	80102dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010122:	4b12      	ldr	r3, [pc, #72]	; (801016c <xPortStartScheduler+0x13c>)
 8010124:	2200      	movs	r2, #0
 8010126:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010128:	f000 f8fc 	bl	8010324 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801012c:	4b10      	ldr	r3, [pc, #64]	; (8010170 <xPortStartScheduler+0x140>)
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	4a0f      	ldr	r2, [pc, #60]	; (8010170 <xPortStartScheduler+0x140>)
 8010132:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010136:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010138:	f7ff ff66 	bl	8010008 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801013c:	f7ff f822 	bl	800f184 <vTaskSwitchContext>
	prvTaskExitError();
 8010140:	f7ff ff1e 	bl	800ff80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010144:	2300      	movs	r3, #0
}
 8010146:	4618      	mov	r0, r3
 8010148:	3718      	adds	r7, #24
 801014a:	46bd      	mov	sp, r7
 801014c:	bd80      	pop	{r7, pc}
 801014e:	bf00      	nop
 8010150:	e000ed00 	.word	0xe000ed00
 8010154:	410fc271 	.word	0x410fc271
 8010158:	410fc270 	.word	0x410fc270
 801015c:	e000e400 	.word	0xe000e400
 8010160:	2000092c 	.word	0x2000092c
 8010164:	20000930 	.word	0x20000930
 8010168:	e000ed20 	.word	0xe000ed20
 801016c:	20000074 	.word	0x20000074
 8010170:	e000ef34 	.word	0xe000ef34

08010174 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010174:	b480      	push	{r7}
 8010176:	b083      	sub	sp, #12
 8010178:	af00      	add	r7, sp, #0
	__asm volatile
 801017a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801017e:	f383 8811 	msr	BASEPRI, r3
 8010182:	f3bf 8f6f 	isb	sy
 8010186:	f3bf 8f4f 	dsb	sy
 801018a:	607b      	str	r3, [r7, #4]
}
 801018c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801018e:	4b0f      	ldr	r3, [pc, #60]	; (80101cc <vPortEnterCritical+0x58>)
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	3301      	adds	r3, #1
 8010194:	4a0d      	ldr	r2, [pc, #52]	; (80101cc <vPortEnterCritical+0x58>)
 8010196:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010198:	4b0c      	ldr	r3, [pc, #48]	; (80101cc <vPortEnterCritical+0x58>)
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	2b01      	cmp	r3, #1
 801019e:	d10f      	bne.n	80101c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80101a0:	4b0b      	ldr	r3, [pc, #44]	; (80101d0 <vPortEnterCritical+0x5c>)
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	b2db      	uxtb	r3, r3
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d00a      	beq.n	80101c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80101aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101ae:	f383 8811 	msr	BASEPRI, r3
 80101b2:	f3bf 8f6f 	isb	sy
 80101b6:	f3bf 8f4f 	dsb	sy
 80101ba:	603b      	str	r3, [r7, #0]
}
 80101bc:	bf00      	nop
 80101be:	e7fe      	b.n	80101be <vPortEnterCritical+0x4a>
	}
}
 80101c0:	bf00      	nop
 80101c2:	370c      	adds	r7, #12
 80101c4:	46bd      	mov	sp, r7
 80101c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ca:	4770      	bx	lr
 80101cc:	20000074 	.word	0x20000074
 80101d0:	e000ed04 	.word	0xe000ed04

080101d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80101d4:	b480      	push	{r7}
 80101d6:	b083      	sub	sp, #12
 80101d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80101da:	4b12      	ldr	r3, [pc, #72]	; (8010224 <vPortExitCritical+0x50>)
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d10a      	bne.n	80101f8 <vPortExitCritical+0x24>
	__asm volatile
 80101e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101e6:	f383 8811 	msr	BASEPRI, r3
 80101ea:	f3bf 8f6f 	isb	sy
 80101ee:	f3bf 8f4f 	dsb	sy
 80101f2:	607b      	str	r3, [r7, #4]
}
 80101f4:	bf00      	nop
 80101f6:	e7fe      	b.n	80101f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80101f8:	4b0a      	ldr	r3, [pc, #40]	; (8010224 <vPortExitCritical+0x50>)
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	3b01      	subs	r3, #1
 80101fe:	4a09      	ldr	r2, [pc, #36]	; (8010224 <vPortExitCritical+0x50>)
 8010200:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010202:	4b08      	ldr	r3, [pc, #32]	; (8010224 <vPortExitCritical+0x50>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d105      	bne.n	8010216 <vPortExitCritical+0x42>
 801020a:	2300      	movs	r3, #0
 801020c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801020e:	683b      	ldr	r3, [r7, #0]
 8010210:	f383 8811 	msr	BASEPRI, r3
}
 8010214:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010216:	bf00      	nop
 8010218:	370c      	adds	r7, #12
 801021a:	46bd      	mov	sp, r7
 801021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010220:	4770      	bx	lr
 8010222:	bf00      	nop
 8010224:	20000074 	.word	0x20000074
	...

08010230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010230:	f3ef 8009 	mrs	r0, PSP
 8010234:	f3bf 8f6f 	isb	sy
 8010238:	4b15      	ldr	r3, [pc, #84]	; (8010290 <pxCurrentTCBConst>)
 801023a:	681a      	ldr	r2, [r3, #0]
 801023c:	f01e 0f10 	tst.w	lr, #16
 8010240:	bf08      	it	eq
 8010242:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010246:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801024a:	6010      	str	r0, [r2, #0]
 801024c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010250:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010254:	f380 8811 	msr	BASEPRI, r0
 8010258:	f3bf 8f4f 	dsb	sy
 801025c:	f3bf 8f6f 	isb	sy
 8010260:	f7fe ff90 	bl	800f184 <vTaskSwitchContext>
 8010264:	f04f 0000 	mov.w	r0, #0
 8010268:	f380 8811 	msr	BASEPRI, r0
 801026c:	bc09      	pop	{r0, r3}
 801026e:	6819      	ldr	r1, [r3, #0]
 8010270:	6808      	ldr	r0, [r1, #0]
 8010272:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010276:	f01e 0f10 	tst.w	lr, #16
 801027a:	bf08      	it	eq
 801027c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010280:	f380 8809 	msr	PSP, r0
 8010284:	f3bf 8f6f 	isb	sy
 8010288:	4770      	bx	lr
 801028a:	bf00      	nop
 801028c:	f3af 8000 	nop.w

08010290 <pxCurrentTCBConst>:
 8010290:	20000800 	.word	0x20000800
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010294:	bf00      	nop
 8010296:	bf00      	nop

08010298 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010298:	b580      	push	{r7, lr}
 801029a:	b082      	sub	sp, #8
 801029c:	af00      	add	r7, sp, #0
	__asm volatile
 801029e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102a2:	f383 8811 	msr	BASEPRI, r3
 80102a6:	f3bf 8f6f 	isb	sy
 80102aa:	f3bf 8f4f 	dsb	sy
 80102ae:	607b      	str	r3, [r7, #4]
}
 80102b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80102b2:	f7fe feaf 	bl	800f014 <xTaskIncrementTick>
 80102b6:	4603      	mov	r3, r0
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d003      	beq.n	80102c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80102bc:	4b06      	ldr	r3, [pc, #24]	; (80102d8 <SysTick_Handler+0x40>)
 80102be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102c2:	601a      	str	r2, [r3, #0]
 80102c4:	2300      	movs	r3, #0
 80102c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80102c8:	683b      	ldr	r3, [r7, #0]
 80102ca:	f383 8811 	msr	BASEPRI, r3
}
 80102ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80102d0:	bf00      	nop
 80102d2:	3708      	adds	r7, #8
 80102d4:	46bd      	mov	sp, r7
 80102d6:	bd80      	pop	{r7, pc}
 80102d8:	e000ed04 	.word	0xe000ed04

080102dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80102dc:	b480      	push	{r7}
 80102de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80102e0:	4b0b      	ldr	r3, [pc, #44]	; (8010310 <vPortSetupTimerInterrupt+0x34>)
 80102e2:	2200      	movs	r2, #0
 80102e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80102e6:	4b0b      	ldr	r3, [pc, #44]	; (8010314 <vPortSetupTimerInterrupt+0x38>)
 80102e8:	2200      	movs	r2, #0
 80102ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80102ec:	4b0a      	ldr	r3, [pc, #40]	; (8010318 <vPortSetupTimerInterrupt+0x3c>)
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	4a0a      	ldr	r2, [pc, #40]	; (801031c <vPortSetupTimerInterrupt+0x40>)
 80102f2:	fba2 2303 	umull	r2, r3, r2, r3
 80102f6:	099b      	lsrs	r3, r3, #6
 80102f8:	4a09      	ldr	r2, [pc, #36]	; (8010320 <vPortSetupTimerInterrupt+0x44>)
 80102fa:	3b01      	subs	r3, #1
 80102fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80102fe:	4b04      	ldr	r3, [pc, #16]	; (8010310 <vPortSetupTimerInterrupt+0x34>)
 8010300:	2207      	movs	r2, #7
 8010302:	601a      	str	r2, [r3, #0]
}
 8010304:	bf00      	nop
 8010306:	46bd      	mov	sp, r7
 8010308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030c:	4770      	bx	lr
 801030e:	bf00      	nop
 8010310:	e000e010 	.word	0xe000e010
 8010314:	e000e018 	.word	0xe000e018
 8010318:	20000000 	.word	0x20000000
 801031c:	10624dd3 	.word	0x10624dd3
 8010320:	e000e014 	.word	0xe000e014

08010324 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010324:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010334 <vPortEnableVFP+0x10>
 8010328:	6801      	ldr	r1, [r0, #0]
 801032a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801032e:	6001      	str	r1, [r0, #0]
 8010330:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010332:	bf00      	nop
 8010334:	e000ed88 	.word	0xe000ed88

08010338 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010338:	b480      	push	{r7}
 801033a:	b085      	sub	sp, #20
 801033c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801033e:	f3ef 8305 	mrs	r3, IPSR
 8010342:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	2b0f      	cmp	r3, #15
 8010348:	d914      	bls.n	8010374 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801034a:	4a17      	ldr	r2, [pc, #92]	; (80103a8 <vPortValidateInterruptPriority+0x70>)
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	4413      	add	r3, r2
 8010350:	781b      	ldrb	r3, [r3, #0]
 8010352:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010354:	4b15      	ldr	r3, [pc, #84]	; (80103ac <vPortValidateInterruptPriority+0x74>)
 8010356:	781b      	ldrb	r3, [r3, #0]
 8010358:	7afa      	ldrb	r2, [r7, #11]
 801035a:	429a      	cmp	r2, r3
 801035c:	d20a      	bcs.n	8010374 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801035e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010362:	f383 8811 	msr	BASEPRI, r3
 8010366:	f3bf 8f6f 	isb	sy
 801036a:	f3bf 8f4f 	dsb	sy
 801036e:	607b      	str	r3, [r7, #4]
}
 8010370:	bf00      	nop
 8010372:	e7fe      	b.n	8010372 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010374:	4b0e      	ldr	r3, [pc, #56]	; (80103b0 <vPortValidateInterruptPriority+0x78>)
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801037c:	4b0d      	ldr	r3, [pc, #52]	; (80103b4 <vPortValidateInterruptPriority+0x7c>)
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	429a      	cmp	r2, r3
 8010382:	d90a      	bls.n	801039a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010388:	f383 8811 	msr	BASEPRI, r3
 801038c:	f3bf 8f6f 	isb	sy
 8010390:	f3bf 8f4f 	dsb	sy
 8010394:	603b      	str	r3, [r7, #0]
}
 8010396:	bf00      	nop
 8010398:	e7fe      	b.n	8010398 <vPortValidateInterruptPriority+0x60>
	}
 801039a:	bf00      	nop
 801039c:	3714      	adds	r7, #20
 801039e:	46bd      	mov	sp, r7
 80103a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a4:	4770      	bx	lr
 80103a6:	bf00      	nop
 80103a8:	e000e3f0 	.word	0xe000e3f0
 80103ac:	2000092c 	.word	0x2000092c
 80103b0:	e000ed0c 	.word	0xe000ed0c
 80103b4:	20000930 	.word	0x20000930

080103b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b08a      	sub	sp, #40	; 0x28
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80103c0:	2300      	movs	r3, #0
 80103c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80103c4:	f7fe fd7c 	bl	800eec0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80103c8:	4b5d      	ldr	r3, [pc, #372]	; (8010540 <pvPortMalloc+0x188>)
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d101      	bne.n	80103d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80103d0:	f000 f924 	bl	801061c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80103d4:	4b5b      	ldr	r3, [pc, #364]	; (8010544 <pvPortMalloc+0x18c>)
 80103d6:	681a      	ldr	r2, [r3, #0]
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	4013      	ands	r3, r2
 80103dc:	2b00      	cmp	r3, #0
 80103de:	f040 8093 	bne.w	8010508 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d01d      	beq.n	8010424 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80103e8:	2208      	movs	r2, #8
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	4413      	add	r3, r2
 80103ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	f003 0307 	and.w	r3, r3, #7
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d014      	beq.n	8010424 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	f023 0307 	bic.w	r3, r3, #7
 8010400:	3308      	adds	r3, #8
 8010402:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	f003 0307 	and.w	r3, r3, #7
 801040a:	2b00      	cmp	r3, #0
 801040c:	d00a      	beq.n	8010424 <pvPortMalloc+0x6c>
	__asm volatile
 801040e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010412:	f383 8811 	msr	BASEPRI, r3
 8010416:	f3bf 8f6f 	isb	sy
 801041a:	f3bf 8f4f 	dsb	sy
 801041e:	617b      	str	r3, [r7, #20]
}
 8010420:	bf00      	nop
 8010422:	e7fe      	b.n	8010422 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d06e      	beq.n	8010508 <pvPortMalloc+0x150>
 801042a:	4b47      	ldr	r3, [pc, #284]	; (8010548 <pvPortMalloc+0x190>)
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	687a      	ldr	r2, [r7, #4]
 8010430:	429a      	cmp	r2, r3
 8010432:	d869      	bhi.n	8010508 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010434:	4b45      	ldr	r3, [pc, #276]	; (801054c <pvPortMalloc+0x194>)
 8010436:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010438:	4b44      	ldr	r3, [pc, #272]	; (801054c <pvPortMalloc+0x194>)
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801043e:	e004      	b.n	801044a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010442:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801044a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801044c:	685b      	ldr	r3, [r3, #4]
 801044e:	687a      	ldr	r2, [r7, #4]
 8010450:	429a      	cmp	r2, r3
 8010452:	d903      	bls.n	801045c <pvPortMalloc+0xa4>
 8010454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	2b00      	cmp	r3, #0
 801045a:	d1f1      	bne.n	8010440 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801045c:	4b38      	ldr	r3, [pc, #224]	; (8010540 <pvPortMalloc+0x188>)
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010462:	429a      	cmp	r2, r3
 8010464:	d050      	beq.n	8010508 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010466:	6a3b      	ldr	r3, [r7, #32]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	2208      	movs	r2, #8
 801046c:	4413      	add	r3, r2
 801046e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010472:	681a      	ldr	r2, [r3, #0]
 8010474:	6a3b      	ldr	r3, [r7, #32]
 8010476:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801047a:	685a      	ldr	r2, [r3, #4]
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	1ad2      	subs	r2, r2, r3
 8010480:	2308      	movs	r3, #8
 8010482:	005b      	lsls	r3, r3, #1
 8010484:	429a      	cmp	r2, r3
 8010486:	d91f      	bls.n	80104c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	4413      	add	r3, r2
 801048e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010490:	69bb      	ldr	r3, [r7, #24]
 8010492:	f003 0307 	and.w	r3, r3, #7
 8010496:	2b00      	cmp	r3, #0
 8010498:	d00a      	beq.n	80104b0 <pvPortMalloc+0xf8>
	__asm volatile
 801049a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801049e:	f383 8811 	msr	BASEPRI, r3
 80104a2:	f3bf 8f6f 	isb	sy
 80104a6:	f3bf 8f4f 	dsb	sy
 80104aa:	613b      	str	r3, [r7, #16]
}
 80104ac:	bf00      	nop
 80104ae:	e7fe      	b.n	80104ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80104b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104b2:	685a      	ldr	r2, [r3, #4]
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	1ad2      	subs	r2, r2, r3
 80104b8:	69bb      	ldr	r3, [r7, #24]
 80104ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80104bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104be:	687a      	ldr	r2, [r7, #4]
 80104c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80104c2:	69b8      	ldr	r0, [r7, #24]
 80104c4:	f000 f90c 	bl	80106e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80104c8:	4b1f      	ldr	r3, [pc, #124]	; (8010548 <pvPortMalloc+0x190>)
 80104ca:	681a      	ldr	r2, [r3, #0]
 80104cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ce:	685b      	ldr	r3, [r3, #4]
 80104d0:	1ad3      	subs	r3, r2, r3
 80104d2:	4a1d      	ldr	r2, [pc, #116]	; (8010548 <pvPortMalloc+0x190>)
 80104d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80104d6:	4b1c      	ldr	r3, [pc, #112]	; (8010548 <pvPortMalloc+0x190>)
 80104d8:	681a      	ldr	r2, [r3, #0]
 80104da:	4b1d      	ldr	r3, [pc, #116]	; (8010550 <pvPortMalloc+0x198>)
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	429a      	cmp	r2, r3
 80104e0:	d203      	bcs.n	80104ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80104e2:	4b19      	ldr	r3, [pc, #100]	; (8010548 <pvPortMalloc+0x190>)
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	4a1a      	ldr	r2, [pc, #104]	; (8010550 <pvPortMalloc+0x198>)
 80104e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80104ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ec:	685a      	ldr	r2, [r3, #4]
 80104ee:	4b15      	ldr	r3, [pc, #84]	; (8010544 <pvPortMalloc+0x18c>)
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	431a      	orrs	r2, r3
 80104f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80104f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104fa:	2200      	movs	r2, #0
 80104fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80104fe:	4b15      	ldr	r3, [pc, #84]	; (8010554 <pvPortMalloc+0x19c>)
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	3301      	adds	r3, #1
 8010504:	4a13      	ldr	r2, [pc, #76]	; (8010554 <pvPortMalloc+0x19c>)
 8010506:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010508:	f7fe fce8 	bl	800eedc <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801050c:	69fb      	ldr	r3, [r7, #28]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d101      	bne.n	8010516 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8010512:	f7f0 fb27 	bl	8000b64 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010516:	69fb      	ldr	r3, [r7, #28]
 8010518:	f003 0307 	and.w	r3, r3, #7
 801051c:	2b00      	cmp	r3, #0
 801051e:	d00a      	beq.n	8010536 <pvPortMalloc+0x17e>
	__asm volatile
 8010520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010524:	f383 8811 	msr	BASEPRI, r3
 8010528:	f3bf 8f6f 	isb	sy
 801052c:	f3bf 8f4f 	dsb	sy
 8010530:	60fb      	str	r3, [r7, #12]
}
 8010532:	bf00      	nop
 8010534:	e7fe      	b.n	8010534 <pvPortMalloc+0x17c>
	return pvReturn;
 8010536:	69fb      	ldr	r3, [r7, #28]
}
 8010538:	4618      	mov	r0, r3
 801053a:	3728      	adds	r7, #40	; 0x28
 801053c:	46bd      	mov	sp, r7
 801053e:	bd80      	pop	{r7, pc}
 8010540:	2000893c 	.word	0x2000893c
 8010544:	20008950 	.word	0x20008950
 8010548:	20008940 	.word	0x20008940
 801054c:	20008934 	.word	0x20008934
 8010550:	20008944 	.word	0x20008944
 8010554:	20008948 	.word	0x20008948

08010558 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b086      	sub	sp, #24
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d04d      	beq.n	8010606 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801056a:	2308      	movs	r3, #8
 801056c:	425b      	negs	r3, r3
 801056e:	697a      	ldr	r2, [r7, #20]
 8010570:	4413      	add	r3, r2
 8010572:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010574:	697b      	ldr	r3, [r7, #20]
 8010576:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010578:	693b      	ldr	r3, [r7, #16]
 801057a:	685a      	ldr	r2, [r3, #4]
 801057c:	4b24      	ldr	r3, [pc, #144]	; (8010610 <vPortFree+0xb8>)
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	4013      	ands	r3, r2
 8010582:	2b00      	cmp	r3, #0
 8010584:	d10a      	bne.n	801059c <vPortFree+0x44>
	__asm volatile
 8010586:	f04f 0350 	mov.w	r3, #80	; 0x50
 801058a:	f383 8811 	msr	BASEPRI, r3
 801058e:	f3bf 8f6f 	isb	sy
 8010592:	f3bf 8f4f 	dsb	sy
 8010596:	60fb      	str	r3, [r7, #12]
}
 8010598:	bf00      	nop
 801059a:	e7fe      	b.n	801059a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801059c:	693b      	ldr	r3, [r7, #16]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d00a      	beq.n	80105ba <vPortFree+0x62>
	__asm volatile
 80105a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105a8:	f383 8811 	msr	BASEPRI, r3
 80105ac:	f3bf 8f6f 	isb	sy
 80105b0:	f3bf 8f4f 	dsb	sy
 80105b4:	60bb      	str	r3, [r7, #8]
}
 80105b6:	bf00      	nop
 80105b8:	e7fe      	b.n	80105b8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80105ba:	693b      	ldr	r3, [r7, #16]
 80105bc:	685a      	ldr	r2, [r3, #4]
 80105be:	4b14      	ldr	r3, [pc, #80]	; (8010610 <vPortFree+0xb8>)
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	4013      	ands	r3, r2
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d01e      	beq.n	8010606 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80105c8:	693b      	ldr	r3, [r7, #16]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d11a      	bne.n	8010606 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80105d0:	693b      	ldr	r3, [r7, #16]
 80105d2:	685a      	ldr	r2, [r3, #4]
 80105d4:	4b0e      	ldr	r3, [pc, #56]	; (8010610 <vPortFree+0xb8>)
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	43db      	mvns	r3, r3
 80105da:	401a      	ands	r2, r3
 80105dc:	693b      	ldr	r3, [r7, #16]
 80105de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80105e0:	f7fe fc6e 	bl	800eec0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80105e4:	693b      	ldr	r3, [r7, #16]
 80105e6:	685a      	ldr	r2, [r3, #4]
 80105e8:	4b0a      	ldr	r3, [pc, #40]	; (8010614 <vPortFree+0xbc>)
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	4413      	add	r3, r2
 80105ee:	4a09      	ldr	r2, [pc, #36]	; (8010614 <vPortFree+0xbc>)
 80105f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80105f2:	6938      	ldr	r0, [r7, #16]
 80105f4:	f000 f874 	bl	80106e0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80105f8:	4b07      	ldr	r3, [pc, #28]	; (8010618 <vPortFree+0xc0>)
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	3301      	adds	r3, #1
 80105fe:	4a06      	ldr	r2, [pc, #24]	; (8010618 <vPortFree+0xc0>)
 8010600:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010602:	f7fe fc6b 	bl	800eedc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010606:	bf00      	nop
 8010608:	3718      	adds	r7, #24
 801060a:	46bd      	mov	sp, r7
 801060c:	bd80      	pop	{r7, pc}
 801060e:	bf00      	nop
 8010610:	20008950 	.word	0x20008950
 8010614:	20008940 	.word	0x20008940
 8010618:	2000894c 	.word	0x2000894c

0801061c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801061c:	b480      	push	{r7}
 801061e:	b085      	sub	sp, #20
 8010620:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010626:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010628:	4b27      	ldr	r3, [pc, #156]	; (80106c8 <prvHeapInit+0xac>)
 801062a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	f003 0307 	and.w	r3, r3, #7
 8010632:	2b00      	cmp	r3, #0
 8010634:	d00c      	beq.n	8010650 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	3307      	adds	r3, #7
 801063a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	f023 0307 	bic.w	r3, r3, #7
 8010642:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010644:	68ba      	ldr	r2, [r7, #8]
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	1ad3      	subs	r3, r2, r3
 801064a:	4a1f      	ldr	r2, [pc, #124]	; (80106c8 <prvHeapInit+0xac>)
 801064c:	4413      	add	r3, r2
 801064e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010654:	4a1d      	ldr	r2, [pc, #116]	; (80106cc <prvHeapInit+0xb0>)
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801065a:	4b1c      	ldr	r3, [pc, #112]	; (80106cc <prvHeapInit+0xb0>)
 801065c:	2200      	movs	r2, #0
 801065e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	68ba      	ldr	r2, [r7, #8]
 8010664:	4413      	add	r3, r2
 8010666:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010668:	2208      	movs	r2, #8
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	1a9b      	subs	r3, r3, r2
 801066e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	f023 0307 	bic.w	r3, r3, #7
 8010676:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	4a15      	ldr	r2, [pc, #84]	; (80106d0 <prvHeapInit+0xb4>)
 801067c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801067e:	4b14      	ldr	r3, [pc, #80]	; (80106d0 <prvHeapInit+0xb4>)
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	2200      	movs	r2, #0
 8010684:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010686:	4b12      	ldr	r3, [pc, #72]	; (80106d0 <prvHeapInit+0xb4>)
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	2200      	movs	r2, #0
 801068c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010692:	683b      	ldr	r3, [r7, #0]
 8010694:	68fa      	ldr	r2, [r7, #12]
 8010696:	1ad2      	subs	r2, r2, r3
 8010698:	683b      	ldr	r3, [r7, #0]
 801069a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801069c:	4b0c      	ldr	r3, [pc, #48]	; (80106d0 <prvHeapInit+0xb4>)
 801069e:	681a      	ldr	r2, [r3, #0]
 80106a0:	683b      	ldr	r3, [r7, #0]
 80106a2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80106a4:	683b      	ldr	r3, [r7, #0]
 80106a6:	685b      	ldr	r3, [r3, #4]
 80106a8:	4a0a      	ldr	r2, [pc, #40]	; (80106d4 <prvHeapInit+0xb8>)
 80106aa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80106ac:	683b      	ldr	r3, [r7, #0]
 80106ae:	685b      	ldr	r3, [r3, #4]
 80106b0:	4a09      	ldr	r2, [pc, #36]	; (80106d8 <prvHeapInit+0xbc>)
 80106b2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80106b4:	4b09      	ldr	r3, [pc, #36]	; (80106dc <prvHeapInit+0xc0>)
 80106b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80106ba:	601a      	str	r2, [r3, #0]
}
 80106bc:	bf00      	nop
 80106be:	3714      	adds	r7, #20
 80106c0:	46bd      	mov	sp, r7
 80106c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c6:	4770      	bx	lr
 80106c8:	20000934 	.word	0x20000934
 80106cc:	20008934 	.word	0x20008934
 80106d0:	2000893c 	.word	0x2000893c
 80106d4:	20008944 	.word	0x20008944
 80106d8:	20008940 	.word	0x20008940
 80106dc:	20008950 	.word	0x20008950

080106e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80106e0:	b480      	push	{r7}
 80106e2:	b085      	sub	sp, #20
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80106e8:	4b28      	ldr	r3, [pc, #160]	; (801078c <prvInsertBlockIntoFreeList+0xac>)
 80106ea:	60fb      	str	r3, [r7, #12]
 80106ec:	e002      	b.n	80106f4 <prvInsertBlockIntoFreeList+0x14>
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	60fb      	str	r3, [r7, #12]
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	687a      	ldr	r2, [r7, #4]
 80106fa:	429a      	cmp	r2, r3
 80106fc:	d8f7      	bhi.n	80106ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	685b      	ldr	r3, [r3, #4]
 8010706:	68ba      	ldr	r2, [r7, #8]
 8010708:	4413      	add	r3, r2
 801070a:	687a      	ldr	r2, [r7, #4]
 801070c:	429a      	cmp	r2, r3
 801070e:	d108      	bne.n	8010722 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	685a      	ldr	r2, [r3, #4]
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	685b      	ldr	r3, [r3, #4]
 8010718:	441a      	add	r2, r3
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	685b      	ldr	r3, [r3, #4]
 801072a:	68ba      	ldr	r2, [r7, #8]
 801072c:	441a      	add	r2, r3
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	429a      	cmp	r2, r3
 8010734:	d118      	bne.n	8010768 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	681a      	ldr	r2, [r3, #0]
 801073a:	4b15      	ldr	r3, [pc, #84]	; (8010790 <prvInsertBlockIntoFreeList+0xb0>)
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	429a      	cmp	r2, r3
 8010740:	d00d      	beq.n	801075e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	685a      	ldr	r2, [r3, #4]
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	685b      	ldr	r3, [r3, #4]
 801074c:	441a      	add	r2, r3
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	681a      	ldr	r2, [r3, #0]
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	601a      	str	r2, [r3, #0]
 801075c:	e008      	b.n	8010770 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801075e:	4b0c      	ldr	r3, [pc, #48]	; (8010790 <prvInsertBlockIntoFreeList+0xb0>)
 8010760:	681a      	ldr	r2, [r3, #0]
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	601a      	str	r2, [r3, #0]
 8010766:	e003      	b.n	8010770 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	681a      	ldr	r2, [r3, #0]
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010770:	68fa      	ldr	r2, [r7, #12]
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	429a      	cmp	r2, r3
 8010776:	d002      	beq.n	801077e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	687a      	ldr	r2, [r7, #4]
 801077c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801077e:	bf00      	nop
 8010780:	3714      	adds	r7, #20
 8010782:	46bd      	mov	sp, r7
 8010784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010788:	4770      	bx	lr
 801078a:	bf00      	nop
 801078c:	20008934 	.word	0x20008934
 8010790:	2000893c 	.word	0x2000893c

08010794 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8010794:	b580      	push	{r7, lr}
 8010796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 8010798:	2200      	movs	r2, #0
 801079a:	490e      	ldr	r1, [pc, #56]	; (80107d4 <MX_USB_HOST_Init+0x40>)
 801079c:	480e      	ldr	r0, [pc, #56]	; (80107d8 <MX_USB_HOST_Init+0x44>)
 801079e:	f7fa fe97 	bl	800b4d0 <USBH_Init>
 80107a2:	4603      	mov	r3, r0
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d001      	beq.n	80107ac <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80107a8:	f7f0 ff36 	bl	8001618 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 80107ac:	490b      	ldr	r1, [pc, #44]	; (80107dc <MX_USB_HOST_Init+0x48>)
 80107ae:	480a      	ldr	r0, [pc, #40]	; (80107d8 <MX_USB_HOST_Init+0x44>)
 80107b0:	f7fa ff44 	bl	800b63c <USBH_RegisterClass>
 80107b4:	4603      	mov	r3, r0
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d001      	beq.n	80107be <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80107ba:	f7f0 ff2d 	bl	8001618 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 80107be:	4806      	ldr	r0, [pc, #24]	; (80107d8 <MX_USB_HOST_Init+0x44>)
 80107c0:	f7fa ffc8 	bl	800b754 <USBH_Start>
 80107c4:	4603      	mov	r3, r0
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d001      	beq.n	80107ce <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80107ca:	f7f0 ff25 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80107ce:	bf00      	nop
 80107d0:	bd80      	pop	{r7, pc}
 80107d2:	bf00      	nop
 80107d4:	080107e1 	.word	0x080107e1
 80107d8:	20008954 	.word	0x20008954
 80107dc:	20000054 	.word	0x20000054

080107e0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80107e0:	b480      	push	{r7}
 80107e2:	b083      	sub	sp, #12
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
 80107e8:	460b      	mov	r3, r1
 80107ea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80107ec:	78fb      	ldrb	r3, [r7, #3]
 80107ee:	3b01      	subs	r3, #1
 80107f0:	2b04      	cmp	r3, #4
 80107f2:	d819      	bhi.n	8010828 <USBH_UserProcess+0x48>
 80107f4:	a201      	add	r2, pc, #4	; (adr r2, 80107fc <USBH_UserProcess+0x1c>)
 80107f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107fa:	bf00      	nop
 80107fc:	08010829 	.word	0x08010829
 8010800:	08010819 	.word	0x08010819
 8010804:	08010829 	.word	0x08010829
 8010808:	08010821 	.word	0x08010821
 801080c:	08010811 	.word	0x08010811
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8010810:	4b09      	ldr	r3, [pc, #36]	; (8010838 <USBH_UserProcess+0x58>)
 8010812:	2203      	movs	r2, #3
 8010814:	701a      	strb	r2, [r3, #0]
  break;
 8010816:	e008      	b.n	801082a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8010818:	4b07      	ldr	r3, [pc, #28]	; (8010838 <USBH_UserProcess+0x58>)
 801081a:	2202      	movs	r2, #2
 801081c:	701a      	strb	r2, [r3, #0]
  break;
 801081e:	e004      	b.n	801082a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8010820:	4b05      	ldr	r3, [pc, #20]	; (8010838 <USBH_UserProcess+0x58>)
 8010822:	2201      	movs	r2, #1
 8010824:	701a      	strb	r2, [r3, #0]
  break;
 8010826:	e000      	b.n	801082a <USBH_UserProcess+0x4a>

  default:
  break;
 8010828:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801082a:	bf00      	nop
 801082c:	370c      	adds	r7, #12
 801082e:	46bd      	mov	sp, r7
 8010830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010834:	4770      	bx	lr
 8010836:	bf00      	nop
 8010838:	20008d38 	.word	0x20008d38

0801083c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801083c:	b580      	push	{r7, lr}
 801083e:	b08a      	sub	sp, #40	; 0x28
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010844:	f107 0314 	add.w	r3, r7, #20
 8010848:	2200      	movs	r2, #0
 801084a:	601a      	str	r2, [r3, #0]
 801084c:	605a      	str	r2, [r3, #4]
 801084e:	609a      	str	r2, [r3, #8]
 8010850:	60da      	str	r2, [r3, #12]
 8010852:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	4a24      	ldr	r2, [pc, #144]	; (80108ec <HAL_HCD_MspInit+0xb0>)
 801085a:	4293      	cmp	r3, r2
 801085c:	d141      	bne.n	80108e2 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 801085e:	2300      	movs	r3, #0
 8010860:	613b      	str	r3, [r7, #16]
 8010862:	4b23      	ldr	r3, [pc, #140]	; (80108f0 <HAL_HCD_MspInit+0xb4>)
 8010864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010866:	4a22      	ldr	r2, [pc, #136]	; (80108f0 <HAL_HCD_MspInit+0xb4>)
 8010868:	f043 0302 	orr.w	r3, r3, #2
 801086c:	6313      	str	r3, [r2, #48]	; 0x30
 801086e:	4b20      	ldr	r3, [pc, #128]	; (80108f0 <HAL_HCD_MspInit+0xb4>)
 8010870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010872:	f003 0302 	and.w	r3, r3, #2
 8010876:	613b      	str	r3, [r7, #16]
 8010878:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 801087a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 801087e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010880:	2302      	movs	r3, #2
 8010882:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010884:	2300      	movs	r3, #0
 8010886:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010888:	2300      	movs	r3, #0
 801088a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 801088c:	230c      	movs	r3, #12
 801088e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010890:	f107 0314 	add.w	r3, r7, #20
 8010894:	4619      	mov	r1, r3
 8010896:	4817      	ldr	r0, [pc, #92]	; (80108f4 <HAL_HCD_MspInit+0xb8>)
 8010898:	f7f3 fe04 	bl	80044a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 801089c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80108a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80108a2:	2300      	movs	r3, #0
 80108a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80108a6:	2300      	movs	r3, #0
 80108a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80108aa:	f107 0314 	add.w	r3, r7, #20
 80108ae:	4619      	mov	r1, r3
 80108b0:	4810      	ldr	r0, [pc, #64]	; (80108f4 <HAL_HCD_MspInit+0xb8>)
 80108b2:	f7f3 fdf7 	bl	80044a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80108b6:	2300      	movs	r3, #0
 80108b8:	60fb      	str	r3, [r7, #12]
 80108ba:	4b0d      	ldr	r3, [pc, #52]	; (80108f0 <HAL_HCD_MspInit+0xb4>)
 80108bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108be:	4a0c      	ldr	r2, [pc, #48]	; (80108f0 <HAL_HCD_MspInit+0xb4>)
 80108c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80108c4:	6313      	str	r3, [r2, #48]	; 0x30
 80108c6:	4b0a      	ldr	r3, [pc, #40]	; (80108f0 <HAL_HCD_MspInit+0xb4>)
 80108c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80108ce:	60fb      	str	r3, [r7, #12]
 80108d0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 80108d2:	2200      	movs	r2, #0
 80108d4:	2105      	movs	r1, #5
 80108d6:	204d      	movs	r0, #77	; 0x4d
 80108d8:	f7f2 ffce 	bl	8003878 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80108dc:	204d      	movs	r0, #77	; 0x4d
 80108de:	f7f2 ffe7 	bl	80038b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80108e2:	bf00      	nop
 80108e4:	3728      	adds	r7, #40	; 0x28
 80108e6:	46bd      	mov	sp, r7
 80108e8:	bd80      	pop	{r7, pc}
 80108ea:	bf00      	nop
 80108ec:	40040000 	.word	0x40040000
 80108f0:	40023800 	.word	0x40023800
 80108f4:	40020400 	.word	0x40020400

080108f8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b082      	sub	sp, #8
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010906:	4618      	mov	r0, r3
 8010908:	f7fb fbdb 	bl	800c0c2 <USBH_LL_IncTimer>
}
 801090c:	bf00      	nop
 801090e:	3708      	adds	r7, #8
 8010910:	46bd      	mov	sp, r7
 8010912:	bd80      	pop	{r7, pc}

08010914 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b082      	sub	sp, #8
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010922:	4618      	mov	r0, r3
 8010924:	f7fb fc1f 	bl	800c166 <USBH_LL_Connect>
}
 8010928:	bf00      	nop
 801092a:	3708      	adds	r7, #8
 801092c:	46bd      	mov	sp, r7
 801092e:	bd80      	pop	{r7, pc}

08010930 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010930:	b580      	push	{r7, lr}
 8010932:	b082      	sub	sp, #8
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801093e:	4618      	mov	r0, r3
 8010940:	f7fb fc34 	bl	800c1ac <USBH_LL_Disconnect>
}
 8010944:	bf00      	nop
 8010946:	3708      	adds	r7, #8
 8010948:	46bd      	mov	sp, r7
 801094a:	bd80      	pop	{r7, pc}

0801094c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801094c:	b580      	push	{r7, lr}
 801094e:	b082      	sub	sp, #8
 8010950:	af00      	add	r7, sp, #0
 8010952:	6078      	str	r0, [r7, #4]
 8010954:	460b      	mov	r3, r1
 8010956:	70fb      	strb	r3, [r7, #3]
 8010958:	4613      	mov	r3, r2
 801095a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010962:	4618      	mov	r0, r3
 8010964:	f7fb fc69 	bl	800c23a <USBH_LL_NotifyURBChange>
#endif
}
 8010968:	bf00      	nop
 801096a:	3708      	adds	r7, #8
 801096c:	46bd      	mov	sp, r7
 801096e:	bd80      	pop	{r7, pc}

08010970 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010970:	b580      	push	{r7, lr}
 8010972:	b082      	sub	sp, #8
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801097e:	4618      	mov	r0, r3
 8010980:	f7fb fbc9 	bl	800c116 <USBH_LL_PortEnabled>
}
 8010984:	bf00      	nop
 8010986:	3708      	adds	r7, #8
 8010988:	46bd      	mov	sp, r7
 801098a:	bd80      	pop	{r7, pc}

0801098c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801098c:	b580      	push	{r7, lr}
 801098e:	b082      	sub	sp, #8
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801099a:	4618      	mov	r0, r3
 801099c:	f7fb fbd5 	bl	800c14a <USBH_LL_PortDisabled>
}
 80109a0:	bf00      	nop
 80109a2:	3708      	adds	r7, #8
 80109a4:	46bd      	mov	sp, r7
 80109a6:	bd80      	pop	{r7, pc}

080109a8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b082      	sub	sp, #8
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d132      	bne.n	8010a20 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 80109ba:	4a1c      	ldr	r2, [pc, #112]	; (8010a2c <USBH_LL_Init+0x84>)
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	4a19      	ldr	r2, [pc, #100]	; (8010a2c <USBH_LL_Init+0x84>)
 80109c6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80109ca:	4b18      	ldr	r3, [pc, #96]	; (8010a2c <USBH_LL_Init+0x84>)
 80109cc:	4a18      	ldr	r2, [pc, #96]	; (8010a30 <USBH_LL_Init+0x88>)
 80109ce:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 80109d0:	4b16      	ldr	r3, [pc, #88]	; (8010a2c <USBH_LL_Init+0x84>)
 80109d2:	220c      	movs	r2, #12
 80109d4:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 80109d6:	4b15      	ldr	r3, [pc, #84]	; (8010a2c <USBH_LL_Init+0x84>)
 80109d8:	2201      	movs	r2, #1
 80109da:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80109dc:	4b13      	ldr	r3, [pc, #76]	; (8010a2c <USBH_LL_Init+0x84>)
 80109de:	2200      	movs	r2, #0
 80109e0:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80109e2:	4b12      	ldr	r3, [pc, #72]	; (8010a2c <USBH_LL_Init+0x84>)
 80109e4:	2202      	movs	r2, #2
 80109e6:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80109e8:	4b10      	ldr	r3, [pc, #64]	; (8010a2c <USBH_LL_Init+0x84>)
 80109ea:	2200      	movs	r2, #0
 80109ec:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80109ee:	4b0f      	ldr	r3, [pc, #60]	; (8010a2c <USBH_LL_Init+0x84>)
 80109f0:	2200      	movs	r2, #0
 80109f2:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80109f4:	4b0d      	ldr	r3, [pc, #52]	; (8010a2c <USBH_LL_Init+0x84>)
 80109f6:	2200      	movs	r2, #0
 80109f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80109fa:	4b0c      	ldr	r3, [pc, #48]	; (8010a2c <USBH_LL_Init+0x84>)
 80109fc:	2200      	movs	r2, #0
 80109fe:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8010a00:	480a      	ldr	r0, [pc, #40]	; (8010a2c <USBH_LL_Init+0x84>)
 8010a02:	f7f4 f838 	bl	8004a76 <HAL_HCD_Init>
 8010a06:	4603      	mov	r3, r0
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d001      	beq.n	8010a10 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 8010a0c:	f7f0 fe04 	bl	8001618 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 8010a10:	4806      	ldr	r0, [pc, #24]	; (8010a2c <USBH_LL_Init+0x84>)
 8010a12:	f7f4 fc1c 	bl	800524e <HAL_HCD_GetCurrentFrame>
 8010a16:	4603      	mov	r3, r0
 8010a18:	4619      	mov	r1, r3
 8010a1a:	6878      	ldr	r0, [r7, #4]
 8010a1c:	f7fb fb42 	bl	800c0a4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8010a20:	2300      	movs	r3, #0
}
 8010a22:	4618      	mov	r0, r3
 8010a24:	3708      	adds	r7, #8
 8010a26:	46bd      	mov	sp, r7
 8010a28:	bd80      	pop	{r7, pc}
 8010a2a:	bf00      	nop
 8010a2c:	20008d3c 	.word	0x20008d3c
 8010a30:	40040000 	.word	0x40040000

08010a34 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b084      	sub	sp, #16
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010a40:	2300      	movs	r3, #0
 8010a42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f7f4 fb89 	bl	8005162 <HAL_HCD_Start>
 8010a50:	4603      	mov	r3, r0
 8010a52:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010a54:	7bfb      	ldrb	r3, [r7, #15]
 8010a56:	4618      	mov	r0, r3
 8010a58:	f000 f95c 	bl	8010d14 <USBH_Get_USB_Status>
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a60:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a62:	4618      	mov	r0, r3
 8010a64:	3710      	adds	r7, #16
 8010a66:	46bd      	mov	sp, r7
 8010a68:	bd80      	pop	{r7, pc}

08010a6a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8010a6a:	b580      	push	{r7, lr}
 8010a6c:	b084      	sub	sp, #16
 8010a6e:	af00      	add	r7, sp, #0
 8010a70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a72:	2300      	movs	r3, #0
 8010a74:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010a76:	2300      	movs	r3, #0
 8010a78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010a80:	4618      	mov	r0, r3
 8010a82:	f7f4 fb91 	bl	80051a8 <HAL_HCD_Stop>
 8010a86:	4603      	mov	r3, r0
 8010a88:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010a8a:	7bfb      	ldrb	r3, [r7, #15]
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	f000 f941 	bl	8010d14 <USBH_Get_USB_Status>
 8010a92:	4603      	mov	r3, r0
 8010a94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a96:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a98:	4618      	mov	r0, r3
 8010a9a:	3710      	adds	r7, #16
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	bd80      	pop	{r7, pc}

08010aa0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b084      	sub	sp, #16
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010aa8:	2301      	movs	r3, #1
 8010aaa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	f7f4 fbd9 	bl	800526a <HAL_HCD_GetCurrentSpeed>
 8010ab8:	4603      	mov	r3, r0
 8010aba:	2b02      	cmp	r3, #2
 8010abc:	d00c      	beq.n	8010ad8 <USBH_LL_GetSpeed+0x38>
 8010abe:	2b02      	cmp	r3, #2
 8010ac0:	d80d      	bhi.n	8010ade <USBH_LL_GetSpeed+0x3e>
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d002      	beq.n	8010acc <USBH_LL_GetSpeed+0x2c>
 8010ac6:	2b01      	cmp	r3, #1
 8010ac8:	d003      	beq.n	8010ad2 <USBH_LL_GetSpeed+0x32>
 8010aca:	e008      	b.n	8010ade <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010acc:	2300      	movs	r3, #0
 8010ace:	73fb      	strb	r3, [r7, #15]
    break;
 8010ad0:	e008      	b.n	8010ae4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8010ad2:	2301      	movs	r3, #1
 8010ad4:	73fb      	strb	r3, [r7, #15]
    break;
 8010ad6:	e005      	b.n	8010ae4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010ad8:	2302      	movs	r3, #2
 8010ada:	73fb      	strb	r3, [r7, #15]
    break;
 8010adc:	e002      	b.n	8010ae4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8010ade:	2301      	movs	r3, #1
 8010ae0:	73fb      	strb	r3, [r7, #15]
    break;
 8010ae2:	bf00      	nop
  }
  return  speed;
 8010ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	3710      	adds	r7, #16
 8010aea:	46bd      	mov	sp, r7
 8010aec:	bd80      	pop	{r7, pc}

08010aee <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8010aee:	b580      	push	{r7, lr}
 8010af0:	b084      	sub	sp, #16
 8010af2:	af00      	add	r7, sp, #0
 8010af4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010af6:	2300      	movs	r3, #0
 8010af8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010afa:	2300      	movs	r3, #0
 8010afc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010b04:	4618      	mov	r0, r3
 8010b06:	f7f4 fb6c 	bl	80051e2 <HAL_HCD_ResetPort>
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010b0e:	7bfb      	ldrb	r3, [r7, #15]
 8010b10:	4618      	mov	r0, r3
 8010b12:	f000 f8ff 	bl	8010d14 <USBH_Get_USB_Status>
 8010b16:	4603      	mov	r3, r0
 8010b18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	3710      	adds	r7, #16
 8010b20:	46bd      	mov	sp, r7
 8010b22:	bd80      	pop	{r7, pc}

08010b24 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b082      	sub	sp, #8
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
 8010b2c:	460b      	mov	r3, r1
 8010b2e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010b36:	78fa      	ldrb	r2, [r7, #3]
 8010b38:	4611      	mov	r1, r2
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	f7f4 fb73 	bl	8005226 <HAL_HCD_HC_GetXferCount>
 8010b40:	4603      	mov	r3, r0
}
 8010b42:	4618      	mov	r0, r3
 8010b44:	3708      	adds	r7, #8
 8010b46:	46bd      	mov	sp, r7
 8010b48:	bd80      	pop	{r7, pc}

08010b4a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010b4a:	b590      	push	{r4, r7, lr}
 8010b4c:	b089      	sub	sp, #36	; 0x24
 8010b4e:	af04      	add	r7, sp, #16
 8010b50:	6078      	str	r0, [r7, #4]
 8010b52:	4608      	mov	r0, r1
 8010b54:	4611      	mov	r1, r2
 8010b56:	461a      	mov	r2, r3
 8010b58:	4603      	mov	r3, r0
 8010b5a:	70fb      	strb	r3, [r7, #3]
 8010b5c:	460b      	mov	r3, r1
 8010b5e:	70bb      	strb	r3, [r7, #2]
 8010b60:	4613      	mov	r3, r2
 8010b62:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b64:	2300      	movs	r3, #0
 8010b66:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010b68:	2300      	movs	r3, #0
 8010b6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010b72:	787c      	ldrb	r4, [r7, #1]
 8010b74:	78ba      	ldrb	r2, [r7, #2]
 8010b76:	78f9      	ldrb	r1, [r7, #3]
 8010b78:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010b7a:	9302      	str	r3, [sp, #8]
 8010b7c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010b80:	9301      	str	r3, [sp, #4]
 8010b82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010b86:	9300      	str	r3, [sp, #0]
 8010b88:	4623      	mov	r3, r4
 8010b8a:	f7f3 ffd6 	bl	8004b3a <HAL_HCD_HC_Init>
 8010b8e:	4603      	mov	r3, r0
 8010b90:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8010b92:	7bfb      	ldrb	r3, [r7, #15]
 8010b94:	4618      	mov	r0, r3
 8010b96:	f000 f8bd 	bl	8010d14 <USBH_Get_USB_Status>
 8010b9a:	4603      	mov	r3, r0
 8010b9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	3714      	adds	r7, #20
 8010ba4:	46bd      	mov	sp, r7
 8010ba6:	bd90      	pop	{r4, r7, pc}

08010ba8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b084      	sub	sp, #16
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
 8010bb0:	460b      	mov	r3, r1
 8010bb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010bb8:	2300      	movs	r3, #0
 8010bba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010bc2:	78fa      	ldrb	r2, [r7, #3]
 8010bc4:	4611      	mov	r1, r2
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	f7f4 f846 	bl	8004c58 <HAL_HCD_HC_Halt>
 8010bcc:	4603      	mov	r3, r0
 8010bce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010bd0:	7bfb      	ldrb	r3, [r7, #15]
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	f000 f89e 	bl	8010d14 <USBH_Get_USB_Status>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010bdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8010bde:	4618      	mov	r0, r3
 8010be0:	3710      	adds	r7, #16
 8010be2:	46bd      	mov	sp, r7
 8010be4:	bd80      	pop	{r7, pc}

08010be6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8010be6:	b590      	push	{r4, r7, lr}
 8010be8:	b089      	sub	sp, #36	; 0x24
 8010bea:	af04      	add	r7, sp, #16
 8010bec:	6078      	str	r0, [r7, #4]
 8010bee:	4608      	mov	r0, r1
 8010bf0:	4611      	mov	r1, r2
 8010bf2:	461a      	mov	r2, r3
 8010bf4:	4603      	mov	r3, r0
 8010bf6:	70fb      	strb	r3, [r7, #3]
 8010bf8:	460b      	mov	r3, r1
 8010bfa:	70bb      	strb	r3, [r7, #2]
 8010bfc:	4613      	mov	r3, r2
 8010bfe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c00:	2300      	movs	r3, #0
 8010c02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010c04:	2300      	movs	r3, #0
 8010c06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8010c0e:	787c      	ldrb	r4, [r7, #1]
 8010c10:	78ba      	ldrb	r2, [r7, #2]
 8010c12:	78f9      	ldrb	r1, [r7, #3]
 8010c14:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010c18:	9303      	str	r3, [sp, #12]
 8010c1a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010c1c:	9302      	str	r3, [sp, #8]
 8010c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c20:	9301      	str	r3, [sp, #4]
 8010c22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010c26:	9300      	str	r3, [sp, #0]
 8010c28:	4623      	mov	r3, r4
 8010c2a:	f7f4 f839 	bl	8004ca0 <HAL_HCD_HC_SubmitRequest>
 8010c2e:	4603      	mov	r3, r0
 8010c30:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8010c32:	7bfb      	ldrb	r3, [r7, #15]
 8010c34:	4618      	mov	r0, r3
 8010c36:	f000 f86d 	bl	8010d14 <USBH_Get_USB_Status>
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c40:	4618      	mov	r0, r3
 8010c42:	3714      	adds	r7, #20
 8010c44:	46bd      	mov	sp, r7
 8010c46:	bd90      	pop	{r4, r7, pc}

08010c48 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	b082      	sub	sp, #8
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	6078      	str	r0, [r7, #4]
 8010c50:	460b      	mov	r3, r1
 8010c52:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010c5a:	78fa      	ldrb	r2, [r7, #3]
 8010c5c:	4611      	mov	r1, r2
 8010c5e:	4618      	mov	r0, r3
 8010c60:	f7f4 facd 	bl	80051fe <HAL_HCD_HC_GetURBState>
 8010c64:	4603      	mov	r3, r0
}
 8010c66:	4618      	mov	r0, r3
 8010c68:	3708      	adds	r7, #8
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	bd80      	pop	{r7, pc}

08010c6e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8010c6e:	b580      	push	{r7, lr}
 8010c70:	b082      	sub	sp, #8
 8010c72:	af00      	add	r7, sp, #0
 8010c74:	6078      	str	r0, [r7, #4]
 8010c76:	460b      	mov	r3, r1
 8010c78:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d103      	bne.n	8010c8c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 8010c84:	78fb      	ldrb	r3, [r7, #3]
 8010c86:	4618      	mov	r0, r3
 8010c88:	f000 f870 	bl	8010d6c <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010c8c:	20c8      	movs	r0, #200	; 0xc8
 8010c8e:	f7f2 fd17 	bl	80036c0 <HAL_Delay>
  return USBH_OK;
 8010c92:	2300      	movs	r3, #0
}
 8010c94:	4618      	mov	r0, r3
 8010c96:	3708      	adds	r7, #8
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	bd80      	pop	{r7, pc}

08010c9c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010c9c:	b480      	push	{r7}
 8010c9e:	b085      	sub	sp, #20
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
 8010ca4:	460b      	mov	r3, r1
 8010ca6:	70fb      	strb	r3, [r7, #3]
 8010ca8:	4613      	mov	r3, r2
 8010caa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8010cb2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8010cb4:	78fb      	ldrb	r3, [r7, #3]
 8010cb6:	68fa      	ldr	r2, [r7, #12]
 8010cb8:	212c      	movs	r1, #44	; 0x2c
 8010cba:	fb01 f303 	mul.w	r3, r1, r3
 8010cbe:	4413      	add	r3, r2
 8010cc0:	333b      	adds	r3, #59	; 0x3b
 8010cc2:	781b      	ldrb	r3, [r3, #0]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d009      	beq.n	8010cdc <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010cc8:	78fb      	ldrb	r3, [r7, #3]
 8010cca:	68fa      	ldr	r2, [r7, #12]
 8010ccc:	212c      	movs	r1, #44	; 0x2c
 8010cce:	fb01 f303 	mul.w	r3, r1, r3
 8010cd2:	4413      	add	r3, r2
 8010cd4:	3354      	adds	r3, #84	; 0x54
 8010cd6:	78ba      	ldrb	r2, [r7, #2]
 8010cd8:	701a      	strb	r2, [r3, #0]
 8010cda:	e008      	b.n	8010cee <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010cdc:	78fb      	ldrb	r3, [r7, #3]
 8010cde:	68fa      	ldr	r2, [r7, #12]
 8010ce0:	212c      	movs	r1, #44	; 0x2c
 8010ce2:	fb01 f303 	mul.w	r3, r1, r3
 8010ce6:	4413      	add	r3, r2
 8010ce8:	3355      	adds	r3, #85	; 0x55
 8010cea:	78ba      	ldrb	r2, [r7, #2]
 8010cec:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8010cee:	2300      	movs	r3, #0
}
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	3714      	adds	r7, #20
 8010cf4:	46bd      	mov	sp, r7
 8010cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cfa:	4770      	bx	lr

08010cfc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	b082      	sub	sp, #8
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8010d04:	6878      	ldr	r0, [r7, #4]
 8010d06:	f7f2 fcdb 	bl	80036c0 <HAL_Delay>
}
 8010d0a:	bf00      	nop
 8010d0c:	3708      	adds	r7, #8
 8010d0e:	46bd      	mov	sp, r7
 8010d10:	bd80      	pop	{r7, pc}
	...

08010d14 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010d14:	b480      	push	{r7}
 8010d16:	b085      	sub	sp, #20
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	4603      	mov	r3, r0
 8010d1c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010d1e:	2300      	movs	r3, #0
 8010d20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010d22:	79fb      	ldrb	r3, [r7, #7]
 8010d24:	2b03      	cmp	r3, #3
 8010d26:	d817      	bhi.n	8010d58 <USBH_Get_USB_Status+0x44>
 8010d28:	a201      	add	r2, pc, #4	; (adr r2, 8010d30 <USBH_Get_USB_Status+0x1c>)
 8010d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d2e:	bf00      	nop
 8010d30:	08010d41 	.word	0x08010d41
 8010d34:	08010d47 	.word	0x08010d47
 8010d38:	08010d4d 	.word	0x08010d4d
 8010d3c:	08010d53 	.word	0x08010d53
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8010d40:	2300      	movs	r3, #0
 8010d42:	73fb      	strb	r3, [r7, #15]
    break;
 8010d44:	e00b      	b.n	8010d5e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8010d46:	2302      	movs	r3, #2
 8010d48:	73fb      	strb	r3, [r7, #15]
    break;
 8010d4a:	e008      	b.n	8010d5e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010d4c:	2301      	movs	r3, #1
 8010d4e:	73fb      	strb	r3, [r7, #15]
    break;
 8010d50:	e005      	b.n	8010d5e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8010d52:	2302      	movs	r3, #2
 8010d54:	73fb      	strb	r3, [r7, #15]
    break;
 8010d56:	e002      	b.n	8010d5e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010d58:	2302      	movs	r3, #2
 8010d5a:	73fb      	strb	r3, [r7, #15]
    break;
 8010d5c:	bf00      	nop
  }
  return usb_status;
 8010d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d60:	4618      	mov	r0, r3
 8010d62:	3714      	adds	r7, #20
 8010d64:	46bd      	mov	sp, r7
 8010d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6a:	4770      	bx	lr

08010d6c <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b084      	sub	sp, #16
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	4603      	mov	r3, r0
 8010d74:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8010d76:	79fb      	ldrb	r3, [r7, #7]
 8010d78:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 8010d7a:	79fb      	ldrb	r3, [r7, #7]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d102      	bne.n	8010d86 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8010d80:	2301      	movs	r3, #1
 8010d82:	73fb      	strb	r3, [r7, #15]
 8010d84:	e001      	b.n	8010d8a <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8010d86:	2300      	movs	r3, #0
 8010d88:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 8010d8a:	7bfb      	ldrb	r3, [r7, #15]
 8010d8c:	461a      	mov	r2, r3
 8010d8e:	2110      	movs	r1, #16
 8010d90:	4803      	ldr	r0, [pc, #12]	; (8010da0 <MX_DriverVbusHS+0x34>)
 8010d92:	f7f3 fe57 	bl	8004a44 <HAL_GPIO_WritePin>
}
 8010d96:	bf00      	nop
 8010d98:	3710      	adds	r7, #16
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	bd80      	pop	{r7, pc}
 8010d9e:	bf00      	nop
 8010da0:	40020800 	.word	0x40020800

08010da4 <__errno>:
 8010da4:	4b01      	ldr	r3, [pc, #4]	; (8010dac <__errno+0x8>)
 8010da6:	6818      	ldr	r0, [r3, #0]
 8010da8:	4770      	bx	lr
 8010daa:	bf00      	nop
 8010dac:	20000078 	.word	0x20000078

08010db0 <__libc_init_array>:
 8010db0:	b570      	push	{r4, r5, r6, lr}
 8010db2:	4d0d      	ldr	r5, [pc, #52]	; (8010de8 <__libc_init_array+0x38>)
 8010db4:	4c0d      	ldr	r4, [pc, #52]	; (8010dec <__libc_init_array+0x3c>)
 8010db6:	1b64      	subs	r4, r4, r5
 8010db8:	10a4      	asrs	r4, r4, #2
 8010dba:	2600      	movs	r6, #0
 8010dbc:	42a6      	cmp	r6, r4
 8010dbe:	d109      	bne.n	8010dd4 <__libc_init_array+0x24>
 8010dc0:	4d0b      	ldr	r5, [pc, #44]	; (8010df0 <__libc_init_array+0x40>)
 8010dc2:	4c0c      	ldr	r4, [pc, #48]	; (8010df4 <__libc_init_array+0x44>)
 8010dc4:	f001 fa40 	bl	8012248 <_init>
 8010dc8:	1b64      	subs	r4, r4, r5
 8010dca:	10a4      	asrs	r4, r4, #2
 8010dcc:	2600      	movs	r6, #0
 8010dce:	42a6      	cmp	r6, r4
 8010dd0:	d105      	bne.n	8010dde <__libc_init_array+0x2e>
 8010dd2:	bd70      	pop	{r4, r5, r6, pc}
 8010dd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8010dd8:	4798      	blx	r3
 8010dda:	3601      	adds	r6, #1
 8010ddc:	e7ee      	b.n	8010dbc <__libc_init_array+0xc>
 8010dde:	f855 3b04 	ldr.w	r3, [r5], #4
 8010de2:	4798      	blx	r3
 8010de4:	3601      	adds	r6, #1
 8010de6:	e7f2      	b.n	8010dce <__libc_init_array+0x1e>
 8010de8:	08013f74 	.word	0x08013f74
 8010dec:	08013f74 	.word	0x08013f74
 8010df0:	08013f74 	.word	0x08013f74
 8010df4:	08013f78 	.word	0x08013f78

08010df8 <malloc>:
 8010df8:	4b02      	ldr	r3, [pc, #8]	; (8010e04 <malloc+0xc>)
 8010dfa:	4601      	mov	r1, r0
 8010dfc:	6818      	ldr	r0, [r3, #0]
 8010dfe:	f000 b88d 	b.w	8010f1c <_malloc_r>
 8010e02:	bf00      	nop
 8010e04:	20000078 	.word	0x20000078

08010e08 <free>:
 8010e08:	4b02      	ldr	r3, [pc, #8]	; (8010e14 <free+0xc>)
 8010e0a:	4601      	mov	r1, r0
 8010e0c:	6818      	ldr	r0, [r3, #0]
 8010e0e:	f000 b819 	b.w	8010e44 <_free_r>
 8010e12:	bf00      	nop
 8010e14:	20000078 	.word	0x20000078

08010e18 <memcpy>:
 8010e18:	440a      	add	r2, r1
 8010e1a:	4291      	cmp	r1, r2
 8010e1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8010e20:	d100      	bne.n	8010e24 <memcpy+0xc>
 8010e22:	4770      	bx	lr
 8010e24:	b510      	push	{r4, lr}
 8010e26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010e2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010e2e:	4291      	cmp	r1, r2
 8010e30:	d1f9      	bne.n	8010e26 <memcpy+0xe>
 8010e32:	bd10      	pop	{r4, pc}

08010e34 <memset>:
 8010e34:	4402      	add	r2, r0
 8010e36:	4603      	mov	r3, r0
 8010e38:	4293      	cmp	r3, r2
 8010e3a:	d100      	bne.n	8010e3e <memset+0xa>
 8010e3c:	4770      	bx	lr
 8010e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8010e42:	e7f9      	b.n	8010e38 <memset+0x4>

08010e44 <_free_r>:
 8010e44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010e46:	2900      	cmp	r1, #0
 8010e48:	d044      	beq.n	8010ed4 <_free_r+0x90>
 8010e4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010e4e:	9001      	str	r0, [sp, #4]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	f1a1 0404 	sub.w	r4, r1, #4
 8010e56:	bfb8      	it	lt
 8010e58:	18e4      	addlt	r4, r4, r3
 8010e5a:	f000 f975 	bl	8011148 <__malloc_lock>
 8010e5e:	4a1e      	ldr	r2, [pc, #120]	; (8010ed8 <_free_r+0x94>)
 8010e60:	9801      	ldr	r0, [sp, #4]
 8010e62:	6813      	ldr	r3, [r2, #0]
 8010e64:	b933      	cbnz	r3, 8010e74 <_free_r+0x30>
 8010e66:	6063      	str	r3, [r4, #4]
 8010e68:	6014      	str	r4, [r2, #0]
 8010e6a:	b003      	add	sp, #12
 8010e6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010e70:	f000 b970 	b.w	8011154 <__malloc_unlock>
 8010e74:	42a3      	cmp	r3, r4
 8010e76:	d908      	bls.n	8010e8a <_free_r+0x46>
 8010e78:	6825      	ldr	r5, [r4, #0]
 8010e7a:	1961      	adds	r1, r4, r5
 8010e7c:	428b      	cmp	r3, r1
 8010e7e:	bf01      	itttt	eq
 8010e80:	6819      	ldreq	r1, [r3, #0]
 8010e82:	685b      	ldreq	r3, [r3, #4]
 8010e84:	1949      	addeq	r1, r1, r5
 8010e86:	6021      	streq	r1, [r4, #0]
 8010e88:	e7ed      	b.n	8010e66 <_free_r+0x22>
 8010e8a:	461a      	mov	r2, r3
 8010e8c:	685b      	ldr	r3, [r3, #4]
 8010e8e:	b10b      	cbz	r3, 8010e94 <_free_r+0x50>
 8010e90:	42a3      	cmp	r3, r4
 8010e92:	d9fa      	bls.n	8010e8a <_free_r+0x46>
 8010e94:	6811      	ldr	r1, [r2, #0]
 8010e96:	1855      	adds	r5, r2, r1
 8010e98:	42a5      	cmp	r5, r4
 8010e9a:	d10b      	bne.n	8010eb4 <_free_r+0x70>
 8010e9c:	6824      	ldr	r4, [r4, #0]
 8010e9e:	4421      	add	r1, r4
 8010ea0:	1854      	adds	r4, r2, r1
 8010ea2:	42a3      	cmp	r3, r4
 8010ea4:	6011      	str	r1, [r2, #0]
 8010ea6:	d1e0      	bne.n	8010e6a <_free_r+0x26>
 8010ea8:	681c      	ldr	r4, [r3, #0]
 8010eaa:	685b      	ldr	r3, [r3, #4]
 8010eac:	6053      	str	r3, [r2, #4]
 8010eae:	4421      	add	r1, r4
 8010eb0:	6011      	str	r1, [r2, #0]
 8010eb2:	e7da      	b.n	8010e6a <_free_r+0x26>
 8010eb4:	d902      	bls.n	8010ebc <_free_r+0x78>
 8010eb6:	230c      	movs	r3, #12
 8010eb8:	6003      	str	r3, [r0, #0]
 8010eba:	e7d6      	b.n	8010e6a <_free_r+0x26>
 8010ebc:	6825      	ldr	r5, [r4, #0]
 8010ebe:	1961      	adds	r1, r4, r5
 8010ec0:	428b      	cmp	r3, r1
 8010ec2:	bf04      	itt	eq
 8010ec4:	6819      	ldreq	r1, [r3, #0]
 8010ec6:	685b      	ldreq	r3, [r3, #4]
 8010ec8:	6063      	str	r3, [r4, #4]
 8010eca:	bf04      	itt	eq
 8010ecc:	1949      	addeq	r1, r1, r5
 8010ece:	6021      	streq	r1, [r4, #0]
 8010ed0:	6054      	str	r4, [r2, #4]
 8010ed2:	e7ca      	b.n	8010e6a <_free_r+0x26>
 8010ed4:	b003      	add	sp, #12
 8010ed6:	bd30      	pop	{r4, r5, pc}
 8010ed8:	20009040 	.word	0x20009040

08010edc <sbrk_aligned>:
 8010edc:	b570      	push	{r4, r5, r6, lr}
 8010ede:	4e0e      	ldr	r6, [pc, #56]	; (8010f18 <sbrk_aligned+0x3c>)
 8010ee0:	460c      	mov	r4, r1
 8010ee2:	6831      	ldr	r1, [r6, #0]
 8010ee4:	4605      	mov	r5, r0
 8010ee6:	b911      	cbnz	r1, 8010eee <sbrk_aligned+0x12>
 8010ee8:	f000 f8ba 	bl	8011060 <_sbrk_r>
 8010eec:	6030      	str	r0, [r6, #0]
 8010eee:	4621      	mov	r1, r4
 8010ef0:	4628      	mov	r0, r5
 8010ef2:	f000 f8b5 	bl	8011060 <_sbrk_r>
 8010ef6:	1c43      	adds	r3, r0, #1
 8010ef8:	d00a      	beq.n	8010f10 <sbrk_aligned+0x34>
 8010efa:	1cc4      	adds	r4, r0, #3
 8010efc:	f024 0403 	bic.w	r4, r4, #3
 8010f00:	42a0      	cmp	r0, r4
 8010f02:	d007      	beq.n	8010f14 <sbrk_aligned+0x38>
 8010f04:	1a21      	subs	r1, r4, r0
 8010f06:	4628      	mov	r0, r5
 8010f08:	f000 f8aa 	bl	8011060 <_sbrk_r>
 8010f0c:	3001      	adds	r0, #1
 8010f0e:	d101      	bne.n	8010f14 <sbrk_aligned+0x38>
 8010f10:	f04f 34ff 	mov.w	r4, #4294967295
 8010f14:	4620      	mov	r0, r4
 8010f16:	bd70      	pop	{r4, r5, r6, pc}
 8010f18:	20009044 	.word	0x20009044

08010f1c <_malloc_r>:
 8010f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f20:	1ccd      	adds	r5, r1, #3
 8010f22:	f025 0503 	bic.w	r5, r5, #3
 8010f26:	3508      	adds	r5, #8
 8010f28:	2d0c      	cmp	r5, #12
 8010f2a:	bf38      	it	cc
 8010f2c:	250c      	movcc	r5, #12
 8010f2e:	2d00      	cmp	r5, #0
 8010f30:	4607      	mov	r7, r0
 8010f32:	db01      	blt.n	8010f38 <_malloc_r+0x1c>
 8010f34:	42a9      	cmp	r1, r5
 8010f36:	d905      	bls.n	8010f44 <_malloc_r+0x28>
 8010f38:	230c      	movs	r3, #12
 8010f3a:	603b      	str	r3, [r7, #0]
 8010f3c:	2600      	movs	r6, #0
 8010f3e:	4630      	mov	r0, r6
 8010f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f44:	4e2e      	ldr	r6, [pc, #184]	; (8011000 <_malloc_r+0xe4>)
 8010f46:	f000 f8ff 	bl	8011148 <__malloc_lock>
 8010f4a:	6833      	ldr	r3, [r6, #0]
 8010f4c:	461c      	mov	r4, r3
 8010f4e:	bb34      	cbnz	r4, 8010f9e <_malloc_r+0x82>
 8010f50:	4629      	mov	r1, r5
 8010f52:	4638      	mov	r0, r7
 8010f54:	f7ff ffc2 	bl	8010edc <sbrk_aligned>
 8010f58:	1c43      	adds	r3, r0, #1
 8010f5a:	4604      	mov	r4, r0
 8010f5c:	d14d      	bne.n	8010ffa <_malloc_r+0xde>
 8010f5e:	6834      	ldr	r4, [r6, #0]
 8010f60:	4626      	mov	r6, r4
 8010f62:	2e00      	cmp	r6, #0
 8010f64:	d140      	bne.n	8010fe8 <_malloc_r+0xcc>
 8010f66:	6823      	ldr	r3, [r4, #0]
 8010f68:	4631      	mov	r1, r6
 8010f6a:	4638      	mov	r0, r7
 8010f6c:	eb04 0803 	add.w	r8, r4, r3
 8010f70:	f000 f876 	bl	8011060 <_sbrk_r>
 8010f74:	4580      	cmp	r8, r0
 8010f76:	d13a      	bne.n	8010fee <_malloc_r+0xd2>
 8010f78:	6821      	ldr	r1, [r4, #0]
 8010f7a:	3503      	adds	r5, #3
 8010f7c:	1a6d      	subs	r5, r5, r1
 8010f7e:	f025 0503 	bic.w	r5, r5, #3
 8010f82:	3508      	adds	r5, #8
 8010f84:	2d0c      	cmp	r5, #12
 8010f86:	bf38      	it	cc
 8010f88:	250c      	movcc	r5, #12
 8010f8a:	4629      	mov	r1, r5
 8010f8c:	4638      	mov	r0, r7
 8010f8e:	f7ff ffa5 	bl	8010edc <sbrk_aligned>
 8010f92:	3001      	adds	r0, #1
 8010f94:	d02b      	beq.n	8010fee <_malloc_r+0xd2>
 8010f96:	6823      	ldr	r3, [r4, #0]
 8010f98:	442b      	add	r3, r5
 8010f9a:	6023      	str	r3, [r4, #0]
 8010f9c:	e00e      	b.n	8010fbc <_malloc_r+0xa0>
 8010f9e:	6822      	ldr	r2, [r4, #0]
 8010fa0:	1b52      	subs	r2, r2, r5
 8010fa2:	d41e      	bmi.n	8010fe2 <_malloc_r+0xc6>
 8010fa4:	2a0b      	cmp	r2, #11
 8010fa6:	d916      	bls.n	8010fd6 <_malloc_r+0xba>
 8010fa8:	1961      	adds	r1, r4, r5
 8010faa:	42a3      	cmp	r3, r4
 8010fac:	6025      	str	r5, [r4, #0]
 8010fae:	bf18      	it	ne
 8010fb0:	6059      	strne	r1, [r3, #4]
 8010fb2:	6863      	ldr	r3, [r4, #4]
 8010fb4:	bf08      	it	eq
 8010fb6:	6031      	streq	r1, [r6, #0]
 8010fb8:	5162      	str	r2, [r4, r5]
 8010fba:	604b      	str	r3, [r1, #4]
 8010fbc:	4638      	mov	r0, r7
 8010fbe:	f104 060b 	add.w	r6, r4, #11
 8010fc2:	f000 f8c7 	bl	8011154 <__malloc_unlock>
 8010fc6:	f026 0607 	bic.w	r6, r6, #7
 8010fca:	1d23      	adds	r3, r4, #4
 8010fcc:	1af2      	subs	r2, r6, r3
 8010fce:	d0b6      	beq.n	8010f3e <_malloc_r+0x22>
 8010fd0:	1b9b      	subs	r3, r3, r6
 8010fd2:	50a3      	str	r3, [r4, r2]
 8010fd4:	e7b3      	b.n	8010f3e <_malloc_r+0x22>
 8010fd6:	6862      	ldr	r2, [r4, #4]
 8010fd8:	42a3      	cmp	r3, r4
 8010fda:	bf0c      	ite	eq
 8010fdc:	6032      	streq	r2, [r6, #0]
 8010fde:	605a      	strne	r2, [r3, #4]
 8010fe0:	e7ec      	b.n	8010fbc <_malloc_r+0xa0>
 8010fe2:	4623      	mov	r3, r4
 8010fe4:	6864      	ldr	r4, [r4, #4]
 8010fe6:	e7b2      	b.n	8010f4e <_malloc_r+0x32>
 8010fe8:	4634      	mov	r4, r6
 8010fea:	6876      	ldr	r6, [r6, #4]
 8010fec:	e7b9      	b.n	8010f62 <_malloc_r+0x46>
 8010fee:	230c      	movs	r3, #12
 8010ff0:	603b      	str	r3, [r7, #0]
 8010ff2:	4638      	mov	r0, r7
 8010ff4:	f000 f8ae 	bl	8011154 <__malloc_unlock>
 8010ff8:	e7a1      	b.n	8010f3e <_malloc_r+0x22>
 8010ffa:	6025      	str	r5, [r4, #0]
 8010ffc:	e7de      	b.n	8010fbc <_malloc_r+0xa0>
 8010ffe:	bf00      	nop
 8011000:	20009040 	.word	0x20009040

08011004 <srand>:
 8011004:	b538      	push	{r3, r4, r5, lr}
 8011006:	4b10      	ldr	r3, [pc, #64]	; (8011048 <srand+0x44>)
 8011008:	681d      	ldr	r5, [r3, #0]
 801100a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801100c:	4604      	mov	r4, r0
 801100e:	b9b3      	cbnz	r3, 801103e <srand+0x3a>
 8011010:	2018      	movs	r0, #24
 8011012:	f7ff fef1 	bl	8010df8 <malloc>
 8011016:	4602      	mov	r2, r0
 8011018:	63a8      	str	r0, [r5, #56]	; 0x38
 801101a:	b920      	cbnz	r0, 8011026 <srand+0x22>
 801101c:	4b0b      	ldr	r3, [pc, #44]	; (801104c <srand+0x48>)
 801101e:	480c      	ldr	r0, [pc, #48]	; (8011050 <srand+0x4c>)
 8011020:	2142      	movs	r1, #66	; 0x42
 8011022:	f000 f861 	bl	80110e8 <__assert_func>
 8011026:	490b      	ldr	r1, [pc, #44]	; (8011054 <srand+0x50>)
 8011028:	4b0b      	ldr	r3, [pc, #44]	; (8011058 <srand+0x54>)
 801102a:	e9c0 1300 	strd	r1, r3, [r0]
 801102e:	4b0b      	ldr	r3, [pc, #44]	; (801105c <srand+0x58>)
 8011030:	6083      	str	r3, [r0, #8]
 8011032:	230b      	movs	r3, #11
 8011034:	8183      	strh	r3, [r0, #12]
 8011036:	2100      	movs	r1, #0
 8011038:	2001      	movs	r0, #1
 801103a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801103e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8011040:	2200      	movs	r2, #0
 8011042:	611c      	str	r4, [r3, #16]
 8011044:	615a      	str	r2, [r3, #20]
 8011046:	bd38      	pop	{r3, r4, r5, pc}
 8011048:	20000078 	.word	0x20000078
 801104c:	08013e28 	.word	0x08013e28
 8011050:	08013e3f 	.word	0x08013e3f
 8011054:	abcd330e 	.word	0xabcd330e
 8011058:	e66d1234 	.word	0xe66d1234
 801105c:	0005deec 	.word	0x0005deec

08011060 <_sbrk_r>:
 8011060:	b538      	push	{r3, r4, r5, lr}
 8011062:	4d06      	ldr	r5, [pc, #24]	; (801107c <_sbrk_r+0x1c>)
 8011064:	2300      	movs	r3, #0
 8011066:	4604      	mov	r4, r0
 8011068:	4608      	mov	r0, r1
 801106a:	602b      	str	r3, [r5, #0]
 801106c:	f7f0 fd40 	bl	8001af0 <_sbrk>
 8011070:	1c43      	adds	r3, r0, #1
 8011072:	d102      	bne.n	801107a <_sbrk_r+0x1a>
 8011074:	682b      	ldr	r3, [r5, #0]
 8011076:	b103      	cbz	r3, 801107a <_sbrk_r+0x1a>
 8011078:	6023      	str	r3, [r4, #0]
 801107a:	bd38      	pop	{r3, r4, r5, pc}
 801107c:	20009048 	.word	0x20009048

08011080 <sniprintf>:
 8011080:	b40c      	push	{r2, r3}
 8011082:	b530      	push	{r4, r5, lr}
 8011084:	4b17      	ldr	r3, [pc, #92]	; (80110e4 <sniprintf+0x64>)
 8011086:	1e0c      	subs	r4, r1, #0
 8011088:	681d      	ldr	r5, [r3, #0]
 801108a:	b09d      	sub	sp, #116	; 0x74
 801108c:	da08      	bge.n	80110a0 <sniprintf+0x20>
 801108e:	238b      	movs	r3, #139	; 0x8b
 8011090:	602b      	str	r3, [r5, #0]
 8011092:	f04f 30ff 	mov.w	r0, #4294967295
 8011096:	b01d      	add	sp, #116	; 0x74
 8011098:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801109c:	b002      	add	sp, #8
 801109e:	4770      	bx	lr
 80110a0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80110a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80110a8:	bf14      	ite	ne
 80110aa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80110ae:	4623      	moveq	r3, r4
 80110b0:	9304      	str	r3, [sp, #16]
 80110b2:	9307      	str	r3, [sp, #28]
 80110b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80110b8:	9002      	str	r0, [sp, #8]
 80110ba:	9006      	str	r0, [sp, #24]
 80110bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80110c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80110c2:	ab21      	add	r3, sp, #132	; 0x84
 80110c4:	a902      	add	r1, sp, #8
 80110c6:	4628      	mov	r0, r5
 80110c8:	9301      	str	r3, [sp, #4]
 80110ca:	f000 f8a5 	bl	8011218 <_svfiprintf_r>
 80110ce:	1c43      	adds	r3, r0, #1
 80110d0:	bfbc      	itt	lt
 80110d2:	238b      	movlt	r3, #139	; 0x8b
 80110d4:	602b      	strlt	r3, [r5, #0]
 80110d6:	2c00      	cmp	r4, #0
 80110d8:	d0dd      	beq.n	8011096 <sniprintf+0x16>
 80110da:	9b02      	ldr	r3, [sp, #8]
 80110dc:	2200      	movs	r2, #0
 80110de:	701a      	strb	r2, [r3, #0]
 80110e0:	e7d9      	b.n	8011096 <sniprintf+0x16>
 80110e2:	bf00      	nop
 80110e4:	20000078 	.word	0x20000078

080110e8 <__assert_func>:
 80110e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80110ea:	4614      	mov	r4, r2
 80110ec:	461a      	mov	r2, r3
 80110ee:	4b09      	ldr	r3, [pc, #36]	; (8011114 <__assert_func+0x2c>)
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	4605      	mov	r5, r0
 80110f4:	68d8      	ldr	r0, [r3, #12]
 80110f6:	b14c      	cbz	r4, 801110c <__assert_func+0x24>
 80110f8:	4b07      	ldr	r3, [pc, #28]	; (8011118 <__assert_func+0x30>)
 80110fa:	9100      	str	r1, [sp, #0]
 80110fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011100:	4906      	ldr	r1, [pc, #24]	; (801111c <__assert_func+0x34>)
 8011102:	462b      	mov	r3, r5
 8011104:	f000 f80e 	bl	8011124 <fiprintf>
 8011108:	f000 fd34 	bl	8011b74 <abort>
 801110c:	4b04      	ldr	r3, [pc, #16]	; (8011120 <__assert_func+0x38>)
 801110e:	461c      	mov	r4, r3
 8011110:	e7f3      	b.n	80110fa <__assert_func+0x12>
 8011112:	bf00      	nop
 8011114:	20000078 	.word	0x20000078
 8011118:	08013e9a 	.word	0x08013e9a
 801111c:	08013ea7 	.word	0x08013ea7
 8011120:	08013ed5 	.word	0x08013ed5

08011124 <fiprintf>:
 8011124:	b40e      	push	{r1, r2, r3}
 8011126:	b503      	push	{r0, r1, lr}
 8011128:	4601      	mov	r1, r0
 801112a:	ab03      	add	r3, sp, #12
 801112c:	4805      	ldr	r0, [pc, #20]	; (8011144 <fiprintf+0x20>)
 801112e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011132:	6800      	ldr	r0, [r0, #0]
 8011134:	9301      	str	r3, [sp, #4]
 8011136:	f000 f999 	bl	801146c <_vfiprintf_r>
 801113a:	b002      	add	sp, #8
 801113c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011140:	b003      	add	sp, #12
 8011142:	4770      	bx	lr
 8011144:	20000078 	.word	0x20000078

08011148 <__malloc_lock>:
 8011148:	4801      	ldr	r0, [pc, #4]	; (8011150 <__malloc_lock+0x8>)
 801114a:	f000 bed3 	b.w	8011ef4 <__retarget_lock_acquire_recursive>
 801114e:	bf00      	nop
 8011150:	2000904c 	.word	0x2000904c

08011154 <__malloc_unlock>:
 8011154:	4801      	ldr	r0, [pc, #4]	; (801115c <__malloc_unlock+0x8>)
 8011156:	f000 bece 	b.w	8011ef6 <__retarget_lock_release_recursive>
 801115a:	bf00      	nop
 801115c:	2000904c 	.word	0x2000904c

08011160 <__ssputs_r>:
 8011160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011164:	688e      	ldr	r6, [r1, #8]
 8011166:	429e      	cmp	r6, r3
 8011168:	4682      	mov	sl, r0
 801116a:	460c      	mov	r4, r1
 801116c:	4690      	mov	r8, r2
 801116e:	461f      	mov	r7, r3
 8011170:	d838      	bhi.n	80111e4 <__ssputs_r+0x84>
 8011172:	898a      	ldrh	r2, [r1, #12]
 8011174:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011178:	d032      	beq.n	80111e0 <__ssputs_r+0x80>
 801117a:	6825      	ldr	r5, [r4, #0]
 801117c:	6909      	ldr	r1, [r1, #16]
 801117e:	eba5 0901 	sub.w	r9, r5, r1
 8011182:	6965      	ldr	r5, [r4, #20]
 8011184:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011188:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801118c:	3301      	adds	r3, #1
 801118e:	444b      	add	r3, r9
 8011190:	106d      	asrs	r5, r5, #1
 8011192:	429d      	cmp	r5, r3
 8011194:	bf38      	it	cc
 8011196:	461d      	movcc	r5, r3
 8011198:	0553      	lsls	r3, r2, #21
 801119a:	d531      	bpl.n	8011200 <__ssputs_r+0xa0>
 801119c:	4629      	mov	r1, r5
 801119e:	f7ff febd 	bl	8010f1c <_malloc_r>
 80111a2:	4606      	mov	r6, r0
 80111a4:	b950      	cbnz	r0, 80111bc <__ssputs_r+0x5c>
 80111a6:	230c      	movs	r3, #12
 80111a8:	f8ca 3000 	str.w	r3, [sl]
 80111ac:	89a3      	ldrh	r3, [r4, #12]
 80111ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80111b2:	81a3      	strh	r3, [r4, #12]
 80111b4:	f04f 30ff 	mov.w	r0, #4294967295
 80111b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111bc:	6921      	ldr	r1, [r4, #16]
 80111be:	464a      	mov	r2, r9
 80111c0:	f7ff fe2a 	bl	8010e18 <memcpy>
 80111c4:	89a3      	ldrh	r3, [r4, #12]
 80111c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80111ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80111ce:	81a3      	strh	r3, [r4, #12]
 80111d0:	6126      	str	r6, [r4, #16]
 80111d2:	6165      	str	r5, [r4, #20]
 80111d4:	444e      	add	r6, r9
 80111d6:	eba5 0509 	sub.w	r5, r5, r9
 80111da:	6026      	str	r6, [r4, #0]
 80111dc:	60a5      	str	r5, [r4, #8]
 80111de:	463e      	mov	r6, r7
 80111e0:	42be      	cmp	r6, r7
 80111e2:	d900      	bls.n	80111e6 <__ssputs_r+0x86>
 80111e4:	463e      	mov	r6, r7
 80111e6:	6820      	ldr	r0, [r4, #0]
 80111e8:	4632      	mov	r2, r6
 80111ea:	4641      	mov	r1, r8
 80111ec:	f000 feea 	bl	8011fc4 <memmove>
 80111f0:	68a3      	ldr	r3, [r4, #8]
 80111f2:	1b9b      	subs	r3, r3, r6
 80111f4:	60a3      	str	r3, [r4, #8]
 80111f6:	6823      	ldr	r3, [r4, #0]
 80111f8:	4433      	add	r3, r6
 80111fa:	6023      	str	r3, [r4, #0]
 80111fc:	2000      	movs	r0, #0
 80111fe:	e7db      	b.n	80111b8 <__ssputs_r+0x58>
 8011200:	462a      	mov	r2, r5
 8011202:	f000 fef9 	bl	8011ff8 <_realloc_r>
 8011206:	4606      	mov	r6, r0
 8011208:	2800      	cmp	r0, #0
 801120a:	d1e1      	bne.n	80111d0 <__ssputs_r+0x70>
 801120c:	6921      	ldr	r1, [r4, #16]
 801120e:	4650      	mov	r0, sl
 8011210:	f7ff fe18 	bl	8010e44 <_free_r>
 8011214:	e7c7      	b.n	80111a6 <__ssputs_r+0x46>
	...

08011218 <_svfiprintf_r>:
 8011218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801121c:	4698      	mov	r8, r3
 801121e:	898b      	ldrh	r3, [r1, #12]
 8011220:	061b      	lsls	r3, r3, #24
 8011222:	b09d      	sub	sp, #116	; 0x74
 8011224:	4607      	mov	r7, r0
 8011226:	460d      	mov	r5, r1
 8011228:	4614      	mov	r4, r2
 801122a:	d50e      	bpl.n	801124a <_svfiprintf_r+0x32>
 801122c:	690b      	ldr	r3, [r1, #16]
 801122e:	b963      	cbnz	r3, 801124a <_svfiprintf_r+0x32>
 8011230:	2140      	movs	r1, #64	; 0x40
 8011232:	f7ff fe73 	bl	8010f1c <_malloc_r>
 8011236:	6028      	str	r0, [r5, #0]
 8011238:	6128      	str	r0, [r5, #16]
 801123a:	b920      	cbnz	r0, 8011246 <_svfiprintf_r+0x2e>
 801123c:	230c      	movs	r3, #12
 801123e:	603b      	str	r3, [r7, #0]
 8011240:	f04f 30ff 	mov.w	r0, #4294967295
 8011244:	e0d1      	b.n	80113ea <_svfiprintf_r+0x1d2>
 8011246:	2340      	movs	r3, #64	; 0x40
 8011248:	616b      	str	r3, [r5, #20]
 801124a:	2300      	movs	r3, #0
 801124c:	9309      	str	r3, [sp, #36]	; 0x24
 801124e:	2320      	movs	r3, #32
 8011250:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011254:	f8cd 800c 	str.w	r8, [sp, #12]
 8011258:	2330      	movs	r3, #48	; 0x30
 801125a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011404 <_svfiprintf_r+0x1ec>
 801125e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011262:	f04f 0901 	mov.w	r9, #1
 8011266:	4623      	mov	r3, r4
 8011268:	469a      	mov	sl, r3
 801126a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801126e:	b10a      	cbz	r2, 8011274 <_svfiprintf_r+0x5c>
 8011270:	2a25      	cmp	r2, #37	; 0x25
 8011272:	d1f9      	bne.n	8011268 <_svfiprintf_r+0x50>
 8011274:	ebba 0b04 	subs.w	fp, sl, r4
 8011278:	d00b      	beq.n	8011292 <_svfiprintf_r+0x7a>
 801127a:	465b      	mov	r3, fp
 801127c:	4622      	mov	r2, r4
 801127e:	4629      	mov	r1, r5
 8011280:	4638      	mov	r0, r7
 8011282:	f7ff ff6d 	bl	8011160 <__ssputs_r>
 8011286:	3001      	adds	r0, #1
 8011288:	f000 80aa 	beq.w	80113e0 <_svfiprintf_r+0x1c8>
 801128c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801128e:	445a      	add	r2, fp
 8011290:	9209      	str	r2, [sp, #36]	; 0x24
 8011292:	f89a 3000 	ldrb.w	r3, [sl]
 8011296:	2b00      	cmp	r3, #0
 8011298:	f000 80a2 	beq.w	80113e0 <_svfiprintf_r+0x1c8>
 801129c:	2300      	movs	r3, #0
 801129e:	f04f 32ff 	mov.w	r2, #4294967295
 80112a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80112a6:	f10a 0a01 	add.w	sl, sl, #1
 80112aa:	9304      	str	r3, [sp, #16]
 80112ac:	9307      	str	r3, [sp, #28]
 80112ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80112b2:	931a      	str	r3, [sp, #104]	; 0x68
 80112b4:	4654      	mov	r4, sl
 80112b6:	2205      	movs	r2, #5
 80112b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112bc:	4851      	ldr	r0, [pc, #324]	; (8011404 <_svfiprintf_r+0x1ec>)
 80112be:	f7ee ff97 	bl	80001f0 <memchr>
 80112c2:	9a04      	ldr	r2, [sp, #16]
 80112c4:	b9d8      	cbnz	r0, 80112fe <_svfiprintf_r+0xe6>
 80112c6:	06d0      	lsls	r0, r2, #27
 80112c8:	bf44      	itt	mi
 80112ca:	2320      	movmi	r3, #32
 80112cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80112d0:	0711      	lsls	r1, r2, #28
 80112d2:	bf44      	itt	mi
 80112d4:	232b      	movmi	r3, #43	; 0x2b
 80112d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80112da:	f89a 3000 	ldrb.w	r3, [sl]
 80112de:	2b2a      	cmp	r3, #42	; 0x2a
 80112e0:	d015      	beq.n	801130e <_svfiprintf_r+0xf6>
 80112e2:	9a07      	ldr	r2, [sp, #28]
 80112e4:	4654      	mov	r4, sl
 80112e6:	2000      	movs	r0, #0
 80112e8:	f04f 0c0a 	mov.w	ip, #10
 80112ec:	4621      	mov	r1, r4
 80112ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80112f2:	3b30      	subs	r3, #48	; 0x30
 80112f4:	2b09      	cmp	r3, #9
 80112f6:	d94e      	bls.n	8011396 <_svfiprintf_r+0x17e>
 80112f8:	b1b0      	cbz	r0, 8011328 <_svfiprintf_r+0x110>
 80112fa:	9207      	str	r2, [sp, #28]
 80112fc:	e014      	b.n	8011328 <_svfiprintf_r+0x110>
 80112fe:	eba0 0308 	sub.w	r3, r0, r8
 8011302:	fa09 f303 	lsl.w	r3, r9, r3
 8011306:	4313      	orrs	r3, r2
 8011308:	9304      	str	r3, [sp, #16]
 801130a:	46a2      	mov	sl, r4
 801130c:	e7d2      	b.n	80112b4 <_svfiprintf_r+0x9c>
 801130e:	9b03      	ldr	r3, [sp, #12]
 8011310:	1d19      	adds	r1, r3, #4
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	9103      	str	r1, [sp, #12]
 8011316:	2b00      	cmp	r3, #0
 8011318:	bfbb      	ittet	lt
 801131a:	425b      	neglt	r3, r3
 801131c:	f042 0202 	orrlt.w	r2, r2, #2
 8011320:	9307      	strge	r3, [sp, #28]
 8011322:	9307      	strlt	r3, [sp, #28]
 8011324:	bfb8      	it	lt
 8011326:	9204      	strlt	r2, [sp, #16]
 8011328:	7823      	ldrb	r3, [r4, #0]
 801132a:	2b2e      	cmp	r3, #46	; 0x2e
 801132c:	d10c      	bne.n	8011348 <_svfiprintf_r+0x130>
 801132e:	7863      	ldrb	r3, [r4, #1]
 8011330:	2b2a      	cmp	r3, #42	; 0x2a
 8011332:	d135      	bne.n	80113a0 <_svfiprintf_r+0x188>
 8011334:	9b03      	ldr	r3, [sp, #12]
 8011336:	1d1a      	adds	r2, r3, #4
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	9203      	str	r2, [sp, #12]
 801133c:	2b00      	cmp	r3, #0
 801133e:	bfb8      	it	lt
 8011340:	f04f 33ff 	movlt.w	r3, #4294967295
 8011344:	3402      	adds	r4, #2
 8011346:	9305      	str	r3, [sp, #20]
 8011348:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011414 <_svfiprintf_r+0x1fc>
 801134c:	7821      	ldrb	r1, [r4, #0]
 801134e:	2203      	movs	r2, #3
 8011350:	4650      	mov	r0, sl
 8011352:	f7ee ff4d 	bl	80001f0 <memchr>
 8011356:	b140      	cbz	r0, 801136a <_svfiprintf_r+0x152>
 8011358:	2340      	movs	r3, #64	; 0x40
 801135a:	eba0 000a 	sub.w	r0, r0, sl
 801135e:	fa03 f000 	lsl.w	r0, r3, r0
 8011362:	9b04      	ldr	r3, [sp, #16]
 8011364:	4303      	orrs	r3, r0
 8011366:	3401      	adds	r4, #1
 8011368:	9304      	str	r3, [sp, #16]
 801136a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801136e:	4826      	ldr	r0, [pc, #152]	; (8011408 <_svfiprintf_r+0x1f0>)
 8011370:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011374:	2206      	movs	r2, #6
 8011376:	f7ee ff3b 	bl	80001f0 <memchr>
 801137a:	2800      	cmp	r0, #0
 801137c:	d038      	beq.n	80113f0 <_svfiprintf_r+0x1d8>
 801137e:	4b23      	ldr	r3, [pc, #140]	; (801140c <_svfiprintf_r+0x1f4>)
 8011380:	bb1b      	cbnz	r3, 80113ca <_svfiprintf_r+0x1b2>
 8011382:	9b03      	ldr	r3, [sp, #12]
 8011384:	3307      	adds	r3, #7
 8011386:	f023 0307 	bic.w	r3, r3, #7
 801138a:	3308      	adds	r3, #8
 801138c:	9303      	str	r3, [sp, #12]
 801138e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011390:	4433      	add	r3, r6
 8011392:	9309      	str	r3, [sp, #36]	; 0x24
 8011394:	e767      	b.n	8011266 <_svfiprintf_r+0x4e>
 8011396:	fb0c 3202 	mla	r2, ip, r2, r3
 801139a:	460c      	mov	r4, r1
 801139c:	2001      	movs	r0, #1
 801139e:	e7a5      	b.n	80112ec <_svfiprintf_r+0xd4>
 80113a0:	2300      	movs	r3, #0
 80113a2:	3401      	adds	r4, #1
 80113a4:	9305      	str	r3, [sp, #20]
 80113a6:	4619      	mov	r1, r3
 80113a8:	f04f 0c0a 	mov.w	ip, #10
 80113ac:	4620      	mov	r0, r4
 80113ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80113b2:	3a30      	subs	r2, #48	; 0x30
 80113b4:	2a09      	cmp	r2, #9
 80113b6:	d903      	bls.n	80113c0 <_svfiprintf_r+0x1a8>
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d0c5      	beq.n	8011348 <_svfiprintf_r+0x130>
 80113bc:	9105      	str	r1, [sp, #20]
 80113be:	e7c3      	b.n	8011348 <_svfiprintf_r+0x130>
 80113c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80113c4:	4604      	mov	r4, r0
 80113c6:	2301      	movs	r3, #1
 80113c8:	e7f0      	b.n	80113ac <_svfiprintf_r+0x194>
 80113ca:	ab03      	add	r3, sp, #12
 80113cc:	9300      	str	r3, [sp, #0]
 80113ce:	462a      	mov	r2, r5
 80113d0:	4b0f      	ldr	r3, [pc, #60]	; (8011410 <_svfiprintf_r+0x1f8>)
 80113d2:	a904      	add	r1, sp, #16
 80113d4:	4638      	mov	r0, r7
 80113d6:	f3af 8000 	nop.w
 80113da:	1c42      	adds	r2, r0, #1
 80113dc:	4606      	mov	r6, r0
 80113de:	d1d6      	bne.n	801138e <_svfiprintf_r+0x176>
 80113e0:	89ab      	ldrh	r3, [r5, #12]
 80113e2:	065b      	lsls	r3, r3, #25
 80113e4:	f53f af2c 	bmi.w	8011240 <_svfiprintf_r+0x28>
 80113e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80113ea:	b01d      	add	sp, #116	; 0x74
 80113ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113f0:	ab03      	add	r3, sp, #12
 80113f2:	9300      	str	r3, [sp, #0]
 80113f4:	462a      	mov	r2, r5
 80113f6:	4b06      	ldr	r3, [pc, #24]	; (8011410 <_svfiprintf_r+0x1f8>)
 80113f8:	a904      	add	r1, sp, #16
 80113fa:	4638      	mov	r0, r7
 80113fc:	f000 f9d4 	bl	80117a8 <_printf_i>
 8011400:	e7eb      	b.n	80113da <_svfiprintf_r+0x1c2>
 8011402:	bf00      	nop
 8011404:	08013ed6 	.word	0x08013ed6
 8011408:	08013ee0 	.word	0x08013ee0
 801140c:	00000000 	.word	0x00000000
 8011410:	08011161 	.word	0x08011161
 8011414:	08013edc 	.word	0x08013edc

08011418 <__sfputc_r>:
 8011418:	6893      	ldr	r3, [r2, #8]
 801141a:	3b01      	subs	r3, #1
 801141c:	2b00      	cmp	r3, #0
 801141e:	b410      	push	{r4}
 8011420:	6093      	str	r3, [r2, #8]
 8011422:	da08      	bge.n	8011436 <__sfputc_r+0x1e>
 8011424:	6994      	ldr	r4, [r2, #24]
 8011426:	42a3      	cmp	r3, r4
 8011428:	db01      	blt.n	801142e <__sfputc_r+0x16>
 801142a:	290a      	cmp	r1, #10
 801142c:	d103      	bne.n	8011436 <__sfputc_r+0x1e>
 801142e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011432:	f000 badf 	b.w	80119f4 <__swbuf_r>
 8011436:	6813      	ldr	r3, [r2, #0]
 8011438:	1c58      	adds	r0, r3, #1
 801143a:	6010      	str	r0, [r2, #0]
 801143c:	7019      	strb	r1, [r3, #0]
 801143e:	4608      	mov	r0, r1
 8011440:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011444:	4770      	bx	lr

08011446 <__sfputs_r>:
 8011446:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011448:	4606      	mov	r6, r0
 801144a:	460f      	mov	r7, r1
 801144c:	4614      	mov	r4, r2
 801144e:	18d5      	adds	r5, r2, r3
 8011450:	42ac      	cmp	r4, r5
 8011452:	d101      	bne.n	8011458 <__sfputs_r+0x12>
 8011454:	2000      	movs	r0, #0
 8011456:	e007      	b.n	8011468 <__sfputs_r+0x22>
 8011458:	f814 1b01 	ldrb.w	r1, [r4], #1
 801145c:	463a      	mov	r2, r7
 801145e:	4630      	mov	r0, r6
 8011460:	f7ff ffda 	bl	8011418 <__sfputc_r>
 8011464:	1c43      	adds	r3, r0, #1
 8011466:	d1f3      	bne.n	8011450 <__sfputs_r+0xa>
 8011468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801146c <_vfiprintf_r>:
 801146c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011470:	460d      	mov	r5, r1
 8011472:	b09d      	sub	sp, #116	; 0x74
 8011474:	4614      	mov	r4, r2
 8011476:	4698      	mov	r8, r3
 8011478:	4606      	mov	r6, r0
 801147a:	b118      	cbz	r0, 8011484 <_vfiprintf_r+0x18>
 801147c:	6983      	ldr	r3, [r0, #24]
 801147e:	b90b      	cbnz	r3, 8011484 <_vfiprintf_r+0x18>
 8011480:	f000 fc9a 	bl	8011db8 <__sinit>
 8011484:	4b89      	ldr	r3, [pc, #548]	; (80116ac <_vfiprintf_r+0x240>)
 8011486:	429d      	cmp	r5, r3
 8011488:	d11b      	bne.n	80114c2 <_vfiprintf_r+0x56>
 801148a:	6875      	ldr	r5, [r6, #4]
 801148c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801148e:	07d9      	lsls	r1, r3, #31
 8011490:	d405      	bmi.n	801149e <_vfiprintf_r+0x32>
 8011492:	89ab      	ldrh	r3, [r5, #12]
 8011494:	059a      	lsls	r2, r3, #22
 8011496:	d402      	bmi.n	801149e <_vfiprintf_r+0x32>
 8011498:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801149a:	f000 fd2b 	bl	8011ef4 <__retarget_lock_acquire_recursive>
 801149e:	89ab      	ldrh	r3, [r5, #12]
 80114a0:	071b      	lsls	r3, r3, #28
 80114a2:	d501      	bpl.n	80114a8 <_vfiprintf_r+0x3c>
 80114a4:	692b      	ldr	r3, [r5, #16]
 80114a6:	b9eb      	cbnz	r3, 80114e4 <_vfiprintf_r+0x78>
 80114a8:	4629      	mov	r1, r5
 80114aa:	4630      	mov	r0, r6
 80114ac:	f000 faf4 	bl	8011a98 <__swsetup_r>
 80114b0:	b1c0      	cbz	r0, 80114e4 <_vfiprintf_r+0x78>
 80114b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80114b4:	07dc      	lsls	r4, r3, #31
 80114b6:	d50e      	bpl.n	80114d6 <_vfiprintf_r+0x6a>
 80114b8:	f04f 30ff 	mov.w	r0, #4294967295
 80114bc:	b01d      	add	sp, #116	; 0x74
 80114be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114c2:	4b7b      	ldr	r3, [pc, #492]	; (80116b0 <_vfiprintf_r+0x244>)
 80114c4:	429d      	cmp	r5, r3
 80114c6:	d101      	bne.n	80114cc <_vfiprintf_r+0x60>
 80114c8:	68b5      	ldr	r5, [r6, #8]
 80114ca:	e7df      	b.n	801148c <_vfiprintf_r+0x20>
 80114cc:	4b79      	ldr	r3, [pc, #484]	; (80116b4 <_vfiprintf_r+0x248>)
 80114ce:	429d      	cmp	r5, r3
 80114d0:	bf08      	it	eq
 80114d2:	68f5      	ldreq	r5, [r6, #12]
 80114d4:	e7da      	b.n	801148c <_vfiprintf_r+0x20>
 80114d6:	89ab      	ldrh	r3, [r5, #12]
 80114d8:	0598      	lsls	r0, r3, #22
 80114da:	d4ed      	bmi.n	80114b8 <_vfiprintf_r+0x4c>
 80114dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80114de:	f000 fd0a 	bl	8011ef6 <__retarget_lock_release_recursive>
 80114e2:	e7e9      	b.n	80114b8 <_vfiprintf_r+0x4c>
 80114e4:	2300      	movs	r3, #0
 80114e6:	9309      	str	r3, [sp, #36]	; 0x24
 80114e8:	2320      	movs	r3, #32
 80114ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80114ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80114f2:	2330      	movs	r3, #48	; 0x30
 80114f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80116b8 <_vfiprintf_r+0x24c>
 80114f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80114fc:	f04f 0901 	mov.w	r9, #1
 8011500:	4623      	mov	r3, r4
 8011502:	469a      	mov	sl, r3
 8011504:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011508:	b10a      	cbz	r2, 801150e <_vfiprintf_r+0xa2>
 801150a:	2a25      	cmp	r2, #37	; 0x25
 801150c:	d1f9      	bne.n	8011502 <_vfiprintf_r+0x96>
 801150e:	ebba 0b04 	subs.w	fp, sl, r4
 8011512:	d00b      	beq.n	801152c <_vfiprintf_r+0xc0>
 8011514:	465b      	mov	r3, fp
 8011516:	4622      	mov	r2, r4
 8011518:	4629      	mov	r1, r5
 801151a:	4630      	mov	r0, r6
 801151c:	f7ff ff93 	bl	8011446 <__sfputs_r>
 8011520:	3001      	adds	r0, #1
 8011522:	f000 80aa 	beq.w	801167a <_vfiprintf_r+0x20e>
 8011526:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011528:	445a      	add	r2, fp
 801152a:	9209      	str	r2, [sp, #36]	; 0x24
 801152c:	f89a 3000 	ldrb.w	r3, [sl]
 8011530:	2b00      	cmp	r3, #0
 8011532:	f000 80a2 	beq.w	801167a <_vfiprintf_r+0x20e>
 8011536:	2300      	movs	r3, #0
 8011538:	f04f 32ff 	mov.w	r2, #4294967295
 801153c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011540:	f10a 0a01 	add.w	sl, sl, #1
 8011544:	9304      	str	r3, [sp, #16]
 8011546:	9307      	str	r3, [sp, #28]
 8011548:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801154c:	931a      	str	r3, [sp, #104]	; 0x68
 801154e:	4654      	mov	r4, sl
 8011550:	2205      	movs	r2, #5
 8011552:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011556:	4858      	ldr	r0, [pc, #352]	; (80116b8 <_vfiprintf_r+0x24c>)
 8011558:	f7ee fe4a 	bl	80001f0 <memchr>
 801155c:	9a04      	ldr	r2, [sp, #16]
 801155e:	b9d8      	cbnz	r0, 8011598 <_vfiprintf_r+0x12c>
 8011560:	06d1      	lsls	r1, r2, #27
 8011562:	bf44      	itt	mi
 8011564:	2320      	movmi	r3, #32
 8011566:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801156a:	0713      	lsls	r3, r2, #28
 801156c:	bf44      	itt	mi
 801156e:	232b      	movmi	r3, #43	; 0x2b
 8011570:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011574:	f89a 3000 	ldrb.w	r3, [sl]
 8011578:	2b2a      	cmp	r3, #42	; 0x2a
 801157a:	d015      	beq.n	80115a8 <_vfiprintf_r+0x13c>
 801157c:	9a07      	ldr	r2, [sp, #28]
 801157e:	4654      	mov	r4, sl
 8011580:	2000      	movs	r0, #0
 8011582:	f04f 0c0a 	mov.w	ip, #10
 8011586:	4621      	mov	r1, r4
 8011588:	f811 3b01 	ldrb.w	r3, [r1], #1
 801158c:	3b30      	subs	r3, #48	; 0x30
 801158e:	2b09      	cmp	r3, #9
 8011590:	d94e      	bls.n	8011630 <_vfiprintf_r+0x1c4>
 8011592:	b1b0      	cbz	r0, 80115c2 <_vfiprintf_r+0x156>
 8011594:	9207      	str	r2, [sp, #28]
 8011596:	e014      	b.n	80115c2 <_vfiprintf_r+0x156>
 8011598:	eba0 0308 	sub.w	r3, r0, r8
 801159c:	fa09 f303 	lsl.w	r3, r9, r3
 80115a0:	4313      	orrs	r3, r2
 80115a2:	9304      	str	r3, [sp, #16]
 80115a4:	46a2      	mov	sl, r4
 80115a6:	e7d2      	b.n	801154e <_vfiprintf_r+0xe2>
 80115a8:	9b03      	ldr	r3, [sp, #12]
 80115aa:	1d19      	adds	r1, r3, #4
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	9103      	str	r1, [sp, #12]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	bfbb      	ittet	lt
 80115b4:	425b      	neglt	r3, r3
 80115b6:	f042 0202 	orrlt.w	r2, r2, #2
 80115ba:	9307      	strge	r3, [sp, #28]
 80115bc:	9307      	strlt	r3, [sp, #28]
 80115be:	bfb8      	it	lt
 80115c0:	9204      	strlt	r2, [sp, #16]
 80115c2:	7823      	ldrb	r3, [r4, #0]
 80115c4:	2b2e      	cmp	r3, #46	; 0x2e
 80115c6:	d10c      	bne.n	80115e2 <_vfiprintf_r+0x176>
 80115c8:	7863      	ldrb	r3, [r4, #1]
 80115ca:	2b2a      	cmp	r3, #42	; 0x2a
 80115cc:	d135      	bne.n	801163a <_vfiprintf_r+0x1ce>
 80115ce:	9b03      	ldr	r3, [sp, #12]
 80115d0:	1d1a      	adds	r2, r3, #4
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	9203      	str	r2, [sp, #12]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	bfb8      	it	lt
 80115da:	f04f 33ff 	movlt.w	r3, #4294967295
 80115de:	3402      	adds	r4, #2
 80115e0:	9305      	str	r3, [sp, #20]
 80115e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80116c8 <_vfiprintf_r+0x25c>
 80115e6:	7821      	ldrb	r1, [r4, #0]
 80115e8:	2203      	movs	r2, #3
 80115ea:	4650      	mov	r0, sl
 80115ec:	f7ee fe00 	bl	80001f0 <memchr>
 80115f0:	b140      	cbz	r0, 8011604 <_vfiprintf_r+0x198>
 80115f2:	2340      	movs	r3, #64	; 0x40
 80115f4:	eba0 000a 	sub.w	r0, r0, sl
 80115f8:	fa03 f000 	lsl.w	r0, r3, r0
 80115fc:	9b04      	ldr	r3, [sp, #16]
 80115fe:	4303      	orrs	r3, r0
 8011600:	3401      	adds	r4, #1
 8011602:	9304      	str	r3, [sp, #16]
 8011604:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011608:	482c      	ldr	r0, [pc, #176]	; (80116bc <_vfiprintf_r+0x250>)
 801160a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801160e:	2206      	movs	r2, #6
 8011610:	f7ee fdee 	bl	80001f0 <memchr>
 8011614:	2800      	cmp	r0, #0
 8011616:	d03f      	beq.n	8011698 <_vfiprintf_r+0x22c>
 8011618:	4b29      	ldr	r3, [pc, #164]	; (80116c0 <_vfiprintf_r+0x254>)
 801161a:	bb1b      	cbnz	r3, 8011664 <_vfiprintf_r+0x1f8>
 801161c:	9b03      	ldr	r3, [sp, #12]
 801161e:	3307      	adds	r3, #7
 8011620:	f023 0307 	bic.w	r3, r3, #7
 8011624:	3308      	adds	r3, #8
 8011626:	9303      	str	r3, [sp, #12]
 8011628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801162a:	443b      	add	r3, r7
 801162c:	9309      	str	r3, [sp, #36]	; 0x24
 801162e:	e767      	b.n	8011500 <_vfiprintf_r+0x94>
 8011630:	fb0c 3202 	mla	r2, ip, r2, r3
 8011634:	460c      	mov	r4, r1
 8011636:	2001      	movs	r0, #1
 8011638:	e7a5      	b.n	8011586 <_vfiprintf_r+0x11a>
 801163a:	2300      	movs	r3, #0
 801163c:	3401      	adds	r4, #1
 801163e:	9305      	str	r3, [sp, #20]
 8011640:	4619      	mov	r1, r3
 8011642:	f04f 0c0a 	mov.w	ip, #10
 8011646:	4620      	mov	r0, r4
 8011648:	f810 2b01 	ldrb.w	r2, [r0], #1
 801164c:	3a30      	subs	r2, #48	; 0x30
 801164e:	2a09      	cmp	r2, #9
 8011650:	d903      	bls.n	801165a <_vfiprintf_r+0x1ee>
 8011652:	2b00      	cmp	r3, #0
 8011654:	d0c5      	beq.n	80115e2 <_vfiprintf_r+0x176>
 8011656:	9105      	str	r1, [sp, #20]
 8011658:	e7c3      	b.n	80115e2 <_vfiprintf_r+0x176>
 801165a:	fb0c 2101 	mla	r1, ip, r1, r2
 801165e:	4604      	mov	r4, r0
 8011660:	2301      	movs	r3, #1
 8011662:	e7f0      	b.n	8011646 <_vfiprintf_r+0x1da>
 8011664:	ab03      	add	r3, sp, #12
 8011666:	9300      	str	r3, [sp, #0]
 8011668:	462a      	mov	r2, r5
 801166a:	4b16      	ldr	r3, [pc, #88]	; (80116c4 <_vfiprintf_r+0x258>)
 801166c:	a904      	add	r1, sp, #16
 801166e:	4630      	mov	r0, r6
 8011670:	f3af 8000 	nop.w
 8011674:	4607      	mov	r7, r0
 8011676:	1c78      	adds	r0, r7, #1
 8011678:	d1d6      	bne.n	8011628 <_vfiprintf_r+0x1bc>
 801167a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801167c:	07d9      	lsls	r1, r3, #31
 801167e:	d405      	bmi.n	801168c <_vfiprintf_r+0x220>
 8011680:	89ab      	ldrh	r3, [r5, #12]
 8011682:	059a      	lsls	r2, r3, #22
 8011684:	d402      	bmi.n	801168c <_vfiprintf_r+0x220>
 8011686:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011688:	f000 fc35 	bl	8011ef6 <__retarget_lock_release_recursive>
 801168c:	89ab      	ldrh	r3, [r5, #12]
 801168e:	065b      	lsls	r3, r3, #25
 8011690:	f53f af12 	bmi.w	80114b8 <_vfiprintf_r+0x4c>
 8011694:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011696:	e711      	b.n	80114bc <_vfiprintf_r+0x50>
 8011698:	ab03      	add	r3, sp, #12
 801169a:	9300      	str	r3, [sp, #0]
 801169c:	462a      	mov	r2, r5
 801169e:	4b09      	ldr	r3, [pc, #36]	; (80116c4 <_vfiprintf_r+0x258>)
 80116a0:	a904      	add	r1, sp, #16
 80116a2:	4630      	mov	r0, r6
 80116a4:	f000 f880 	bl	80117a8 <_printf_i>
 80116a8:	e7e4      	b.n	8011674 <_vfiprintf_r+0x208>
 80116aa:	bf00      	nop
 80116ac:	08013f2c 	.word	0x08013f2c
 80116b0:	08013f4c 	.word	0x08013f4c
 80116b4:	08013f0c 	.word	0x08013f0c
 80116b8:	08013ed6 	.word	0x08013ed6
 80116bc:	08013ee0 	.word	0x08013ee0
 80116c0:	00000000 	.word	0x00000000
 80116c4:	08011447 	.word	0x08011447
 80116c8:	08013edc 	.word	0x08013edc

080116cc <_printf_common>:
 80116cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116d0:	4616      	mov	r6, r2
 80116d2:	4699      	mov	r9, r3
 80116d4:	688a      	ldr	r2, [r1, #8]
 80116d6:	690b      	ldr	r3, [r1, #16]
 80116d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80116dc:	4293      	cmp	r3, r2
 80116de:	bfb8      	it	lt
 80116e0:	4613      	movlt	r3, r2
 80116e2:	6033      	str	r3, [r6, #0]
 80116e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80116e8:	4607      	mov	r7, r0
 80116ea:	460c      	mov	r4, r1
 80116ec:	b10a      	cbz	r2, 80116f2 <_printf_common+0x26>
 80116ee:	3301      	adds	r3, #1
 80116f0:	6033      	str	r3, [r6, #0]
 80116f2:	6823      	ldr	r3, [r4, #0]
 80116f4:	0699      	lsls	r1, r3, #26
 80116f6:	bf42      	ittt	mi
 80116f8:	6833      	ldrmi	r3, [r6, #0]
 80116fa:	3302      	addmi	r3, #2
 80116fc:	6033      	strmi	r3, [r6, #0]
 80116fe:	6825      	ldr	r5, [r4, #0]
 8011700:	f015 0506 	ands.w	r5, r5, #6
 8011704:	d106      	bne.n	8011714 <_printf_common+0x48>
 8011706:	f104 0a19 	add.w	sl, r4, #25
 801170a:	68e3      	ldr	r3, [r4, #12]
 801170c:	6832      	ldr	r2, [r6, #0]
 801170e:	1a9b      	subs	r3, r3, r2
 8011710:	42ab      	cmp	r3, r5
 8011712:	dc26      	bgt.n	8011762 <_printf_common+0x96>
 8011714:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011718:	1e13      	subs	r3, r2, #0
 801171a:	6822      	ldr	r2, [r4, #0]
 801171c:	bf18      	it	ne
 801171e:	2301      	movne	r3, #1
 8011720:	0692      	lsls	r2, r2, #26
 8011722:	d42b      	bmi.n	801177c <_printf_common+0xb0>
 8011724:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011728:	4649      	mov	r1, r9
 801172a:	4638      	mov	r0, r7
 801172c:	47c0      	blx	r8
 801172e:	3001      	adds	r0, #1
 8011730:	d01e      	beq.n	8011770 <_printf_common+0xa4>
 8011732:	6823      	ldr	r3, [r4, #0]
 8011734:	68e5      	ldr	r5, [r4, #12]
 8011736:	6832      	ldr	r2, [r6, #0]
 8011738:	f003 0306 	and.w	r3, r3, #6
 801173c:	2b04      	cmp	r3, #4
 801173e:	bf08      	it	eq
 8011740:	1aad      	subeq	r5, r5, r2
 8011742:	68a3      	ldr	r3, [r4, #8]
 8011744:	6922      	ldr	r2, [r4, #16]
 8011746:	bf0c      	ite	eq
 8011748:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801174c:	2500      	movne	r5, #0
 801174e:	4293      	cmp	r3, r2
 8011750:	bfc4      	itt	gt
 8011752:	1a9b      	subgt	r3, r3, r2
 8011754:	18ed      	addgt	r5, r5, r3
 8011756:	2600      	movs	r6, #0
 8011758:	341a      	adds	r4, #26
 801175a:	42b5      	cmp	r5, r6
 801175c:	d11a      	bne.n	8011794 <_printf_common+0xc8>
 801175e:	2000      	movs	r0, #0
 8011760:	e008      	b.n	8011774 <_printf_common+0xa8>
 8011762:	2301      	movs	r3, #1
 8011764:	4652      	mov	r2, sl
 8011766:	4649      	mov	r1, r9
 8011768:	4638      	mov	r0, r7
 801176a:	47c0      	blx	r8
 801176c:	3001      	adds	r0, #1
 801176e:	d103      	bne.n	8011778 <_printf_common+0xac>
 8011770:	f04f 30ff 	mov.w	r0, #4294967295
 8011774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011778:	3501      	adds	r5, #1
 801177a:	e7c6      	b.n	801170a <_printf_common+0x3e>
 801177c:	18e1      	adds	r1, r4, r3
 801177e:	1c5a      	adds	r2, r3, #1
 8011780:	2030      	movs	r0, #48	; 0x30
 8011782:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011786:	4422      	add	r2, r4
 8011788:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801178c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011790:	3302      	adds	r3, #2
 8011792:	e7c7      	b.n	8011724 <_printf_common+0x58>
 8011794:	2301      	movs	r3, #1
 8011796:	4622      	mov	r2, r4
 8011798:	4649      	mov	r1, r9
 801179a:	4638      	mov	r0, r7
 801179c:	47c0      	blx	r8
 801179e:	3001      	adds	r0, #1
 80117a0:	d0e6      	beq.n	8011770 <_printf_common+0xa4>
 80117a2:	3601      	adds	r6, #1
 80117a4:	e7d9      	b.n	801175a <_printf_common+0x8e>
	...

080117a8 <_printf_i>:
 80117a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80117ac:	7e0f      	ldrb	r7, [r1, #24]
 80117ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80117b0:	2f78      	cmp	r7, #120	; 0x78
 80117b2:	4691      	mov	r9, r2
 80117b4:	4680      	mov	r8, r0
 80117b6:	460c      	mov	r4, r1
 80117b8:	469a      	mov	sl, r3
 80117ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80117be:	d807      	bhi.n	80117d0 <_printf_i+0x28>
 80117c0:	2f62      	cmp	r7, #98	; 0x62
 80117c2:	d80a      	bhi.n	80117da <_printf_i+0x32>
 80117c4:	2f00      	cmp	r7, #0
 80117c6:	f000 80d8 	beq.w	801197a <_printf_i+0x1d2>
 80117ca:	2f58      	cmp	r7, #88	; 0x58
 80117cc:	f000 80a3 	beq.w	8011916 <_printf_i+0x16e>
 80117d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80117d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80117d8:	e03a      	b.n	8011850 <_printf_i+0xa8>
 80117da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80117de:	2b15      	cmp	r3, #21
 80117e0:	d8f6      	bhi.n	80117d0 <_printf_i+0x28>
 80117e2:	a101      	add	r1, pc, #4	; (adr r1, 80117e8 <_printf_i+0x40>)
 80117e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80117e8:	08011841 	.word	0x08011841
 80117ec:	08011855 	.word	0x08011855
 80117f0:	080117d1 	.word	0x080117d1
 80117f4:	080117d1 	.word	0x080117d1
 80117f8:	080117d1 	.word	0x080117d1
 80117fc:	080117d1 	.word	0x080117d1
 8011800:	08011855 	.word	0x08011855
 8011804:	080117d1 	.word	0x080117d1
 8011808:	080117d1 	.word	0x080117d1
 801180c:	080117d1 	.word	0x080117d1
 8011810:	080117d1 	.word	0x080117d1
 8011814:	08011961 	.word	0x08011961
 8011818:	08011885 	.word	0x08011885
 801181c:	08011943 	.word	0x08011943
 8011820:	080117d1 	.word	0x080117d1
 8011824:	080117d1 	.word	0x080117d1
 8011828:	08011983 	.word	0x08011983
 801182c:	080117d1 	.word	0x080117d1
 8011830:	08011885 	.word	0x08011885
 8011834:	080117d1 	.word	0x080117d1
 8011838:	080117d1 	.word	0x080117d1
 801183c:	0801194b 	.word	0x0801194b
 8011840:	682b      	ldr	r3, [r5, #0]
 8011842:	1d1a      	adds	r2, r3, #4
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	602a      	str	r2, [r5, #0]
 8011848:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801184c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011850:	2301      	movs	r3, #1
 8011852:	e0a3      	b.n	801199c <_printf_i+0x1f4>
 8011854:	6820      	ldr	r0, [r4, #0]
 8011856:	6829      	ldr	r1, [r5, #0]
 8011858:	0606      	lsls	r6, r0, #24
 801185a:	f101 0304 	add.w	r3, r1, #4
 801185e:	d50a      	bpl.n	8011876 <_printf_i+0xce>
 8011860:	680e      	ldr	r6, [r1, #0]
 8011862:	602b      	str	r3, [r5, #0]
 8011864:	2e00      	cmp	r6, #0
 8011866:	da03      	bge.n	8011870 <_printf_i+0xc8>
 8011868:	232d      	movs	r3, #45	; 0x2d
 801186a:	4276      	negs	r6, r6
 801186c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011870:	485e      	ldr	r0, [pc, #376]	; (80119ec <_printf_i+0x244>)
 8011872:	230a      	movs	r3, #10
 8011874:	e019      	b.n	80118aa <_printf_i+0x102>
 8011876:	680e      	ldr	r6, [r1, #0]
 8011878:	602b      	str	r3, [r5, #0]
 801187a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801187e:	bf18      	it	ne
 8011880:	b236      	sxthne	r6, r6
 8011882:	e7ef      	b.n	8011864 <_printf_i+0xbc>
 8011884:	682b      	ldr	r3, [r5, #0]
 8011886:	6820      	ldr	r0, [r4, #0]
 8011888:	1d19      	adds	r1, r3, #4
 801188a:	6029      	str	r1, [r5, #0]
 801188c:	0601      	lsls	r1, r0, #24
 801188e:	d501      	bpl.n	8011894 <_printf_i+0xec>
 8011890:	681e      	ldr	r6, [r3, #0]
 8011892:	e002      	b.n	801189a <_printf_i+0xf2>
 8011894:	0646      	lsls	r6, r0, #25
 8011896:	d5fb      	bpl.n	8011890 <_printf_i+0xe8>
 8011898:	881e      	ldrh	r6, [r3, #0]
 801189a:	4854      	ldr	r0, [pc, #336]	; (80119ec <_printf_i+0x244>)
 801189c:	2f6f      	cmp	r7, #111	; 0x6f
 801189e:	bf0c      	ite	eq
 80118a0:	2308      	moveq	r3, #8
 80118a2:	230a      	movne	r3, #10
 80118a4:	2100      	movs	r1, #0
 80118a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80118aa:	6865      	ldr	r5, [r4, #4]
 80118ac:	60a5      	str	r5, [r4, #8]
 80118ae:	2d00      	cmp	r5, #0
 80118b0:	bfa2      	ittt	ge
 80118b2:	6821      	ldrge	r1, [r4, #0]
 80118b4:	f021 0104 	bicge.w	r1, r1, #4
 80118b8:	6021      	strge	r1, [r4, #0]
 80118ba:	b90e      	cbnz	r6, 80118c0 <_printf_i+0x118>
 80118bc:	2d00      	cmp	r5, #0
 80118be:	d04d      	beq.n	801195c <_printf_i+0x1b4>
 80118c0:	4615      	mov	r5, r2
 80118c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80118c6:	fb03 6711 	mls	r7, r3, r1, r6
 80118ca:	5dc7      	ldrb	r7, [r0, r7]
 80118cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80118d0:	4637      	mov	r7, r6
 80118d2:	42bb      	cmp	r3, r7
 80118d4:	460e      	mov	r6, r1
 80118d6:	d9f4      	bls.n	80118c2 <_printf_i+0x11a>
 80118d8:	2b08      	cmp	r3, #8
 80118da:	d10b      	bne.n	80118f4 <_printf_i+0x14c>
 80118dc:	6823      	ldr	r3, [r4, #0]
 80118de:	07de      	lsls	r6, r3, #31
 80118e0:	d508      	bpl.n	80118f4 <_printf_i+0x14c>
 80118e2:	6923      	ldr	r3, [r4, #16]
 80118e4:	6861      	ldr	r1, [r4, #4]
 80118e6:	4299      	cmp	r1, r3
 80118e8:	bfde      	ittt	le
 80118ea:	2330      	movle	r3, #48	; 0x30
 80118ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80118f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80118f4:	1b52      	subs	r2, r2, r5
 80118f6:	6122      	str	r2, [r4, #16]
 80118f8:	f8cd a000 	str.w	sl, [sp]
 80118fc:	464b      	mov	r3, r9
 80118fe:	aa03      	add	r2, sp, #12
 8011900:	4621      	mov	r1, r4
 8011902:	4640      	mov	r0, r8
 8011904:	f7ff fee2 	bl	80116cc <_printf_common>
 8011908:	3001      	adds	r0, #1
 801190a:	d14c      	bne.n	80119a6 <_printf_i+0x1fe>
 801190c:	f04f 30ff 	mov.w	r0, #4294967295
 8011910:	b004      	add	sp, #16
 8011912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011916:	4835      	ldr	r0, [pc, #212]	; (80119ec <_printf_i+0x244>)
 8011918:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801191c:	6829      	ldr	r1, [r5, #0]
 801191e:	6823      	ldr	r3, [r4, #0]
 8011920:	f851 6b04 	ldr.w	r6, [r1], #4
 8011924:	6029      	str	r1, [r5, #0]
 8011926:	061d      	lsls	r5, r3, #24
 8011928:	d514      	bpl.n	8011954 <_printf_i+0x1ac>
 801192a:	07df      	lsls	r7, r3, #31
 801192c:	bf44      	itt	mi
 801192e:	f043 0320 	orrmi.w	r3, r3, #32
 8011932:	6023      	strmi	r3, [r4, #0]
 8011934:	b91e      	cbnz	r6, 801193e <_printf_i+0x196>
 8011936:	6823      	ldr	r3, [r4, #0]
 8011938:	f023 0320 	bic.w	r3, r3, #32
 801193c:	6023      	str	r3, [r4, #0]
 801193e:	2310      	movs	r3, #16
 8011940:	e7b0      	b.n	80118a4 <_printf_i+0xfc>
 8011942:	6823      	ldr	r3, [r4, #0]
 8011944:	f043 0320 	orr.w	r3, r3, #32
 8011948:	6023      	str	r3, [r4, #0]
 801194a:	2378      	movs	r3, #120	; 0x78
 801194c:	4828      	ldr	r0, [pc, #160]	; (80119f0 <_printf_i+0x248>)
 801194e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011952:	e7e3      	b.n	801191c <_printf_i+0x174>
 8011954:	0659      	lsls	r1, r3, #25
 8011956:	bf48      	it	mi
 8011958:	b2b6      	uxthmi	r6, r6
 801195a:	e7e6      	b.n	801192a <_printf_i+0x182>
 801195c:	4615      	mov	r5, r2
 801195e:	e7bb      	b.n	80118d8 <_printf_i+0x130>
 8011960:	682b      	ldr	r3, [r5, #0]
 8011962:	6826      	ldr	r6, [r4, #0]
 8011964:	6961      	ldr	r1, [r4, #20]
 8011966:	1d18      	adds	r0, r3, #4
 8011968:	6028      	str	r0, [r5, #0]
 801196a:	0635      	lsls	r5, r6, #24
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	d501      	bpl.n	8011974 <_printf_i+0x1cc>
 8011970:	6019      	str	r1, [r3, #0]
 8011972:	e002      	b.n	801197a <_printf_i+0x1d2>
 8011974:	0670      	lsls	r0, r6, #25
 8011976:	d5fb      	bpl.n	8011970 <_printf_i+0x1c8>
 8011978:	8019      	strh	r1, [r3, #0]
 801197a:	2300      	movs	r3, #0
 801197c:	6123      	str	r3, [r4, #16]
 801197e:	4615      	mov	r5, r2
 8011980:	e7ba      	b.n	80118f8 <_printf_i+0x150>
 8011982:	682b      	ldr	r3, [r5, #0]
 8011984:	1d1a      	adds	r2, r3, #4
 8011986:	602a      	str	r2, [r5, #0]
 8011988:	681d      	ldr	r5, [r3, #0]
 801198a:	6862      	ldr	r2, [r4, #4]
 801198c:	2100      	movs	r1, #0
 801198e:	4628      	mov	r0, r5
 8011990:	f7ee fc2e 	bl	80001f0 <memchr>
 8011994:	b108      	cbz	r0, 801199a <_printf_i+0x1f2>
 8011996:	1b40      	subs	r0, r0, r5
 8011998:	6060      	str	r0, [r4, #4]
 801199a:	6863      	ldr	r3, [r4, #4]
 801199c:	6123      	str	r3, [r4, #16]
 801199e:	2300      	movs	r3, #0
 80119a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80119a4:	e7a8      	b.n	80118f8 <_printf_i+0x150>
 80119a6:	6923      	ldr	r3, [r4, #16]
 80119a8:	462a      	mov	r2, r5
 80119aa:	4649      	mov	r1, r9
 80119ac:	4640      	mov	r0, r8
 80119ae:	47d0      	blx	sl
 80119b0:	3001      	adds	r0, #1
 80119b2:	d0ab      	beq.n	801190c <_printf_i+0x164>
 80119b4:	6823      	ldr	r3, [r4, #0]
 80119b6:	079b      	lsls	r3, r3, #30
 80119b8:	d413      	bmi.n	80119e2 <_printf_i+0x23a>
 80119ba:	68e0      	ldr	r0, [r4, #12]
 80119bc:	9b03      	ldr	r3, [sp, #12]
 80119be:	4298      	cmp	r0, r3
 80119c0:	bfb8      	it	lt
 80119c2:	4618      	movlt	r0, r3
 80119c4:	e7a4      	b.n	8011910 <_printf_i+0x168>
 80119c6:	2301      	movs	r3, #1
 80119c8:	4632      	mov	r2, r6
 80119ca:	4649      	mov	r1, r9
 80119cc:	4640      	mov	r0, r8
 80119ce:	47d0      	blx	sl
 80119d0:	3001      	adds	r0, #1
 80119d2:	d09b      	beq.n	801190c <_printf_i+0x164>
 80119d4:	3501      	adds	r5, #1
 80119d6:	68e3      	ldr	r3, [r4, #12]
 80119d8:	9903      	ldr	r1, [sp, #12]
 80119da:	1a5b      	subs	r3, r3, r1
 80119dc:	42ab      	cmp	r3, r5
 80119de:	dcf2      	bgt.n	80119c6 <_printf_i+0x21e>
 80119e0:	e7eb      	b.n	80119ba <_printf_i+0x212>
 80119e2:	2500      	movs	r5, #0
 80119e4:	f104 0619 	add.w	r6, r4, #25
 80119e8:	e7f5      	b.n	80119d6 <_printf_i+0x22e>
 80119ea:	bf00      	nop
 80119ec:	08013ee7 	.word	0x08013ee7
 80119f0:	08013ef8 	.word	0x08013ef8

080119f4 <__swbuf_r>:
 80119f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119f6:	460e      	mov	r6, r1
 80119f8:	4614      	mov	r4, r2
 80119fa:	4605      	mov	r5, r0
 80119fc:	b118      	cbz	r0, 8011a06 <__swbuf_r+0x12>
 80119fe:	6983      	ldr	r3, [r0, #24]
 8011a00:	b90b      	cbnz	r3, 8011a06 <__swbuf_r+0x12>
 8011a02:	f000 f9d9 	bl	8011db8 <__sinit>
 8011a06:	4b21      	ldr	r3, [pc, #132]	; (8011a8c <__swbuf_r+0x98>)
 8011a08:	429c      	cmp	r4, r3
 8011a0a:	d12b      	bne.n	8011a64 <__swbuf_r+0x70>
 8011a0c:	686c      	ldr	r4, [r5, #4]
 8011a0e:	69a3      	ldr	r3, [r4, #24]
 8011a10:	60a3      	str	r3, [r4, #8]
 8011a12:	89a3      	ldrh	r3, [r4, #12]
 8011a14:	071a      	lsls	r2, r3, #28
 8011a16:	d52f      	bpl.n	8011a78 <__swbuf_r+0x84>
 8011a18:	6923      	ldr	r3, [r4, #16]
 8011a1a:	b36b      	cbz	r3, 8011a78 <__swbuf_r+0x84>
 8011a1c:	6923      	ldr	r3, [r4, #16]
 8011a1e:	6820      	ldr	r0, [r4, #0]
 8011a20:	1ac0      	subs	r0, r0, r3
 8011a22:	6963      	ldr	r3, [r4, #20]
 8011a24:	b2f6      	uxtb	r6, r6
 8011a26:	4283      	cmp	r3, r0
 8011a28:	4637      	mov	r7, r6
 8011a2a:	dc04      	bgt.n	8011a36 <__swbuf_r+0x42>
 8011a2c:	4621      	mov	r1, r4
 8011a2e:	4628      	mov	r0, r5
 8011a30:	f000 f92e 	bl	8011c90 <_fflush_r>
 8011a34:	bb30      	cbnz	r0, 8011a84 <__swbuf_r+0x90>
 8011a36:	68a3      	ldr	r3, [r4, #8]
 8011a38:	3b01      	subs	r3, #1
 8011a3a:	60a3      	str	r3, [r4, #8]
 8011a3c:	6823      	ldr	r3, [r4, #0]
 8011a3e:	1c5a      	adds	r2, r3, #1
 8011a40:	6022      	str	r2, [r4, #0]
 8011a42:	701e      	strb	r6, [r3, #0]
 8011a44:	6963      	ldr	r3, [r4, #20]
 8011a46:	3001      	adds	r0, #1
 8011a48:	4283      	cmp	r3, r0
 8011a4a:	d004      	beq.n	8011a56 <__swbuf_r+0x62>
 8011a4c:	89a3      	ldrh	r3, [r4, #12]
 8011a4e:	07db      	lsls	r3, r3, #31
 8011a50:	d506      	bpl.n	8011a60 <__swbuf_r+0x6c>
 8011a52:	2e0a      	cmp	r6, #10
 8011a54:	d104      	bne.n	8011a60 <__swbuf_r+0x6c>
 8011a56:	4621      	mov	r1, r4
 8011a58:	4628      	mov	r0, r5
 8011a5a:	f000 f919 	bl	8011c90 <_fflush_r>
 8011a5e:	b988      	cbnz	r0, 8011a84 <__swbuf_r+0x90>
 8011a60:	4638      	mov	r0, r7
 8011a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a64:	4b0a      	ldr	r3, [pc, #40]	; (8011a90 <__swbuf_r+0x9c>)
 8011a66:	429c      	cmp	r4, r3
 8011a68:	d101      	bne.n	8011a6e <__swbuf_r+0x7a>
 8011a6a:	68ac      	ldr	r4, [r5, #8]
 8011a6c:	e7cf      	b.n	8011a0e <__swbuf_r+0x1a>
 8011a6e:	4b09      	ldr	r3, [pc, #36]	; (8011a94 <__swbuf_r+0xa0>)
 8011a70:	429c      	cmp	r4, r3
 8011a72:	bf08      	it	eq
 8011a74:	68ec      	ldreq	r4, [r5, #12]
 8011a76:	e7ca      	b.n	8011a0e <__swbuf_r+0x1a>
 8011a78:	4621      	mov	r1, r4
 8011a7a:	4628      	mov	r0, r5
 8011a7c:	f000 f80c 	bl	8011a98 <__swsetup_r>
 8011a80:	2800      	cmp	r0, #0
 8011a82:	d0cb      	beq.n	8011a1c <__swbuf_r+0x28>
 8011a84:	f04f 37ff 	mov.w	r7, #4294967295
 8011a88:	e7ea      	b.n	8011a60 <__swbuf_r+0x6c>
 8011a8a:	bf00      	nop
 8011a8c:	08013f2c 	.word	0x08013f2c
 8011a90:	08013f4c 	.word	0x08013f4c
 8011a94:	08013f0c 	.word	0x08013f0c

08011a98 <__swsetup_r>:
 8011a98:	4b32      	ldr	r3, [pc, #200]	; (8011b64 <__swsetup_r+0xcc>)
 8011a9a:	b570      	push	{r4, r5, r6, lr}
 8011a9c:	681d      	ldr	r5, [r3, #0]
 8011a9e:	4606      	mov	r6, r0
 8011aa0:	460c      	mov	r4, r1
 8011aa2:	b125      	cbz	r5, 8011aae <__swsetup_r+0x16>
 8011aa4:	69ab      	ldr	r3, [r5, #24]
 8011aa6:	b913      	cbnz	r3, 8011aae <__swsetup_r+0x16>
 8011aa8:	4628      	mov	r0, r5
 8011aaa:	f000 f985 	bl	8011db8 <__sinit>
 8011aae:	4b2e      	ldr	r3, [pc, #184]	; (8011b68 <__swsetup_r+0xd0>)
 8011ab0:	429c      	cmp	r4, r3
 8011ab2:	d10f      	bne.n	8011ad4 <__swsetup_r+0x3c>
 8011ab4:	686c      	ldr	r4, [r5, #4]
 8011ab6:	89a3      	ldrh	r3, [r4, #12]
 8011ab8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011abc:	0719      	lsls	r1, r3, #28
 8011abe:	d42c      	bmi.n	8011b1a <__swsetup_r+0x82>
 8011ac0:	06dd      	lsls	r5, r3, #27
 8011ac2:	d411      	bmi.n	8011ae8 <__swsetup_r+0x50>
 8011ac4:	2309      	movs	r3, #9
 8011ac6:	6033      	str	r3, [r6, #0]
 8011ac8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011acc:	81a3      	strh	r3, [r4, #12]
 8011ace:	f04f 30ff 	mov.w	r0, #4294967295
 8011ad2:	e03e      	b.n	8011b52 <__swsetup_r+0xba>
 8011ad4:	4b25      	ldr	r3, [pc, #148]	; (8011b6c <__swsetup_r+0xd4>)
 8011ad6:	429c      	cmp	r4, r3
 8011ad8:	d101      	bne.n	8011ade <__swsetup_r+0x46>
 8011ada:	68ac      	ldr	r4, [r5, #8]
 8011adc:	e7eb      	b.n	8011ab6 <__swsetup_r+0x1e>
 8011ade:	4b24      	ldr	r3, [pc, #144]	; (8011b70 <__swsetup_r+0xd8>)
 8011ae0:	429c      	cmp	r4, r3
 8011ae2:	bf08      	it	eq
 8011ae4:	68ec      	ldreq	r4, [r5, #12]
 8011ae6:	e7e6      	b.n	8011ab6 <__swsetup_r+0x1e>
 8011ae8:	0758      	lsls	r0, r3, #29
 8011aea:	d512      	bpl.n	8011b12 <__swsetup_r+0x7a>
 8011aec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011aee:	b141      	cbz	r1, 8011b02 <__swsetup_r+0x6a>
 8011af0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011af4:	4299      	cmp	r1, r3
 8011af6:	d002      	beq.n	8011afe <__swsetup_r+0x66>
 8011af8:	4630      	mov	r0, r6
 8011afa:	f7ff f9a3 	bl	8010e44 <_free_r>
 8011afe:	2300      	movs	r3, #0
 8011b00:	6363      	str	r3, [r4, #52]	; 0x34
 8011b02:	89a3      	ldrh	r3, [r4, #12]
 8011b04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011b08:	81a3      	strh	r3, [r4, #12]
 8011b0a:	2300      	movs	r3, #0
 8011b0c:	6063      	str	r3, [r4, #4]
 8011b0e:	6923      	ldr	r3, [r4, #16]
 8011b10:	6023      	str	r3, [r4, #0]
 8011b12:	89a3      	ldrh	r3, [r4, #12]
 8011b14:	f043 0308 	orr.w	r3, r3, #8
 8011b18:	81a3      	strh	r3, [r4, #12]
 8011b1a:	6923      	ldr	r3, [r4, #16]
 8011b1c:	b94b      	cbnz	r3, 8011b32 <__swsetup_r+0x9a>
 8011b1e:	89a3      	ldrh	r3, [r4, #12]
 8011b20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011b24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b28:	d003      	beq.n	8011b32 <__swsetup_r+0x9a>
 8011b2a:	4621      	mov	r1, r4
 8011b2c:	4630      	mov	r0, r6
 8011b2e:	f000 fa09 	bl	8011f44 <__smakebuf_r>
 8011b32:	89a0      	ldrh	r0, [r4, #12]
 8011b34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011b38:	f010 0301 	ands.w	r3, r0, #1
 8011b3c:	d00a      	beq.n	8011b54 <__swsetup_r+0xbc>
 8011b3e:	2300      	movs	r3, #0
 8011b40:	60a3      	str	r3, [r4, #8]
 8011b42:	6963      	ldr	r3, [r4, #20]
 8011b44:	425b      	negs	r3, r3
 8011b46:	61a3      	str	r3, [r4, #24]
 8011b48:	6923      	ldr	r3, [r4, #16]
 8011b4a:	b943      	cbnz	r3, 8011b5e <__swsetup_r+0xc6>
 8011b4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011b50:	d1ba      	bne.n	8011ac8 <__swsetup_r+0x30>
 8011b52:	bd70      	pop	{r4, r5, r6, pc}
 8011b54:	0781      	lsls	r1, r0, #30
 8011b56:	bf58      	it	pl
 8011b58:	6963      	ldrpl	r3, [r4, #20]
 8011b5a:	60a3      	str	r3, [r4, #8]
 8011b5c:	e7f4      	b.n	8011b48 <__swsetup_r+0xb0>
 8011b5e:	2000      	movs	r0, #0
 8011b60:	e7f7      	b.n	8011b52 <__swsetup_r+0xba>
 8011b62:	bf00      	nop
 8011b64:	20000078 	.word	0x20000078
 8011b68:	08013f2c 	.word	0x08013f2c
 8011b6c:	08013f4c 	.word	0x08013f4c
 8011b70:	08013f0c 	.word	0x08013f0c

08011b74 <abort>:
 8011b74:	b508      	push	{r3, lr}
 8011b76:	2006      	movs	r0, #6
 8011b78:	f000 fa96 	bl	80120a8 <raise>
 8011b7c:	2001      	movs	r0, #1
 8011b7e:	f7ef ff3f 	bl	8001a00 <_exit>
	...

08011b84 <__sflush_r>:
 8011b84:	898a      	ldrh	r2, [r1, #12]
 8011b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b8a:	4605      	mov	r5, r0
 8011b8c:	0710      	lsls	r0, r2, #28
 8011b8e:	460c      	mov	r4, r1
 8011b90:	d458      	bmi.n	8011c44 <__sflush_r+0xc0>
 8011b92:	684b      	ldr	r3, [r1, #4]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	dc05      	bgt.n	8011ba4 <__sflush_r+0x20>
 8011b98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	dc02      	bgt.n	8011ba4 <__sflush_r+0x20>
 8011b9e:	2000      	movs	r0, #0
 8011ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ba4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011ba6:	2e00      	cmp	r6, #0
 8011ba8:	d0f9      	beq.n	8011b9e <__sflush_r+0x1a>
 8011baa:	2300      	movs	r3, #0
 8011bac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011bb0:	682f      	ldr	r7, [r5, #0]
 8011bb2:	602b      	str	r3, [r5, #0]
 8011bb4:	d032      	beq.n	8011c1c <__sflush_r+0x98>
 8011bb6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011bb8:	89a3      	ldrh	r3, [r4, #12]
 8011bba:	075a      	lsls	r2, r3, #29
 8011bbc:	d505      	bpl.n	8011bca <__sflush_r+0x46>
 8011bbe:	6863      	ldr	r3, [r4, #4]
 8011bc0:	1ac0      	subs	r0, r0, r3
 8011bc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011bc4:	b10b      	cbz	r3, 8011bca <__sflush_r+0x46>
 8011bc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011bc8:	1ac0      	subs	r0, r0, r3
 8011bca:	2300      	movs	r3, #0
 8011bcc:	4602      	mov	r2, r0
 8011bce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011bd0:	6a21      	ldr	r1, [r4, #32]
 8011bd2:	4628      	mov	r0, r5
 8011bd4:	47b0      	blx	r6
 8011bd6:	1c43      	adds	r3, r0, #1
 8011bd8:	89a3      	ldrh	r3, [r4, #12]
 8011bda:	d106      	bne.n	8011bea <__sflush_r+0x66>
 8011bdc:	6829      	ldr	r1, [r5, #0]
 8011bde:	291d      	cmp	r1, #29
 8011be0:	d82c      	bhi.n	8011c3c <__sflush_r+0xb8>
 8011be2:	4a2a      	ldr	r2, [pc, #168]	; (8011c8c <__sflush_r+0x108>)
 8011be4:	40ca      	lsrs	r2, r1
 8011be6:	07d6      	lsls	r6, r2, #31
 8011be8:	d528      	bpl.n	8011c3c <__sflush_r+0xb8>
 8011bea:	2200      	movs	r2, #0
 8011bec:	6062      	str	r2, [r4, #4]
 8011bee:	04d9      	lsls	r1, r3, #19
 8011bf0:	6922      	ldr	r2, [r4, #16]
 8011bf2:	6022      	str	r2, [r4, #0]
 8011bf4:	d504      	bpl.n	8011c00 <__sflush_r+0x7c>
 8011bf6:	1c42      	adds	r2, r0, #1
 8011bf8:	d101      	bne.n	8011bfe <__sflush_r+0x7a>
 8011bfa:	682b      	ldr	r3, [r5, #0]
 8011bfc:	b903      	cbnz	r3, 8011c00 <__sflush_r+0x7c>
 8011bfe:	6560      	str	r0, [r4, #84]	; 0x54
 8011c00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011c02:	602f      	str	r7, [r5, #0]
 8011c04:	2900      	cmp	r1, #0
 8011c06:	d0ca      	beq.n	8011b9e <__sflush_r+0x1a>
 8011c08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011c0c:	4299      	cmp	r1, r3
 8011c0e:	d002      	beq.n	8011c16 <__sflush_r+0x92>
 8011c10:	4628      	mov	r0, r5
 8011c12:	f7ff f917 	bl	8010e44 <_free_r>
 8011c16:	2000      	movs	r0, #0
 8011c18:	6360      	str	r0, [r4, #52]	; 0x34
 8011c1a:	e7c1      	b.n	8011ba0 <__sflush_r+0x1c>
 8011c1c:	6a21      	ldr	r1, [r4, #32]
 8011c1e:	2301      	movs	r3, #1
 8011c20:	4628      	mov	r0, r5
 8011c22:	47b0      	blx	r6
 8011c24:	1c41      	adds	r1, r0, #1
 8011c26:	d1c7      	bne.n	8011bb8 <__sflush_r+0x34>
 8011c28:	682b      	ldr	r3, [r5, #0]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d0c4      	beq.n	8011bb8 <__sflush_r+0x34>
 8011c2e:	2b1d      	cmp	r3, #29
 8011c30:	d001      	beq.n	8011c36 <__sflush_r+0xb2>
 8011c32:	2b16      	cmp	r3, #22
 8011c34:	d101      	bne.n	8011c3a <__sflush_r+0xb6>
 8011c36:	602f      	str	r7, [r5, #0]
 8011c38:	e7b1      	b.n	8011b9e <__sflush_r+0x1a>
 8011c3a:	89a3      	ldrh	r3, [r4, #12]
 8011c3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c40:	81a3      	strh	r3, [r4, #12]
 8011c42:	e7ad      	b.n	8011ba0 <__sflush_r+0x1c>
 8011c44:	690f      	ldr	r7, [r1, #16]
 8011c46:	2f00      	cmp	r7, #0
 8011c48:	d0a9      	beq.n	8011b9e <__sflush_r+0x1a>
 8011c4a:	0793      	lsls	r3, r2, #30
 8011c4c:	680e      	ldr	r6, [r1, #0]
 8011c4e:	bf08      	it	eq
 8011c50:	694b      	ldreq	r3, [r1, #20]
 8011c52:	600f      	str	r7, [r1, #0]
 8011c54:	bf18      	it	ne
 8011c56:	2300      	movne	r3, #0
 8011c58:	eba6 0807 	sub.w	r8, r6, r7
 8011c5c:	608b      	str	r3, [r1, #8]
 8011c5e:	f1b8 0f00 	cmp.w	r8, #0
 8011c62:	dd9c      	ble.n	8011b9e <__sflush_r+0x1a>
 8011c64:	6a21      	ldr	r1, [r4, #32]
 8011c66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011c68:	4643      	mov	r3, r8
 8011c6a:	463a      	mov	r2, r7
 8011c6c:	4628      	mov	r0, r5
 8011c6e:	47b0      	blx	r6
 8011c70:	2800      	cmp	r0, #0
 8011c72:	dc06      	bgt.n	8011c82 <__sflush_r+0xfe>
 8011c74:	89a3      	ldrh	r3, [r4, #12]
 8011c76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c7a:	81a3      	strh	r3, [r4, #12]
 8011c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8011c80:	e78e      	b.n	8011ba0 <__sflush_r+0x1c>
 8011c82:	4407      	add	r7, r0
 8011c84:	eba8 0800 	sub.w	r8, r8, r0
 8011c88:	e7e9      	b.n	8011c5e <__sflush_r+0xda>
 8011c8a:	bf00      	nop
 8011c8c:	20400001 	.word	0x20400001

08011c90 <_fflush_r>:
 8011c90:	b538      	push	{r3, r4, r5, lr}
 8011c92:	690b      	ldr	r3, [r1, #16]
 8011c94:	4605      	mov	r5, r0
 8011c96:	460c      	mov	r4, r1
 8011c98:	b913      	cbnz	r3, 8011ca0 <_fflush_r+0x10>
 8011c9a:	2500      	movs	r5, #0
 8011c9c:	4628      	mov	r0, r5
 8011c9e:	bd38      	pop	{r3, r4, r5, pc}
 8011ca0:	b118      	cbz	r0, 8011caa <_fflush_r+0x1a>
 8011ca2:	6983      	ldr	r3, [r0, #24]
 8011ca4:	b90b      	cbnz	r3, 8011caa <_fflush_r+0x1a>
 8011ca6:	f000 f887 	bl	8011db8 <__sinit>
 8011caa:	4b14      	ldr	r3, [pc, #80]	; (8011cfc <_fflush_r+0x6c>)
 8011cac:	429c      	cmp	r4, r3
 8011cae:	d11b      	bne.n	8011ce8 <_fflush_r+0x58>
 8011cb0:	686c      	ldr	r4, [r5, #4]
 8011cb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d0ef      	beq.n	8011c9a <_fflush_r+0xa>
 8011cba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011cbc:	07d0      	lsls	r0, r2, #31
 8011cbe:	d404      	bmi.n	8011cca <_fflush_r+0x3a>
 8011cc0:	0599      	lsls	r1, r3, #22
 8011cc2:	d402      	bmi.n	8011cca <_fflush_r+0x3a>
 8011cc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011cc6:	f000 f915 	bl	8011ef4 <__retarget_lock_acquire_recursive>
 8011cca:	4628      	mov	r0, r5
 8011ccc:	4621      	mov	r1, r4
 8011cce:	f7ff ff59 	bl	8011b84 <__sflush_r>
 8011cd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011cd4:	07da      	lsls	r2, r3, #31
 8011cd6:	4605      	mov	r5, r0
 8011cd8:	d4e0      	bmi.n	8011c9c <_fflush_r+0xc>
 8011cda:	89a3      	ldrh	r3, [r4, #12]
 8011cdc:	059b      	lsls	r3, r3, #22
 8011cde:	d4dd      	bmi.n	8011c9c <_fflush_r+0xc>
 8011ce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011ce2:	f000 f908 	bl	8011ef6 <__retarget_lock_release_recursive>
 8011ce6:	e7d9      	b.n	8011c9c <_fflush_r+0xc>
 8011ce8:	4b05      	ldr	r3, [pc, #20]	; (8011d00 <_fflush_r+0x70>)
 8011cea:	429c      	cmp	r4, r3
 8011cec:	d101      	bne.n	8011cf2 <_fflush_r+0x62>
 8011cee:	68ac      	ldr	r4, [r5, #8]
 8011cf0:	e7df      	b.n	8011cb2 <_fflush_r+0x22>
 8011cf2:	4b04      	ldr	r3, [pc, #16]	; (8011d04 <_fflush_r+0x74>)
 8011cf4:	429c      	cmp	r4, r3
 8011cf6:	bf08      	it	eq
 8011cf8:	68ec      	ldreq	r4, [r5, #12]
 8011cfa:	e7da      	b.n	8011cb2 <_fflush_r+0x22>
 8011cfc:	08013f2c 	.word	0x08013f2c
 8011d00:	08013f4c 	.word	0x08013f4c
 8011d04:	08013f0c 	.word	0x08013f0c

08011d08 <std>:
 8011d08:	2300      	movs	r3, #0
 8011d0a:	b510      	push	{r4, lr}
 8011d0c:	4604      	mov	r4, r0
 8011d0e:	e9c0 3300 	strd	r3, r3, [r0]
 8011d12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011d16:	6083      	str	r3, [r0, #8]
 8011d18:	8181      	strh	r1, [r0, #12]
 8011d1a:	6643      	str	r3, [r0, #100]	; 0x64
 8011d1c:	81c2      	strh	r2, [r0, #14]
 8011d1e:	6183      	str	r3, [r0, #24]
 8011d20:	4619      	mov	r1, r3
 8011d22:	2208      	movs	r2, #8
 8011d24:	305c      	adds	r0, #92	; 0x5c
 8011d26:	f7ff f885 	bl	8010e34 <memset>
 8011d2a:	4b05      	ldr	r3, [pc, #20]	; (8011d40 <std+0x38>)
 8011d2c:	6263      	str	r3, [r4, #36]	; 0x24
 8011d2e:	4b05      	ldr	r3, [pc, #20]	; (8011d44 <std+0x3c>)
 8011d30:	62a3      	str	r3, [r4, #40]	; 0x28
 8011d32:	4b05      	ldr	r3, [pc, #20]	; (8011d48 <std+0x40>)
 8011d34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011d36:	4b05      	ldr	r3, [pc, #20]	; (8011d4c <std+0x44>)
 8011d38:	6224      	str	r4, [r4, #32]
 8011d3a:	6323      	str	r3, [r4, #48]	; 0x30
 8011d3c:	bd10      	pop	{r4, pc}
 8011d3e:	bf00      	nop
 8011d40:	080120e1 	.word	0x080120e1
 8011d44:	08012103 	.word	0x08012103
 8011d48:	0801213b 	.word	0x0801213b
 8011d4c:	0801215f 	.word	0x0801215f

08011d50 <_cleanup_r>:
 8011d50:	4901      	ldr	r1, [pc, #4]	; (8011d58 <_cleanup_r+0x8>)
 8011d52:	f000 b8af 	b.w	8011eb4 <_fwalk_reent>
 8011d56:	bf00      	nop
 8011d58:	08011c91 	.word	0x08011c91

08011d5c <__sfmoreglue>:
 8011d5c:	b570      	push	{r4, r5, r6, lr}
 8011d5e:	2268      	movs	r2, #104	; 0x68
 8011d60:	1e4d      	subs	r5, r1, #1
 8011d62:	4355      	muls	r5, r2
 8011d64:	460e      	mov	r6, r1
 8011d66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011d6a:	f7ff f8d7 	bl	8010f1c <_malloc_r>
 8011d6e:	4604      	mov	r4, r0
 8011d70:	b140      	cbz	r0, 8011d84 <__sfmoreglue+0x28>
 8011d72:	2100      	movs	r1, #0
 8011d74:	e9c0 1600 	strd	r1, r6, [r0]
 8011d78:	300c      	adds	r0, #12
 8011d7a:	60a0      	str	r0, [r4, #8]
 8011d7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011d80:	f7ff f858 	bl	8010e34 <memset>
 8011d84:	4620      	mov	r0, r4
 8011d86:	bd70      	pop	{r4, r5, r6, pc}

08011d88 <__sfp_lock_acquire>:
 8011d88:	4801      	ldr	r0, [pc, #4]	; (8011d90 <__sfp_lock_acquire+0x8>)
 8011d8a:	f000 b8b3 	b.w	8011ef4 <__retarget_lock_acquire_recursive>
 8011d8e:	bf00      	nop
 8011d90:	2000904d 	.word	0x2000904d

08011d94 <__sfp_lock_release>:
 8011d94:	4801      	ldr	r0, [pc, #4]	; (8011d9c <__sfp_lock_release+0x8>)
 8011d96:	f000 b8ae 	b.w	8011ef6 <__retarget_lock_release_recursive>
 8011d9a:	bf00      	nop
 8011d9c:	2000904d 	.word	0x2000904d

08011da0 <__sinit_lock_acquire>:
 8011da0:	4801      	ldr	r0, [pc, #4]	; (8011da8 <__sinit_lock_acquire+0x8>)
 8011da2:	f000 b8a7 	b.w	8011ef4 <__retarget_lock_acquire_recursive>
 8011da6:	bf00      	nop
 8011da8:	2000904e 	.word	0x2000904e

08011dac <__sinit_lock_release>:
 8011dac:	4801      	ldr	r0, [pc, #4]	; (8011db4 <__sinit_lock_release+0x8>)
 8011dae:	f000 b8a2 	b.w	8011ef6 <__retarget_lock_release_recursive>
 8011db2:	bf00      	nop
 8011db4:	2000904e 	.word	0x2000904e

08011db8 <__sinit>:
 8011db8:	b510      	push	{r4, lr}
 8011dba:	4604      	mov	r4, r0
 8011dbc:	f7ff fff0 	bl	8011da0 <__sinit_lock_acquire>
 8011dc0:	69a3      	ldr	r3, [r4, #24]
 8011dc2:	b11b      	cbz	r3, 8011dcc <__sinit+0x14>
 8011dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011dc8:	f7ff bff0 	b.w	8011dac <__sinit_lock_release>
 8011dcc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011dd0:	6523      	str	r3, [r4, #80]	; 0x50
 8011dd2:	4b13      	ldr	r3, [pc, #76]	; (8011e20 <__sinit+0x68>)
 8011dd4:	4a13      	ldr	r2, [pc, #76]	; (8011e24 <__sinit+0x6c>)
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	62a2      	str	r2, [r4, #40]	; 0x28
 8011dda:	42a3      	cmp	r3, r4
 8011ddc:	bf04      	itt	eq
 8011dde:	2301      	moveq	r3, #1
 8011de0:	61a3      	streq	r3, [r4, #24]
 8011de2:	4620      	mov	r0, r4
 8011de4:	f000 f820 	bl	8011e28 <__sfp>
 8011de8:	6060      	str	r0, [r4, #4]
 8011dea:	4620      	mov	r0, r4
 8011dec:	f000 f81c 	bl	8011e28 <__sfp>
 8011df0:	60a0      	str	r0, [r4, #8]
 8011df2:	4620      	mov	r0, r4
 8011df4:	f000 f818 	bl	8011e28 <__sfp>
 8011df8:	2200      	movs	r2, #0
 8011dfa:	60e0      	str	r0, [r4, #12]
 8011dfc:	2104      	movs	r1, #4
 8011dfe:	6860      	ldr	r0, [r4, #4]
 8011e00:	f7ff ff82 	bl	8011d08 <std>
 8011e04:	68a0      	ldr	r0, [r4, #8]
 8011e06:	2201      	movs	r2, #1
 8011e08:	2109      	movs	r1, #9
 8011e0a:	f7ff ff7d 	bl	8011d08 <std>
 8011e0e:	68e0      	ldr	r0, [r4, #12]
 8011e10:	2202      	movs	r2, #2
 8011e12:	2112      	movs	r1, #18
 8011e14:	f7ff ff78 	bl	8011d08 <std>
 8011e18:	2301      	movs	r3, #1
 8011e1a:	61a3      	str	r3, [r4, #24]
 8011e1c:	e7d2      	b.n	8011dc4 <__sinit+0xc>
 8011e1e:	bf00      	nop
 8011e20:	08013e24 	.word	0x08013e24
 8011e24:	08011d51 	.word	0x08011d51

08011e28 <__sfp>:
 8011e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e2a:	4607      	mov	r7, r0
 8011e2c:	f7ff ffac 	bl	8011d88 <__sfp_lock_acquire>
 8011e30:	4b1e      	ldr	r3, [pc, #120]	; (8011eac <__sfp+0x84>)
 8011e32:	681e      	ldr	r6, [r3, #0]
 8011e34:	69b3      	ldr	r3, [r6, #24]
 8011e36:	b913      	cbnz	r3, 8011e3e <__sfp+0x16>
 8011e38:	4630      	mov	r0, r6
 8011e3a:	f7ff ffbd 	bl	8011db8 <__sinit>
 8011e3e:	3648      	adds	r6, #72	; 0x48
 8011e40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011e44:	3b01      	subs	r3, #1
 8011e46:	d503      	bpl.n	8011e50 <__sfp+0x28>
 8011e48:	6833      	ldr	r3, [r6, #0]
 8011e4a:	b30b      	cbz	r3, 8011e90 <__sfp+0x68>
 8011e4c:	6836      	ldr	r6, [r6, #0]
 8011e4e:	e7f7      	b.n	8011e40 <__sfp+0x18>
 8011e50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011e54:	b9d5      	cbnz	r5, 8011e8c <__sfp+0x64>
 8011e56:	4b16      	ldr	r3, [pc, #88]	; (8011eb0 <__sfp+0x88>)
 8011e58:	60e3      	str	r3, [r4, #12]
 8011e5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011e5e:	6665      	str	r5, [r4, #100]	; 0x64
 8011e60:	f000 f847 	bl	8011ef2 <__retarget_lock_init_recursive>
 8011e64:	f7ff ff96 	bl	8011d94 <__sfp_lock_release>
 8011e68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011e6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011e70:	6025      	str	r5, [r4, #0]
 8011e72:	61a5      	str	r5, [r4, #24]
 8011e74:	2208      	movs	r2, #8
 8011e76:	4629      	mov	r1, r5
 8011e78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011e7c:	f7fe ffda 	bl	8010e34 <memset>
 8011e80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011e84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011e88:	4620      	mov	r0, r4
 8011e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e8c:	3468      	adds	r4, #104	; 0x68
 8011e8e:	e7d9      	b.n	8011e44 <__sfp+0x1c>
 8011e90:	2104      	movs	r1, #4
 8011e92:	4638      	mov	r0, r7
 8011e94:	f7ff ff62 	bl	8011d5c <__sfmoreglue>
 8011e98:	4604      	mov	r4, r0
 8011e9a:	6030      	str	r0, [r6, #0]
 8011e9c:	2800      	cmp	r0, #0
 8011e9e:	d1d5      	bne.n	8011e4c <__sfp+0x24>
 8011ea0:	f7ff ff78 	bl	8011d94 <__sfp_lock_release>
 8011ea4:	230c      	movs	r3, #12
 8011ea6:	603b      	str	r3, [r7, #0]
 8011ea8:	e7ee      	b.n	8011e88 <__sfp+0x60>
 8011eaa:	bf00      	nop
 8011eac:	08013e24 	.word	0x08013e24
 8011eb0:	ffff0001 	.word	0xffff0001

08011eb4 <_fwalk_reent>:
 8011eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011eb8:	4606      	mov	r6, r0
 8011eba:	4688      	mov	r8, r1
 8011ebc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011ec0:	2700      	movs	r7, #0
 8011ec2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011ec6:	f1b9 0901 	subs.w	r9, r9, #1
 8011eca:	d505      	bpl.n	8011ed8 <_fwalk_reent+0x24>
 8011ecc:	6824      	ldr	r4, [r4, #0]
 8011ece:	2c00      	cmp	r4, #0
 8011ed0:	d1f7      	bne.n	8011ec2 <_fwalk_reent+0xe>
 8011ed2:	4638      	mov	r0, r7
 8011ed4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ed8:	89ab      	ldrh	r3, [r5, #12]
 8011eda:	2b01      	cmp	r3, #1
 8011edc:	d907      	bls.n	8011eee <_fwalk_reent+0x3a>
 8011ede:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011ee2:	3301      	adds	r3, #1
 8011ee4:	d003      	beq.n	8011eee <_fwalk_reent+0x3a>
 8011ee6:	4629      	mov	r1, r5
 8011ee8:	4630      	mov	r0, r6
 8011eea:	47c0      	blx	r8
 8011eec:	4307      	orrs	r7, r0
 8011eee:	3568      	adds	r5, #104	; 0x68
 8011ef0:	e7e9      	b.n	8011ec6 <_fwalk_reent+0x12>

08011ef2 <__retarget_lock_init_recursive>:
 8011ef2:	4770      	bx	lr

08011ef4 <__retarget_lock_acquire_recursive>:
 8011ef4:	4770      	bx	lr

08011ef6 <__retarget_lock_release_recursive>:
 8011ef6:	4770      	bx	lr

08011ef8 <__swhatbuf_r>:
 8011ef8:	b570      	push	{r4, r5, r6, lr}
 8011efa:	460e      	mov	r6, r1
 8011efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f00:	2900      	cmp	r1, #0
 8011f02:	b096      	sub	sp, #88	; 0x58
 8011f04:	4614      	mov	r4, r2
 8011f06:	461d      	mov	r5, r3
 8011f08:	da08      	bge.n	8011f1c <__swhatbuf_r+0x24>
 8011f0a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011f0e:	2200      	movs	r2, #0
 8011f10:	602a      	str	r2, [r5, #0]
 8011f12:	061a      	lsls	r2, r3, #24
 8011f14:	d410      	bmi.n	8011f38 <__swhatbuf_r+0x40>
 8011f16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011f1a:	e00e      	b.n	8011f3a <__swhatbuf_r+0x42>
 8011f1c:	466a      	mov	r2, sp
 8011f1e:	f000 f945 	bl	80121ac <_fstat_r>
 8011f22:	2800      	cmp	r0, #0
 8011f24:	dbf1      	blt.n	8011f0a <__swhatbuf_r+0x12>
 8011f26:	9a01      	ldr	r2, [sp, #4]
 8011f28:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011f2c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011f30:	425a      	negs	r2, r3
 8011f32:	415a      	adcs	r2, r3
 8011f34:	602a      	str	r2, [r5, #0]
 8011f36:	e7ee      	b.n	8011f16 <__swhatbuf_r+0x1e>
 8011f38:	2340      	movs	r3, #64	; 0x40
 8011f3a:	2000      	movs	r0, #0
 8011f3c:	6023      	str	r3, [r4, #0]
 8011f3e:	b016      	add	sp, #88	; 0x58
 8011f40:	bd70      	pop	{r4, r5, r6, pc}
	...

08011f44 <__smakebuf_r>:
 8011f44:	898b      	ldrh	r3, [r1, #12]
 8011f46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011f48:	079d      	lsls	r5, r3, #30
 8011f4a:	4606      	mov	r6, r0
 8011f4c:	460c      	mov	r4, r1
 8011f4e:	d507      	bpl.n	8011f60 <__smakebuf_r+0x1c>
 8011f50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011f54:	6023      	str	r3, [r4, #0]
 8011f56:	6123      	str	r3, [r4, #16]
 8011f58:	2301      	movs	r3, #1
 8011f5a:	6163      	str	r3, [r4, #20]
 8011f5c:	b002      	add	sp, #8
 8011f5e:	bd70      	pop	{r4, r5, r6, pc}
 8011f60:	ab01      	add	r3, sp, #4
 8011f62:	466a      	mov	r2, sp
 8011f64:	f7ff ffc8 	bl	8011ef8 <__swhatbuf_r>
 8011f68:	9900      	ldr	r1, [sp, #0]
 8011f6a:	4605      	mov	r5, r0
 8011f6c:	4630      	mov	r0, r6
 8011f6e:	f7fe ffd5 	bl	8010f1c <_malloc_r>
 8011f72:	b948      	cbnz	r0, 8011f88 <__smakebuf_r+0x44>
 8011f74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f78:	059a      	lsls	r2, r3, #22
 8011f7a:	d4ef      	bmi.n	8011f5c <__smakebuf_r+0x18>
 8011f7c:	f023 0303 	bic.w	r3, r3, #3
 8011f80:	f043 0302 	orr.w	r3, r3, #2
 8011f84:	81a3      	strh	r3, [r4, #12]
 8011f86:	e7e3      	b.n	8011f50 <__smakebuf_r+0xc>
 8011f88:	4b0d      	ldr	r3, [pc, #52]	; (8011fc0 <__smakebuf_r+0x7c>)
 8011f8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8011f8c:	89a3      	ldrh	r3, [r4, #12]
 8011f8e:	6020      	str	r0, [r4, #0]
 8011f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f94:	81a3      	strh	r3, [r4, #12]
 8011f96:	9b00      	ldr	r3, [sp, #0]
 8011f98:	6163      	str	r3, [r4, #20]
 8011f9a:	9b01      	ldr	r3, [sp, #4]
 8011f9c:	6120      	str	r0, [r4, #16]
 8011f9e:	b15b      	cbz	r3, 8011fb8 <__smakebuf_r+0x74>
 8011fa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011fa4:	4630      	mov	r0, r6
 8011fa6:	f000 f913 	bl	80121d0 <_isatty_r>
 8011faa:	b128      	cbz	r0, 8011fb8 <__smakebuf_r+0x74>
 8011fac:	89a3      	ldrh	r3, [r4, #12]
 8011fae:	f023 0303 	bic.w	r3, r3, #3
 8011fb2:	f043 0301 	orr.w	r3, r3, #1
 8011fb6:	81a3      	strh	r3, [r4, #12]
 8011fb8:	89a0      	ldrh	r0, [r4, #12]
 8011fba:	4305      	orrs	r5, r0
 8011fbc:	81a5      	strh	r5, [r4, #12]
 8011fbe:	e7cd      	b.n	8011f5c <__smakebuf_r+0x18>
 8011fc0:	08011d51 	.word	0x08011d51

08011fc4 <memmove>:
 8011fc4:	4288      	cmp	r0, r1
 8011fc6:	b510      	push	{r4, lr}
 8011fc8:	eb01 0402 	add.w	r4, r1, r2
 8011fcc:	d902      	bls.n	8011fd4 <memmove+0x10>
 8011fce:	4284      	cmp	r4, r0
 8011fd0:	4623      	mov	r3, r4
 8011fd2:	d807      	bhi.n	8011fe4 <memmove+0x20>
 8011fd4:	1e43      	subs	r3, r0, #1
 8011fd6:	42a1      	cmp	r1, r4
 8011fd8:	d008      	beq.n	8011fec <memmove+0x28>
 8011fda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011fde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011fe2:	e7f8      	b.n	8011fd6 <memmove+0x12>
 8011fe4:	4402      	add	r2, r0
 8011fe6:	4601      	mov	r1, r0
 8011fe8:	428a      	cmp	r2, r1
 8011fea:	d100      	bne.n	8011fee <memmove+0x2a>
 8011fec:	bd10      	pop	{r4, pc}
 8011fee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011ff2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011ff6:	e7f7      	b.n	8011fe8 <memmove+0x24>

08011ff8 <_realloc_r>:
 8011ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ffc:	4680      	mov	r8, r0
 8011ffe:	4614      	mov	r4, r2
 8012000:	460e      	mov	r6, r1
 8012002:	b921      	cbnz	r1, 801200e <_realloc_r+0x16>
 8012004:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012008:	4611      	mov	r1, r2
 801200a:	f7fe bf87 	b.w	8010f1c <_malloc_r>
 801200e:	b92a      	cbnz	r2, 801201c <_realloc_r+0x24>
 8012010:	f7fe ff18 	bl	8010e44 <_free_r>
 8012014:	4625      	mov	r5, r4
 8012016:	4628      	mov	r0, r5
 8012018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801201c:	f000 f8fa 	bl	8012214 <_malloc_usable_size_r>
 8012020:	4284      	cmp	r4, r0
 8012022:	4607      	mov	r7, r0
 8012024:	d802      	bhi.n	801202c <_realloc_r+0x34>
 8012026:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801202a:	d812      	bhi.n	8012052 <_realloc_r+0x5a>
 801202c:	4621      	mov	r1, r4
 801202e:	4640      	mov	r0, r8
 8012030:	f7fe ff74 	bl	8010f1c <_malloc_r>
 8012034:	4605      	mov	r5, r0
 8012036:	2800      	cmp	r0, #0
 8012038:	d0ed      	beq.n	8012016 <_realloc_r+0x1e>
 801203a:	42bc      	cmp	r4, r7
 801203c:	4622      	mov	r2, r4
 801203e:	4631      	mov	r1, r6
 8012040:	bf28      	it	cs
 8012042:	463a      	movcs	r2, r7
 8012044:	f7fe fee8 	bl	8010e18 <memcpy>
 8012048:	4631      	mov	r1, r6
 801204a:	4640      	mov	r0, r8
 801204c:	f7fe fefa 	bl	8010e44 <_free_r>
 8012050:	e7e1      	b.n	8012016 <_realloc_r+0x1e>
 8012052:	4635      	mov	r5, r6
 8012054:	e7df      	b.n	8012016 <_realloc_r+0x1e>

08012056 <_raise_r>:
 8012056:	291f      	cmp	r1, #31
 8012058:	b538      	push	{r3, r4, r5, lr}
 801205a:	4604      	mov	r4, r0
 801205c:	460d      	mov	r5, r1
 801205e:	d904      	bls.n	801206a <_raise_r+0x14>
 8012060:	2316      	movs	r3, #22
 8012062:	6003      	str	r3, [r0, #0]
 8012064:	f04f 30ff 	mov.w	r0, #4294967295
 8012068:	bd38      	pop	{r3, r4, r5, pc}
 801206a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801206c:	b112      	cbz	r2, 8012074 <_raise_r+0x1e>
 801206e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012072:	b94b      	cbnz	r3, 8012088 <_raise_r+0x32>
 8012074:	4620      	mov	r0, r4
 8012076:	f000 f831 	bl	80120dc <_getpid_r>
 801207a:	462a      	mov	r2, r5
 801207c:	4601      	mov	r1, r0
 801207e:	4620      	mov	r0, r4
 8012080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012084:	f000 b818 	b.w	80120b8 <_kill_r>
 8012088:	2b01      	cmp	r3, #1
 801208a:	d00a      	beq.n	80120a2 <_raise_r+0x4c>
 801208c:	1c59      	adds	r1, r3, #1
 801208e:	d103      	bne.n	8012098 <_raise_r+0x42>
 8012090:	2316      	movs	r3, #22
 8012092:	6003      	str	r3, [r0, #0]
 8012094:	2001      	movs	r0, #1
 8012096:	e7e7      	b.n	8012068 <_raise_r+0x12>
 8012098:	2400      	movs	r4, #0
 801209a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801209e:	4628      	mov	r0, r5
 80120a0:	4798      	blx	r3
 80120a2:	2000      	movs	r0, #0
 80120a4:	e7e0      	b.n	8012068 <_raise_r+0x12>
	...

080120a8 <raise>:
 80120a8:	4b02      	ldr	r3, [pc, #8]	; (80120b4 <raise+0xc>)
 80120aa:	4601      	mov	r1, r0
 80120ac:	6818      	ldr	r0, [r3, #0]
 80120ae:	f7ff bfd2 	b.w	8012056 <_raise_r>
 80120b2:	bf00      	nop
 80120b4:	20000078 	.word	0x20000078

080120b8 <_kill_r>:
 80120b8:	b538      	push	{r3, r4, r5, lr}
 80120ba:	4d07      	ldr	r5, [pc, #28]	; (80120d8 <_kill_r+0x20>)
 80120bc:	2300      	movs	r3, #0
 80120be:	4604      	mov	r4, r0
 80120c0:	4608      	mov	r0, r1
 80120c2:	4611      	mov	r1, r2
 80120c4:	602b      	str	r3, [r5, #0]
 80120c6:	f7ef fc8b 	bl	80019e0 <_kill>
 80120ca:	1c43      	adds	r3, r0, #1
 80120cc:	d102      	bne.n	80120d4 <_kill_r+0x1c>
 80120ce:	682b      	ldr	r3, [r5, #0]
 80120d0:	b103      	cbz	r3, 80120d4 <_kill_r+0x1c>
 80120d2:	6023      	str	r3, [r4, #0]
 80120d4:	bd38      	pop	{r3, r4, r5, pc}
 80120d6:	bf00      	nop
 80120d8:	20009048 	.word	0x20009048

080120dc <_getpid_r>:
 80120dc:	f7ef bc78 	b.w	80019d0 <_getpid>

080120e0 <__sread>:
 80120e0:	b510      	push	{r4, lr}
 80120e2:	460c      	mov	r4, r1
 80120e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120e8:	f000 f89c 	bl	8012224 <_read_r>
 80120ec:	2800      	cmp	r0, #0
 80120ee:	bfab      	itete	ge
 80120f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80120f2:	89a3      	ldrhlt	r3, [r4, #12]
 80120f4:	181b      	addge	r3, r3, r0
 80120f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80120fa:	bfac      	ite	ge
 80120fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80120fe:	81a3      	strhlt	r3, [r4, #12]
 8012100:	bd10      	pop	{r4, pc}

08012102 <__swrite>:
 8012102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012106:	461f      	mov	r7, r3
 8012108:	898b      	ldrh	r3, [r1, #12]
 801210a:	05db      	lsls	r3, r3, #23
 801210c:	4605      	mov	r5, r0
 801210e:	460c      	mov	r4, r1
 8012110:	4616      	mov	r6, r2
 8012112:	d505      	bpl.n	8012120 <__swrite+0x1e>
 8012114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012118:	2302      	movs	r3, #2
 801211a:	2200      	movs	r2, #0
 801211c:	f000 f868 	bl	80121f0 <_lseek_r>
 8012120:	89a3      	ldrh	r3, [r4, #12]
 8012122:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012126:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801212a:	81a3      	strh	r3, [r4, #12]
 801212c:	4632      	mov	r2, r6
 801212e:	463b      	mov	r3, r7
 8012130:	4628      	mov	r0, r5
 8012132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012136:	f000 b817 	b.w	8012168 <_write_r>

0801213a <__sseek>:
 801213a:	b510      	push	{r4, lr}
 801213c:	460c      	mov	r4, r1
 801213e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012142:	f000 f855 	bl	80121f0 <_lseek_r>
 8012146:	1c43      	adds	r3, r0, #1
 8012148:	89a3      	ldrh	r3, [r4, #12]
 801214a:	bf15      	itete	ne
 801214c:	6560      	strne	r0, [r4, #84]	; 0x54
 801214e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012152:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012156:	81a3      	strheq	r3, [r4, #12]
 8012158:	bf18      	it	ne
 801215a:	81a3      	strhne	r3, [r4, #12]
 801215c:	bd10      	pop	{r4, pc}

0801215e <__sclose>:
 801215e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012162:	f000 b813 	b.w	801218c <_close_r>
	...

08012168 <_write_r>:
 8012168:	b538      	push	{r3, r4, r5, lr}
 801216a:	4d07      	ldr	r5, [pc, #28]	; (8012188 <_write_r+0x20>)
 801216c:	4604      	mov	r4, r0
 801216e:	4608      	mov	r0, r1
 8012170:	4611      	mov	r1, r2
 8012172:	2200      	movs	r2, #0
 8012174:	602a      	str	r2, [r5, #0]
 8012176:	461a      	mov	r2, r3
 8012178:	f7ef fc69 	bl	8001a4e <_write>
 801217c:	1c43      	adds	r3, r0, #1
 801217e:	d102      	bne.n	8012186 <_write_r+0x1e>
 8012180:	682b      	ldr	r3, [r5, #0]
 8012182:	b103      	cbz	r3, 8012186 <_write_r+0x1e>
 8012184:	6023      	str	r3, [r4, #0]
 8012186:	bd38      	pop	{r3, r4, r5, pc}
 8012188:	20009048 	.word	0x20009048

0801218c <_close_r>:
 801218c:	b538      	push	{r3, r4, r5, lr}
 801218e:	4d06      	ldr	r5, [pc, #24]	; (80121a8 <_close_r+0x1c>)
 8012190:	2300      	movs	r3, #0
 8012192:	4604      	mov	r4, r0
 8012194:	4608      	mov	r0, r1
 8012196:	602b      	str	r3, [r5, #0]
 8012198:	f7ef fc75 	bl	8001a86 <_close>
 801219c:	1c43      	adds	r3, r0, #1
 801219e:	d102      	bne.n	80121a6 <_close_r+0x1a>
 80121a0:	682b      	ldr	r3, [r5, #0]
 80121a2:	b103      	cbz	r3, 80121a6 <_close_r+0x1a>
 80121a4:	6023      	str	r3, [r4, #0]
 80121a6:	bd38      	pop	{r3, r4, r5, pc}
 80121a8:	20009048 	.word	0x20009048

080121ac <_fstat_r>:
 80121ac:	b538      	push	{r3, r4, r5, lr}
 80121ae:	4d07      	ldr	r5, [pc, #28]	; (80121cc <_fstat_r+0x20>)
 80121b0:	2300      	movs	r3, #0
 80121b2:	4604      	mov	r4, r0
 80121b4:	4608      	mov	r0, r1
 80121b6:	4611      	mov	r1, r2
 80121b8:	602b      	str	r3, [r5, #0]
 80121ba:	f7ef fc70 	bl	8001a9e <_fstat>
 80121be:	1c43      	adds	r3, r0, #1
 80121c0:	d102      	bne.n	80121c8 <_fstat_r+0x1c>
 80121c2:	682b      	ldr	r3, [r5, #0]
 80121c4:	b103      	cbz	r3, 80121c8 <_fstat_r+0x1c>
 80121c6:	6023      	str	r3, [r4, #0]
 80121c8:	bd38      	pop	{r3, r4, r5, pc}
 80121ca:	bf00      	nop
 80121cc:	20009048 	.word	0x20009048

080121d0 <_isatty_r>:
 80121d0:	b538      	push	{r3, r4, r5, lr}
 80121d2:	4d06      	ldr	r5, [pc, #24]	; (80121ec <_isatty_r+0x1c>)
 80121d4:	2300      	movs	r3, #0
 80121d6:	4604      	mov	r4, r0
 80121d8:	4608      	mov	r0, r1
 80121da:	602b      	str	r3, [r5, #0]
 80121dc:	f7ef fc6f 	bl	8001abe <_isatty>
 80121e0:	1c43      	adds	r3, r0, #1
 80121e2:	d102      	bne.n	80121ea <_isatty_r+0x1a>
 80121e4:	682b      	ldr	r3, [r5, #0]
 80121e6:	b103      	cbz	r3, 80121ea <_isatty_r+0x1a>
 80121e8:	6023      	str	r3, [r4, #0]
 80121ea:	bd38      	pop	{r3, r4, r5, pc}
 80121ec:	20009048 	.word	0x20009048

080121f0 <_lseek_r>:
 80121f0:	b538      	push	{r3, r4, r5, lr}
 80121f2:	4d07      	ldr	r5, [pc, #28]	; (8012210 <_lseek_r+0x20>)
 80121f4:	4604      	mov	r4, r0
 80121f6:	4608      	mov	r0, r1
 80121f8:	4611      	mov	r1, r2
 80121fa:	2200      	movs	r2, #0
 80121fc:	602a      	str	r2, [r5, #0]
 80121fe:	461a      	mov	r2, r3
 8012200:	f7ef fc68 	bl	8001ad4 <_lseek>
 8012204:	1c43      	adds	r3, r0, #1
 8012206:	d102      	bne.n	801220e <_lseek_r+0x1e>
 8012208:	682b      	ldr	r3, [r5, #0]
 801220a:	b103      	cbz	r3, 801220e <_lseek_r+0x1e>
 801220c:	6023      	str	r3, [r4, #0]
 801220e:	bd38      	pop	{r3, r4, r5, pc}
 8012210:	20009048 	.word	0x20009048

08012214 <_malloc_usable_size_r>:
 8012214:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012218:	1f18      	subs	r0, r3, #4
 801221a:	2b00      	cmp	r3, #0
 801221c:	bfbc      	itt	lt
 801221e:	580b      	ldrlt	r3, [r1, r0]
 8012220:	18c0      	addlt	r0, r0, r3
 8012222:	4770      	bx	lr

08012224 <_read_r>:
 8012224:	b538      	push	{r3, r4, r5, lr}
 8012226:	4d07      	ldr	r5, [pc, #28]	; (8012244 <_read_r+0x20>)
 8012228:	4604      	mov	r4, r0
 801222a:	4608      	mov	r0, r1
 801222c:	4611      	mov	r1, r2
 801222e:	2200      	movs	r2, #0
 8012230:	602a      	str	r2, [r5, #0]
 8012232:	461a      	mov	r2, r3
 8012234:	f7ef fbee 	bl	8001a14 <_read>
 8012238:	1c43      	adds	r3, r0, #1
 801223a:	d102      	bne.n	8012242 <_read_r+0x1e>
 801223c:	682b      	ldr	r3, [r5, #0]
 801223e:	b103      	cbz	r3, 8012242 <_read_r+0x1e>
 8012240:	6023      	str	r3, [r4, #0]
 8012242:	bd38      	pop	{r3, r4, r5, pc}
 8012244:	20009048 	.word	0x20009048

08012248 <_init>:
 8012248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801224a:	bf00      	nop
 801224c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801224e:	bc08      	pop	{r3}
 8012250:	469e      	mov	lr, r3
 8012252:	4770      	bx	lr

08012254 <_fini>:
 8012254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012256:	bf00      	nop
 8012258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801225a:	bc08      	pop	{r3}
 801225c:	469e      	mov	lr, r3
 801225e:	4770      	bx	lr
